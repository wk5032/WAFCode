(function($) {
	$.su = $.su || {};
	$.su.ISIE8 = false;
	$.su.ISIE = false;
	var userAgent = navigator.userAgent;
	var isOpera = userAgent.indexOf("Opera") > -1;
	$.su.ISIE = userAgent.indexOf("compatible") > -1 && userAgent.indexOf("MSIE") > -1 && !isOpera;
	if ($.su.ISIE) {	
		var reIE = new RegExp("MSIE (\\d+\\.\\d+);");
		var matRs = userAgent.match(reIE);
		var fIEVersion = parseFloat(matRs[1]);
		if (parseFloat(fIEVersion) < 8) {
			location.href = "./error.html";
		}
		if (parseFloat(fIEVersion) < 9) {
			$.su.ISIE8 = true;
		}
	}
	if (userAgent.toLowerCase().indexOf("trident") > -1 && userAgent.indexOf("rv") > -1){
		//console.log(userAgent)
		var reIE11 = new RegExp("rv:(\\d+\\.\\d+)");
	    var versionStr = userAgent.toLowerCase().match(reIE11);
	    var version =  parseFloat(versionStr[1]);
	    if(version == 11){
	    	$.su.ISIE = true;
	    }
	}
	$.su.func = {};
	$.su.func.breakWordWithLen = function(str, len) {
		if (typeof str != "string") {
			return str
		}
		if (str.length <= len) {
			return str
		} else {
			var subStr = str.substring(0, len);
			var result = subStr + "...";
			return result
		}
	};
	$.su.func.changeUnit = function(value) {
		var result = value;
		if (value >= 1000 * 1000 * 1000) {
			result = (result / (1000 * 1000 * 1000)).toFixed(3) + "G"
		} else {
			if (value >= 1000 * 1000) {
				result = (result / (1000 * 1000)).toFixed(3) + "M"
			} else {
				if (value >= 1000) {
					result = (result / (1000)).toFixed(3) + "K"
				}
			}
		}
		return result
	};
	$.su.func.ipToInt = function(ip) {
		var patternIp = /^\s*[0-9]{1,3}\.{1}[0-9]{1,3}\.{1}[0-9]{1,3}\.{1}[0-9]{1,3}\s*$/;
		var ipArray = ip.split(".");
		if (ipArray.length != 4) {
			return -1
		}
		if (!patternIp.test(ip)) {
			return -1
		}
		return (Number(ipArray[0]) * (1 << 24) + (Number(ipArray[1]) << 16 | Number(ipArray[2]) << 8 | Number(ipArray[3])))
	};
	$.su.func.intToIp = function(int_ip) {
		var str_ip = ((int_ip >> 24) & 255) + "." + ((int_ip >> 16) & 255) + "." + ((int_ip >> 8) & 255) + "." + ((int_ip) & 255);
		return str_ip
	};
	$.su.func.isSameNet = function(ip1, ip2, mask) {
		if (ip1 == "") {
			return false
		}
		var ipToInt = $.su.func.ipToInt;
		var intIp1 = ipToInt(ip1);
		var intIp2 = ipToInt(ip2);
		var intMask = ipToInt(mask);
		if (intMask == 0) {
			return false
		}
		if ((intIp1 & intMask) != (intIp2 & intMask)) {
			return false
		}
		return true
	};
	$.su.func.isHostIp = function(ip1, ip2, mask) {
		if (ip1 == "") {
			return false
		}
		var ipToInt = $.su.func.ipToInt;
		var intIp1 = ipToInt(ip1);
		var intIp2 = ipToInt(ip2);
		var intMask = ipToInt(mask);
		if (intMask == 0) {
			return false
		}
		if ((intIp1 & 4294967295) != (intIp2 & intMask)) {
			return false
		}
		return true
	};
	$.su.func.isNetIp = function(ip, mask) {
		var ipToInt = $.su.func.ipToInt;
		if (!ip) {
			return false
		}
		var ipint = ipToInt(ip);
		var maskint = ipToInt(mask);
		if (0 == (ipint & (~maskint))) {
			return true
		}
		return false
	};
	$.su.func.isNetIpLegal = function(ip, mask) {
		var ipToInt = $.su.func.ipToInt;
		if (!ip) {
			return false
		}
		var ipint = ipToInt(ip);
		var maskint = ipToInt(mask);
		var res = ipint & maskint;
		if (res == 0 || res == maskint) {
			return false
		}
		return true
	};
	$.su.func.isBroadCastIp = function(ip, mask) {
		var ipToInt = $.su.func.ipToInt;
		if (!ip) {
			return false
		}
		var ipint = ipToInt(ip);
		var maskint = ipToInt(mask);
		if (((ipint & (~maskint)) == (~maskint))) {
			return true
		}
		return false
	};
	$.su.func.logicOr = function(int_a, int_b) {
		var binary_a = parseInt(int_a, 10).toString(2);
		var binary_b = parseInt(int_b, 10).toString(2);
		var len = (binary_a.length > binary_b.length) ? binary_a.length : binary_b.length;
		if (len != 32) {
			return int_a | int_b
		}
		var cut = Math.abs(binary_a.length - binary_b.length);
		var temp = "";
		for (var i = 0; i < cut; i++) {
			temp = temp + "0"
		}
		if (binary_a.length > binary_b.length) {
			binary_b = temp + binary_b
		} else {
			binary_a = temp + binary_a
		}
		var res = 0;
		for (var i = len - 1; i >= 0; i--) {
			if (binary_a.charAt(i) | binary_b.charAt(i) == 1) {
				if ((len - 1 - i) > 24) {
					res = Number(res) + 256 * Number((1 << (len - 9 - i)))
				} else {
					res = Number(res) + Number((1 << (len - 1 - i)))
				}
			}
		}
		return res
	}, $.su.func.ipContain = function(ip1, mask1, ip2, mask2) {
		var ipToInt = $.su.func.ipToInt;
		var intToIp = $.su.func.intToIp;
		ip1StartIp = ipToInt(intToIp(ipToInt(ip1) & ipToInt(mask1)));
		ip1EndIp = ipToInt(intToIp($.su.func.logicOr(ipToInt(ip1), ~ipToInt(mask1))));
		ip2StartIp = ipToInt(intToIp(ipToInt(ip2) & ipToInt(mask2)));
		ip2EndIp = ipToInt(intToIp($.su.func.logicOr(ipToInt(ip2), ~ipToInt(mask2))));
		if (ip1StartIp <= ip2StartIp && ip2EndIp <= ip1EndIp) {
			return true
		}
		return false
	};
	$.su.func.getLimitIp = function(lanIP, lanMask, type) {
		var ip_arr = lanIP.split(".");
		var mask_arr = lanMask.split(".");
		var ip_len = ip_arr.length;
		var mask_len = mask_arr.length;
		var return_arr = [];
		for (var i = 0; i < ip_len; ++i) {
			if (type == "min") {
				return_arr.push(ip_arr[i] & mask_arr[i])
			} else {
				var value = parseInt(mask_arr[i]);
				if (value < 128) {
					return_arr.push(ip_arr[i] | (((~value - 128) << 24 >> 24) + 128))
				} else {
					return_arr.push(ip_arr[i] | (~value << 24 >> 24))
				}
			}
		}
		return return_arr.join(".")
	};
	$.su.func.escapeHtml = function(string) {
		var r = string.toString();
		r = r.replace(/\&/g, "&amp;");
		r = r.replace(/\</g, "&lt;");
		r = r.replace(/\>/g, "&gt;");
		r = r.replace(/\"/g, "&quot;");
		r = r.replace(/\s/g, "&nbsp;");
		return r
	};
	$.su.func.showWidgets = function($list) {
		if (!$list || !$list.length) {
			return
		}
		$list.each(function(i, o) {
			$(o)[o.xtype]("enable")[o.xtype]("show")
		})
	};
	$.su.func.hideWidgets = function($list) {
		if (!$list || !$list.length) {
			return
		}
		$list.each(function(i, o) {
			$(o)[o.xtype]("disable")[o.xtype]("hide")
		})
	};
	$.su.vtype = function(options) {
		var defaults = {
			type: "sample",
			regex: /^[a-zA-Z0-9]&/,
			vtypeText: "sample run!",
			validator: null
		};
		var name = "",
			opt = {};
		if ($.type(options) === "string") {
			name = options
		} else {
			if ($.type(options) === "object" && options.vtype) {
				name = options.vtype;
				opt = options
			}
		} if (!$.su.vtype.types[name]) {
			return null
		} else {
			defaults = $.su.vtype.types[name]
		}
		$.extend(this, defaults, opt, {
			isVtype: true
		})
	};
	$.su.vtype.types = {
		email: {
			regex: /^(\w)+((\.){0,1}[\w-]+)*@([a-zA-Z0-9-]+\.)+[a-zA-Z0-9]{2,4}$/,
			vtypeText: $.su.CHAR.VTYPETEXT.EMAIL
		},
		float_number: {
			regex: /^-?[0-9]\d*(.[0-9]\d{0,2})?$/,
			vtypeText: $.su.CHAR.VTYPETEXT.NUMBER,
			validator: function(value) {
				value = parseFloat(value);
				if (this.max !== null || this.max !== undefined) {
					if (value > this.max) {
						if (this.min !== null || this.min !== undefined) {
							var str = $.su.CHAR.VTYPETEXT.NUMBER_MIN_MAX.replace("%min", this.min.toString()).replace("%max", this.max.toString());
							return str
						} else {
							var str = $.su.CHAR.VTYPETEXT.NUMBER_MAX.replace("%max", this.max.toString());
							return str
						}
					}
				}
				if (this.min !== null || this.min !== undefined) {
					if (value < this.min) {
						if (this.max !== null || this.max !== undefined) {
							var str = $.su.CHAR.VTYPETEXT.NUMBER_MIN_MAX.replace("%min", this.min.toString()).replace("%max", this.max.toString());
							return str
						} else {
							var str = $.su.CHAR.VTYPETEXT.NUMBER_MIN.replace("%min", this.min.toString());
							return str
						}
					}
				}
				return true
			}
		},
		number: {
			regex: /^-?[0-9]\d*$/,
			vtypeText: $.su.CHAR.VTYPETEXT.NUMBER,
			validator: function(value) {
				value = parseInt(value, 10);
				if (this.max !== null || this.max !== undefined) {
					if (value > this.max) {
						if (this.min !== null || this.min !== undefined) {
							var str = $.su.CHAR.VTYPETEXT.NUMBER_MIN_MAX.replace("%min", this.min.toString()).replace("%max", this.max.toString());
							return str
						} else {
							var str = $.su.CHAR.VTYPETEXT.NUMBER_MAX.replace("%max", this.max.toString());
							return str
						}
					}
				}
				if (this.min !== null || this.min !== undefined) {
					if (value < this.min) {
						if (this.max !== null || this.max !== undefined) {
							var str = $.su.CHAR.VTYPETEXT.NUMBER_MIN_MAX.replace("%min", this.min.toString()).replace("%max", this.max.toString());
							return str
						} else {
							var str = $.su.CHAR.VTYPETEXT.NUMBER_MIN.replace("%min", this.min.toString());
							return str
						}
					}
				}
				return true
			},
			keybordHandler: function(e) {
				e.stopPropagation();
				var keyCode = e.keyCode,
					shiftKey = e.shiftKey,
					ctrlKey = e.ctrlKey;
				if (shiftKey) {
					return false
				}
				if (keyCode == 37 || keyCode == 39) {
					return true
				}
				if (keyCode == 38 || keyCode == 40) {
					var input = $(this),
						_value = input.val();
					if ($.su.vtype.types.number.regex.test(_value)) {
						if (keyCode == 38) {
							var _maxValue = input.hasClass("hour-text") ? 23 : 59;
							if (_value < _maxValue) {
								input.val(parseInt(_value, 10) + 1)
							} else {
								return false
							}
						} else {
							if (_value == 0) {
								return false
							} else {
								input.val(parseInt(_value, 10) - 1)
							}
						}
					} else {
						input.val(0)
					}
				}
				if (!ctrlKey) {
					if ((keyCode < 48 || keyCode > 57) && keyCode > 32) {
						return false
					}
				}
			}
		},
		date: {
			regex: /^([1-9]|0[1-9]|1[0-2])\/([1-9]|0[1-9]|1[0-9]|2[0-9]|3[0-1])\/([0-9]{4})$/,
			vtypeText: $.su.CHAR.VTYPETEXT.DATE,
			validator: function(val) {
				var arr = val.split("/");
				if (parseInt(arr[2], 10) < 1970) {
					return $.su.CHAR.VTYPETEXT.DATE_INVALID
				}
				if (parseInt(arr[2], 10) > 2030) {
					return $.su.CHAR.VTYPETEXT.DATE_INVALID
				}
				if (1 == arr[0].length) {
					arr[0] = "0" + arr[0]
				}
				if (1 == arr[1].length) {
					arr[1] = "0" + arr[1]
				}
				var formatDate = arr[2] + "/" + arr[0] + "/" + arr[1];
				return (new Date(formatDate).getDate() == formatDate.substring(formatDate.length - 2))
			}
		},
		ipv6: {
			isPrefixFlag: false,
			regex: /^\s*((([0-9A-Fa-f]{1,4}:){7}([0-9A-Fa-f]{1,4}|:))|(([0-9A-Fa-f]{1,4}:){6}(:[0-9A-Fa-f]{1,4}|((25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)(\.(25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)){3})|:))|(([0-9A-Fa-f]{1,4}:){5}(((:[0-9A-Fa-f]{1,4}){1,2})|:((25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)(\.(25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)){3})|:))|(([0-9A-Fa-f]{1,4}:){4}(((:[0-9A-Fa-f]{1,4}){1,3})|((:[0-9A-Fa-f]{1,4})?:((25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)(\.(25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)){3}))|:))|(([0-9A-Fa-f]{1,4}:){3}(((:[0-9A-Fa-f]{1,4}){1,4})|((:[0-9A-Fa-f]{1,4}){0,2}:((25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)(\.(25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)){3}))|:))|(([0-9A-Fa-f]{1,4}:){2}(((:[0-9A-Fa-f]{1,4}){1,5})|((:[0-9A-Fa-f]{1,4}){0,3}:((25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)(\.(25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)){3}))|:))|(([0-9A-Fa-f]{1,4}:){1}(((:[0-9A-Fa-f]{1,4}){1,6})|((:[0-9A-Fa-f]{1,4}){0,4}:((25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)(\.(25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)){3}))|:))|(:(((:[0-9A-Fa-f]{1,4}){1,7})|((:[0-9A-Fa-f]{1,4}){0,5}:((25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)(\.(25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)){3}))|:)))(%.+)?\s*$/,
			vtypeText: $.su.CHAR.VTYPETEXT.IPV6,
			validator: function(val) {
				var reg1 = new RegExp("^[2-3][0-9A-Fa-f]{1,3}:");
				if (!reg1.test(val)) {
					return $.su.CHAR.VTYPETEXT.IPV6_NOT_GLOBAL
				}
				var reg2 = new RegExp("::$");
				if (this.isPrefixFlag) {
					if (!reg2.test(val)) {
						return $.su.CHAR.VTYPETEXT.IPV6_NOT_PREFIX
					}
				} else {
					if (reg2.test(val)) {
						return $.su.CHAR.VTYPETEXT.IPV6_NOT_GLOBAL
					}
				}
				var reg3 = /:/g;
				var arr = val.match(reg3);
				if (this.isPrefixFlag) {
					if (arr.length > 5) {
						return $.su.CHAR.VTYPETEXT.IPV6_NOT_PREFIX
					}
				}
				return true
			}
		},
		ip: {
			allowAllZeroFlag: false,
			disallowAllZeroText: $.su.CHAR.VTYPETEXT.IP_NO_ALL_ZERO,
			allowLoopFlag: false,
			disallowLoopText: $.su.CHAR.VTYPETEXT.IP_NO_LOOP,
			allowDTypeFlag: false,
			disallowDTypeText: $.su.CHAR.VTYPETEXT.IP_NO_D_TYPE,
			allowETypeFlag: false,
			disallowETypeText: $.su.CHAR.VTYPETEXT.IP_NO_E_TYPE,
			allowAllOneFlag: false,
			disallowAllOneText: $.su.CHAR.VTYPETEXT.IP_NO_ALL_ONE,
			disallowFirstZeroFlag: true,
			disallowFirstZeroText: $.su.CHAR.VTYPETEXT.IP_NO_FIRST_ZERO,
			disallowFirstAllOneText: $.su.CHAR.VTYPETEXT.IP_NO_FIRST_ALL_ONE,
			regex: /^(\d|[1-9]\d|1\d\d|2[0-4]\d|25[0-5])(\.(\d|[1-9]\d|1\d\d|2[0-4]\d|25[0-5])){3}$/,
			validator: function(value) {
				var ipStr = value;
				var szarray = [0, 0, 0, 0];
				var remain;
				var i;
				for (i = 0; i < 3; i++) {
					var n = ipStr.indexOf(".");
					szarray[i] = ipStr.substring(0, n);
					remain = ipStr.substring(n + 1);
					ipStr = remain
				}
				szarray[3] = remain;
				for (i = 0; i < 4; i++) {
					if (szarray[i] < 0 || szarray[i] > 255) {
						return false
					}
				}
				if (!this.allowLoopFlag) {
					if (szarray[0] == 1127) {
						return this.disallowLoopText
					}
				}
				if (!this.allowDTypeFlag) {
					if (szarray[0] >= 224 && szarray[0] <= 239) {
						return this.disallowDTypeText
					}
				}
				if (!this.allowETypeFlag) {
					if (szarray[0] >= 240 && szarray[0] <= 254) {
						return this.disallowETypeText
					}
				}
				if (!this.allowAllOneFlag) {
					if (szarray[0] == 255 && szarray[1] == 255 && szarray[2] == 255 && szarray[3] == 255) {
						return this.disallowAllOneText
					}
					if (szarray[0] == 255) {
						return this.disallowFirstAllOneText
					}
				} else {
					if (szarray[0] == 255 && szarray[1] == 255 && szarray[2] == 255 && szarray[3] == 255) {} else {
						if (szarray[0] == 255) {
							return this.disallowFirstAllOneText
						}
					}
				} if (!this.allowAllZeroFlag) {
					if (szarray[0] == 0 && szarray[1] == 0 && szarray[2] == 0 && szarray[3] == 0) {
						return this.disallowAllZeroText
					}
				}
				if (this.allowAllZeroFlag && this.disallowFirstZeroFlag) {
					if (szarray[0] == 0 && (szarray[1] != 0 || szarray[2] != 0 || szarray[3] != 0)) {
						return this.disallowFirstZeroText
					}
				}
				return true
			},
			vtypeText: $.su.CHAR.VTYPETEXT.IP
		},
		ip_no_zero: {},
		mac: {
			regex: /^[a-fA-F\d]{2}\-[a-fA-F\d]{2}\-[a-fA-F\d]{2}\-[a-fA-F\d]{2}\-[a-fA-F\d]{2}\-[a-fA-F\d]{2}$/,
			disallowAllMultiText: $.su.CHAR.VTYPETEXT.MULTI_MAC,
			validator: function(value) {
				var patternMulti = /^\s*[0-9A-Fa-f]{1}[13579bdfBDF]{1}(\-[A-Fa-f0-9]{2}){5}\s*$/;
				var flag = patternMulti.test(value);
				if (flag) {
					return this.disallowAllMultiText
				}
				var patternZero = /^(0{1,2}-){5}0{1,2}$/;
				if (patternZero.test(value)) {
					return false
				}
				return true
			},
			vtypeText: $.su.CHAR.VTYPETEXT.MAC
		},
		netmask: {
			allowAllOneFlag: false,
			disallowAllOneText: $.su.CHAR.VTYPETEXT.MASK_NO_ALL_ONE,
			allowAllZeroFlag: false,
			disallowAllZeroText: $.su.CHAR.VTYPETEXT.MASK_NO_ALL_ZERO,
			regex: /^255\.255\.255\.(255|254|252|248|240|224|192|128|0)$|^255\.255\.(254|252|248|240|224|192|128|0)\.0$|255\.(254|252|248|240|224|192|128|0)\.0\.0$|^(254|252|248|240|224|192|128|0)\.0\.0\.0$/,
			vtypeText: $.su.CHAR.VTYPETEXT.MASK,
			validator: function(value) {
				if (value == "255.255.255.255") {
					if (this.allowAllOneFlag) {
						return true
					} else {
						return this.disallowAllOneText
					}
				}
				if (value == "0.0.0.0") {
					if (this.allowAllZeroFlag) {
						return true
					} else {
						return this.disallowAllZeroText
					}
				}
				return true
			}
		},
		string_ip_domain: {
			regex: /^[A-Za-z0-9\_\-]+\.{1,}/,
			vtypeText: $.su.CHAR.VTYPETEXT.STRING_DOMAIN,
			validator: function(value) {
				var regex = /^\S+$/;
				if (!regex.test(value)) {
					return $.su.CHAR.VTYPETEXT.STRING_DOMAIN
				}
				return true
			}
		},
		string_ip_domain_no_loop: {
			regex: /^[A-Za-z0-9\_\-]+\.{1,}/,
			validator: function(value) {
				if (value == "127.0.0.31") {
					return $.su.CHAR.ERROR["00000131"]
				}
				return true
			},
			vtypeText: $.su.CHAR.VTYPETEXT.STRING_DOMAIN
		},
		ip_domain: {
			regex: /^.+$/,
			vtypeText: $.su.CHAR.VTYPETEXT.IP_DOMAIN,
			validator: function(value) {
				if ($.su.vtype.types["ip"].regex.test(value) && $.su.vtype.types["ip"].validator(value)) {
					return true
				}
				if ($.su.vtype.types["domain"].regex.test(value)) {
					return true
				}
				return false
			}
		},
		domain: {
			regex: /^([a-zA-Z0-9]([a-zA-Z0-9\-]{0,61}[a-zA-Z0-9])?\.)+[a-zA-Z]{2,6}$/,
			vtypeText: $.su.CHAR.VTYPETEXT.DOMAIN
		},
		domain_more: {
			regex: /^([a-zA-Z0-9*]([a-zA-Z0-9\-]{0,61}[a-zA-Z0-9])?\.)+[a-zA-Z]{2,6}$/,
			vtypeText: $.su.CHAR.VTYPETEXT.DOMAIN
		},
		domain_tpddns_cn: {
			regex: /^([a-zA-Z0-9]\.tpddns\.cn)|([a-zA-Z0-9][a-zA-Z0-9\-]{0,61}[a-zA-Z0-9]\.tpddns\.cn)$/,
			vtypeText: $.su.CHAR.VTYPETEXT.DOMAIN_TPDDNS_CN
		},
		ascii_visible: {
			regex: /^[\x21-\x7e]+$/,
			vtypeText: $.su.CHAR.VTYPETEXT.ASCII_VISIBLE
		},
		string_visible: {
			regex: /^\S+$/,
			vtypeText: $.su.CHAR.VTYPETEXT.STRING_VISIBLE
		},
		string_visible_no_comma: {
			regex: /^\S+$/,
			vtypeText: $.su.CHAR.VTYPETEXT.STRING_VISIBLE_NO_COMMA,
			validator: function(value) {
				if (value.indexOf(",") >= 0) {
					return false
				}
				return true
			}
		},
		password: {
			regex: /^[A-Za-z0-9\`\~\!\@\#\$\&\*\(\)\-\=\_\+\[\]\{\}\;\:\'\"\\\|\/\?\.\,\<\>\%\^\/\ ]+$/,
			vtypeText: $.su.CHAR.VTYPETEXT.PWD
		},
		string_visible_allow_blank: {
			regex: /^(\S|\x20)+$/,
			vtypeText: $.su.CHAR.VTYPETEXT.STRING_VISIBLE_ALLOW_BLANK
		},
		pppoe_username: {
			regex: /^[^\\]+$/,
			vtypeText: $.su.CHAR.VTYPETEXT.PPPOE
		},
		string_visible_username: {
			regex: /^[A-Za-z0-9\`\~\!\@\#\$\&\*\(\)\-\=\_\+\[\]\{\}\;\:\'\"\\\|\/\?\.\,\<\>\%\^\/\ ]+$/,
			vtypeText: $.su.CHAR.VTYPETEXT.SSID
		},
		name: {
			regex: /^[A-Za-z0-9\_]+$/,
			vtypeText: $.su.CHAR.VTYPETEXT.NAME
		},
		name_special: {
			regex: /^[A-Za-z0-9\_]+$/,
			vtypeText: $.su.CHAR.VTYPETEXT.NAME,
			validator: function(value) {
				if (value.length < 4) {
					return false
				}
				return true
			}
		},
		name_with_special_start: {
			regex: /^[a-zA-Z_]/,
			vtypeText: $.su.CHAR.VTYPETEXT.NAME_START
		},
		name_in_vpn: {
			regex: /^[a-zA-Z_][A-Za-z0-9\_\-]{0,14}$/,
			vtypeText: $.su.CHAR.VTYPETEXT.NAME
		},
		pwd_in_vpn: {
			regex: /^[A-Za-z0-9\_\-]{1,15}$/,
			vtypeText: $.su.CHAR.VTYPETEXT.NAME
		},
		note: {
			regex: /^[A-Za-z0-9\`\~\!\@\#\$\%\^\&\*\(\)\-\=\_\+\[\]\{\}\;\:\'\"\\\|\/\?\.\,\<\>\ ]*$/,
			vtypeText: $.su.CHAR.VTYPETEXT.NOTE
		},
		update_period: {
			validator: function(value) {
				if (new $.su.vtype("number").validate(value) === true) {
					if (value == 0 || (value >= 30 && value <= 86400)) {
						return true
					} else {
						return $.su.CHAR.VTYPETEXT.WIRELESS_PASSWD_UPDATE_PEROID
					}
				}
				return $.su.CHAR.VTYPETEXT.NUMBER
			}
		},
		strange_pwd: {
			validator: function(value) {
				if (value.length < 8 || value.length > 64) {
					return $.su.CHAR.VTYPETEXT.WIRELESS_PASSWORD
				}
				if (value.length == 64) {
					var reg = /^[A-Fa-f0-9]{64}$/;
					if (value.match(reg)) {
						return true
					} else {
						return $.su.CHAR.VTYPETEXT.WIRELESS_PASSWORD
					}
				}
				var reg =  /[\u4e00-\u9fa5]/;
				if (value.match(reg)) {
						return $.su.CHAR.VTYPETEXT.WIRELESS_PASSWORD
				}
				return true
			}
		},
		string_wireless_name: {
			validator: function(value) {
				var invalidChar = /[\\\+\#\&\=\|\<\>\^]/g;
				if ($.su.unicode.getUtf8Length(value) > 32) {
					return $.su.CHAR.VTYPETEXT.WIRELESS_NAME
				}
				if (invalidChar.exec(value)) {
					return $.su.CHAR.VTYPETEXT.WIRELESS_NAME
				}
				return true
			}
		},
		string_timeobj_name: {
			validator: function(value) {
				var invalidChar = /[\\\+\#\&\=\|\<\>\^\;\s]/g;
				if ($.su.unicode.getUtf8Length(value) > 32) {
					return $.su.CHAR.VTYPETEXT.TIMEOBJ_NAME
				}
				if (invalidChar.exec(value)) {
					return $.su.CHAR.VTYPETEXT.TIMEOBJ_NAME
				}
				return true
			}
		},
		mobile_phone_number:{
			regex: /^[0-9]{11}$/,
			vtypeText: $.su.CHAR.VTYPETEXT.MOBILE_PHONE_NUMBER
		},
		tp_id: {
			regex: /^[0-9]{11}$|^(\w)+((\.){0,1}[\w-]+)*@([a-zA-Z0-9-]+\.)+[a-zA-Z0-9]{2,4}$/,
			vtypeText:  $.su.CHAR.TPDDNS.INVALID_HIHTTPS_ID
		}
	};
	$.su.vtype.prototype.validate = function(value) {
		var resultVal = true;
		var resultReg = true;
		if (this.regex) {
			resultReg = this.regex.test(value);
			if (resultReg !== true) {
				return this.vtypeText
			}
		}
		if (this.validator) {
			resultVal = this.validator(value);
			if (resultVal !== true) {
				return resultVal
			}
		}
		return true
	};
	$.su.clearAttrAll = function(obj) {
		var obj = $(obj);
		obj.removeAttr("id");
		obj.removeAttr("name");
		obj.removeAttr("class")
	};
	$.su.clone = function(obj) {
		var type = Object.prototype.toString.call(obj);
		switch (type) {
			case "[object Array]":
				var result = [];
				for (var index = 0; index < obj.length; index++) {
					result[index] = $.su.clone(obj[index])
				}
				return result;
				break;
			case "[object Object]":
				var result = {};
				for (var index in obj) {
					result[index] = $.su.clone(obj[index])
				}
				return result;
				break;
			case "[object Function]":
				return obj;
				break;
			case "[object String]":
				var result = obj;
				return result;
				break;
			case "[object Number]":
				var result = obj;
				return result;
				break;
			case "[object Boolean]":
				if (!obj) {
					return false
				} else {
					return true
				}
				break;
			default:
				return undefined;
				break
		}
	};
	$.su.format = {
		stringFormat: function(str) {
			return str.toString()
		},
		intFormat: function(intD) {
			if (!isNaN(parseInt(intD))) {
				return parseInt(intD, 10)
			} else {
				return intD
			}
		},
		floatFormat: function(floatV) {
			if (!isNaN(parseFloat(floatV))) {
				return parseFloat(floatV)
			} else {
				return floatV
			}
		},
		booleanFormat: function(bool) {
			if (!bool) {
				return false
			} else {
				return true
			}
		},
		ip: function(ipStr) {
			ipStr = $.trim(ipStr);
			var resultArr = [];
			var arr = ipStr.split(".");
			var len = arr.length;
			for (var i = 0; i < len; i++) {
				if (arr[i].replace(/\s/g, "")) {
					resultArr.push(arr[i].replace(/\s/g, ""))
				} else {
					if (arr[i] == "") {
						resultArr.push("");
						return resultArr.join(".")
					} else {
						return ipStr
					}
				}
			}
			return resultArr.join(".")
		},
		port: function(portNumber) {
			return portNumber.replace(/\s/g, "");
			var formatVal = portNumber;
			if (isNaN(parseInt(portNumber, 10))) {
				return formatVal
			} else {
				return parseInt(portNumber, 10)
			}
		},
		number: function(number) {
			return number.replace(/\s/g, "");
			var formatVal = number;
			if (isNaN(parseInt(number, 10))) {
				return formatVal
			} else {
				return parseInt(number, 10)
			}
		}
	};
	$.su.randomId = function(type) {
		return type + "-" + parseInt(Math.random() * 1000 * 1000 * 1000 * 10, 10).toString()
	};
	$.su.Manager = function(options) {
		var config = {
			type: "Store",
			id: $.su.randomId("manager")
		};
		this.local = {};
		this.global = {};
		$.extend(this, config, options);
		$.su.Manager.managers = $.su.Manager.managers || [];
		$.su.Manager.managers.push(this)
	};
	$.su.Manager.removeLocal = function() {
		var managers = $.su.Manager.managers;
		if (managers) {
			for (var index = 0, len = managers.length; index < len; index++) {
				if (managers[index].removeLocal) {
					managers[index].removeLocal()
				}
			}
		}
	};
	$.su.Manager.removeGlobal = function() {
		var managers = $.su.Manager.managers;
		if (managers) {
			for (var index = 0, len = managers.length; index < len; index++) {
				if (managers[index].removeGlobal) {
					managers[index].removeGlobal()
				}
			}
		}
	};
	$.su.Manager.prototype.get = function(id) {
		var store = this.local[id] || this.global[id];
		if (!store) {
			return null
		}
		return store
	};
	$.su.Manager.prototype.add = function(obj) {
		var id = obj.id;
		if (!id) {
			return false
		}
		var me = this;
		if (obj.global) {
			me.global[id] = obj
		} else {
			me.local[id] = obj
		} if (me.addCallback) {
			me.addCallback(obj)
		}
	};
	$.su.Manager.prototype.remove = function(id) {
		var obj = this.local[id] || this.global[id];
		if (!obj) {}
		if (obj.nodeType) {
			$(obj).remove()
		} else {
			delete obj
		}
		delete this.local[id];
		delete this.global[id];
		obj = null;
		return this
	};
	$.su.Manager.prototype.removeLocal = function() {
		for (var index in this.local) {
			var obj = this.local[index];
			if (obj.nodeType) {
				$(obj).remove()
			} else {
				delete obj
			}
		}
		this.local = null;
		delete this.local;
		this.local = {};
		return this
	};
	$.su.Manager.prototype.removeGlobal = function() {
		for (var index in this.global) {
			var obj = this.global[index];
			if (obj.nodeType) {
				$(obj).remove()
			} else {
				delete obj
			}
		}
		this.global = null;
		delete this.global;
		this.global = {};
		return this
	};
	$.su.storeManager = new $.su.Manager({
		type: "Stroe",
		id: "storeManager"
	});
	$.su.componentManager = new $.su.Manager({
		type: "Component",
		id: "componentManager"
	});
	$.su.tipManager = new $.su.Manager({
		type: "Tip",
		id: "tipManager"
	});
	$.su.msgManager = new $.su.Manager({
		type: "Msg",
		id: "msgManager"
	});
	$.su.tipManager.add = function(obj) {
		$.su.Manager.prototype.add.call(this, obj);
		var container = $("div.tips-container#tips-container").length === 0 ? $('<div class="tips-container" id="tips-container"></div>').appendTo("body") : $("div.tips-container#tips-container");
		container.append(obj)
	};
	$.su.Menu = function(options) {
		var defaults = {
			container: "",
			tabMenuContainer: "",
			data: "",
			urlPath: "",
			cls: "",
			idTag: "",
			list: {},
			handlers: null
		};
		var settings = $.extend({}, defaults, options);
		var menu = this;
		this.settings = settings;
		$.ajax({
			url: settings.data,
			type: "POST",
			dataType: "json",
			success: function(data, status, xhr) {
				if ("undefined" == typeof data.result) {
					window.location.href = "./login.html"
				} else {
					menu.init(data.result.menu, settings)
				}
			},
			error: function() {}
		});
		if (this.settings.handlers) {
			if (settings.handlers.init) {
				$(this).on("ev_init", this.settings.handlers.init)
			}
			if (settings.handlers.goTo) {
				$(this).on("ev_goto", this.settings.handlers.goTo)
			}
		}
	};
	$.su.Menu.prototype.init = function(data, settings) {
		var container = $(settings.container).addClass("menu-container").html("&nbsp;"),
			tabContainer = $(settings.tabMenuContainer).addClass("tab-menu").html("&nbsp;"),
			menu = this;
		if (container.length < 0 || tabContainer.length < 0) {
			return
		}

		function parseMenuData(data, list) {
			if (!data || !list) {
				return []
			}
			if (data.length == 0 || $.isEmptyObject(list)) {
				return []
			}
			var menu = [];
			for (var i = 0; i < data.length; i++) {
				var currentList = {};
				var childrenList = [];
				if (!data[i]["name"]) {
					currentList.name = false;
					currentList.children = parseMenuData(data[i].children, list["children"])
				} else {
					currentList.name = data[i]["name"];
					currentList.text = list[data[i]["name"]]["text"];
					currentList.url = list[data[i]["name"]]["url"];
					childrenList = parseMenuData(data[i].children, list[data[i]["name"]]["children"]);
					if (childrenList.length > 0) {
						currentList.children = childrenList
					}
				}
				menu.push(currentList)
			}
			return menu
		}
		var dataMenu = parseMenuData(data, settings.list);
		var inHTML = '<ul class="menu-tree ' + settings.cls + '">';
		var tabHTML = "";
		for (var index = 0; index < dataMenu.length; index++) {
			var fstMenu = dataMenu[index];
			if (!fstMenu.children || fstMenu.children.length === 0) {
				var tabMenu = fstMenu,
					unique = $.su.randomId("tab-menu-ul");
				inHTML += '<li class="fst" id="' + "menu-" + settings.idTag + "-" + fstMenu.name + "-li" + '">';
				inHTML += '<a class="fst none-sec" data-child="no" data-name="' + fstMenu.name + '" name="' + fstMenu.name + '" tab-id="' + unique + '">';
				inHTML += '<span class="icon"></span>';
				inHTML += '<span class="text">' + fstMenu.text + "</span>";
				inHTML += "</a>";
				inHTML += "</li>";
				tabHTML += "<ul class='tab-menu-ul' id='" + unique + "' style='display:none;'>";
				tabHTML += "<li class='" + "fst" + "'>";
				tabHTML += "<div class='nav-wrap'>";
				tabHTML += "<a class='nav' data-name='" + tabMenu.name + "' href='" + settings.urlPath + tabMenu.url + "'>";
				tabHTML += "<span>" + tabMenu.text + "</span>";
				tabHTML += "</a>";
				tabHTML += "</div>";
				tabHTML += "</li>";
				tabHTML += "</ul>";
				continue
			}
			if (fstMenu.children.length === 1) {
				var tabMenu = fstMenu.children[0].children,
					unique = $.su.randomId("tab-menu-ul");
				if (!tabMenu || tabMenu.length === 0) {
					continue
				}
				inHTML += '<li class="fst" id="' + "menu-" + settings.idTag + "-" + fstMenu.name + "-li" + '">';
				inHTML += '<a class="fst none-sec" id="' + fstMenu.name + '" data-child="no" data-name="' + fstMenu.name + '" name="' + fstMenu.name + '" tab-id="' + unique + '">';
				inHTML += '<span class="icon"></span>';
				inHTML += '<span class="text">' + fstMenu.text + "</span>";
				inHTML += "</a>";
				inHTML += "</li>";
				tabHTML += "<ul class='tab-menu-ul' id='" + unique + "' style='display:none;'>";
				for (var kndex = 0, length = tabMenu.length; kndex < length; kndex++) {
					tabHTML += "<li class='" + (kndex == 0 ? "fst" : "") + "'>";
					tabHTML += "<div class='nav-wrap'>";
					tabHTML += "<a class='nav' data-name='" + tabMenu[kndex].name + "' href='" + settings.urlPath + tabMenu[kndex].url + "'>";
					tabHTML += "<span>" + tabMenu[kndex].text + "</span>";
					tabHTML += "</a>";
					tabHTML += "</div>";
					tabHTML += "</li>"
				}
				tabHTML += "</ul>"
			} else {
				var secMenus = fstMenu.children;
				inHTML += '<li class="fst" id="' + "menu-" + settings.idTag + "-" + fstMenu.name + "-li" + '">';
				inHTML += '<a class="fst" id="' + fstMenu.name + '" data-child="yes" data-name="' + fstMenu.name + '" name="' + fstMenu.name + '">';
				inHTML += '<span class="icon"></span>';
				inHTML += '<span class="text">' + fstMenu.text + "</span>";
				inHTML += "</a>";
				inHTML += '<div class="menu-sec-wrap">';
				inHTML += '<ul class="sec hidden">';
				for (var jndex = 0, len = secMenus.length; jndex < len; jndex++) {
					var secMenu = secMenus[jndex],
						pos = (jndex == 0) ? "sec-fst" : ((jndex == len - 1) ? "sec-lst" : ""),
						unique = $.su.randomId("tab-menu-ul");
					inHTML += '<li class="sec ' + pos + '">';
					inHTML += '<a class="sec" data-name="' + secMenu.name + '" name="' + secMenu.name + '" tab-id="' + unique + '">';
					inHTML += '<span class="selected-tag"></span>';
					inHTML += '<span class="text">' + secMenu.text + "</span>";
					inHTML += "</a>";
					inHTML += "</li>";
					tabHTML += "<ul class='tab-menu-ul' id='" + unique + "' style='display:none;'>";
					var tabMenu = secMenu.children;
					for (var kndex = 0, length = tabMenu.length; kndex < length; kndex++) {
						tabHTML += "<li class='" + (kndex == 0 ? "fst" : "") + "'>";
						tabHTML += "<div class='nav-wrap'>";
						tabHTML += "<a class='nav' data-name='" + tabMenu[kndex].name + "' href='" + settings.urlPath + tabMenu[kndex].url + "'>";
						tabHTML += "<span>" + tabMenu[kndex].text + "</span>";
						tabHTML += "</a>";
						tabHTML += "</div>";
						tabHTML += "</li>"
					}
					tabHTML += "</ul>"
				}
				inHTML += "</ul>";
				inHTML += "</div>";
				inHTML += "</li>"
			}
		}
		inHTML += "</ul>";
		var menu_footer = '<div id="menu-footer" onClick="javascript:window.open(\'http://www.hihttps.com\');"  style="cursor:pointer;">		<p>Copyright <span class="copyright">&copy;</span><span id="copy_year"> ' + $.su.CHAR.COPYRIGHT.COPY_YEAR + "</span></p>		<p>" + $.su.CHAR.COPYRIGHT.COMPANY + "</p>		<p>" + $.su.CHAR.COPYRIGHT.COPYRIGHT + "</p>	</div>";
		var wizard = "";
		wizard += '<div id="menu-wizard">' + $.su.CHAR.MENU.WIZARD + "</div>";
		container.html(inHTML + wizard + menu_footer);
		tabContainer.html(tabHTML);
		container.delegate("#menu-wizard", "click", function(e) {
			$.su.wizard.show()
		});
		container.delegate("ul.menu-tree li.fst a.fst", "click", function(e) {
			e.preventDefault();
			e.stopPropagation();
			var me = $(this),
				name = me.attr("data-name"),
				tabId = me.attr("tab-id");
			if (me.hasClass("deployed")) {
				menu.collapse(name)
			} else {
				var fstMenuList = $.find("ul.menu-tree li.fst a.fst");
				$(fstMenuList).each(function(i, obj) {
					var that = $(obj);
					if (that.hasClass("deployed")) {
						var objName = that.attr("data-name");
						menu.collapse(objName);
						that.removeClass("selected")
					}
				});
				if (me.attr("data-child") == "no") {
					tabContainer.find(".tab-menu-ul").hide();
					$("#" + tabId).show().find("a.nav:eq(0)").trigger("click");
					container.find("li.fst").each(function(i, o) {
						var $o = $(o);
						if ($o.hasClass("deployed")) {
							menu.collapse($o.find("a.fst").attr("data-name"))
						}
						if ($o.hasClass("selected")) {
							$o.removeClass("selected").find(".selected").removeClass("selected")
						}
					});
					me.addClass("selected");
					me.closest("li.fst").addClass("selected")
				} else {
					var items = container.find("ul.menu-tree li.fst a.fst");
					items.each(function(i, obj) {
						var item = $(obj);
						if (!item.hasClass("selected")) {
							menu.collapse(item.attr("data-name"))
						}
					});
					menu.open(name)
				} if ($.type($.su.layout.doLayout) == "function") {
					$.su.layout.doLayout()
				}
			}
		}).delegate("ul.menu-tree li.sec a.sec", "click", function(e) {
			e.preventDefault();
			e.stopPropagation();
			var me = $(this),
				meTop = me.closest("li.fst");
			meTop.addClass("load-tag");
			container.find("li.fst").each(function(i, o) {
				var $o = $(o);
				if (!$o.hasClass("load-tag")) {
					if ($o.hasClass("deployed")) {
						menu.collapse($o.find("a.fst").attr("data-name"))
					}
				}
				if ($o.hasClass("selected")) {
					$o.removeClass("selected").find(".selected").removeClass("selected")
				}
			});
			me.addClass("selected").closest("li.sec").addClass("selected");
			meTop.removeClass("load-tag").addClass("selected").find("a.fst").addClass("selected");
			var tabId = $(this).attr("tab-id");
			var $tab = $("#" + tabId);
			tabContainer.find(".tab-menu-ul").hide();
			if (me.data("name") === "wan-setting") {
				var wanCount = parseInt($.su.wanCount, 10);
				if (!$.isNumeric(wanCount)) {
					wanCount = 1
				}
				var $lis = $tab.find("li").hide();
				$lis.eq(0).show();
				var wanProxy = new $.su.Proxy({
					url: $.su.url("/admin/interface_wan?form=wanmode")
				});
				wanProxy.read({}, function(data) {
					if (data && data.wanmode) {
						$.su.wanCount = data.wanmode;
						wanCount = parseInt($.su.wanCount, 10);
						if (!$.isNumeric(wanCount)) {
							wanCount = 1
						}
						$.each($lis, function(i, li) {
							var $li = $(li);
							if (i < wanCount) {
								$li.show()
							} else {
								$li.hide()
							} if (i >= $lis.length - 2) {
								$li.show()
							}
						})
					}
				})
			}
			$tab.show().find("a.nav:eq(0)").trigger("click")
		});
		tabContainer.delegate("ul.tab-menu-ul li a.nav", "click", function(e) {
			e.preventDefault();
			e.stopPropagation();
			var me = $(this);
			var name = me.attr("data-name");
			var href = me.attr("href");
			me.closest(".tab-menu-ul").find("li").removeClass("selected");
			me.closest("li").addClass("selected");
			$(menu).trigger("ev_goto", [name, href]);
			if (name === "vpn-wan1") {
				var wanCount = parseInt($.su.wanCount, 10);
				if (!$.isNumeric(wanCount)) {
					wanCount = 1
				}
				var lis = $("#tab-menu").find("li");
				var lis_arr = [];
				for (var i = 0; i < lis.length; i++) {
					var data_name = $($(lis[i]).find("a")).attr("data-name");
					var reg = new RegExp(/vpn-wan\d/);
					if (reg.test(data_name)) {
						lis_arr.push(lis[i])
					}
				}
				var wanProxy = new $.su.Proxy({
					url: $.su.url("/admin/interface_wan?form=wanmode")
				});
				wanProxy.read({}, function(data) {
					if (data && data.wanmode) {
						$.su.wanCount = data.wanmode;
						wanCount = parseInt($.su.wanCount, 10);
						if (!$.isNumeric(wanCount)) {
							wanCount = 1
						}
						$.each(lis_arr, function(i, li) {
							var $li = $(li);
							if (i < wanCount) {
								$li.show()
							} else {
								$li.hide()
							}
						})
					}
				})
			}
		});
		tabContainer.delegate("ul.tab-menu-ul li a.nav", "mouseover", function(e) {
			var me = $(this);
			tabContainer.find("ul.tab-menu-ul li").removeClass("hover");
			tabContainer.find("ul.tab-menu-ul li").addClass("nohover");
			me.closest("li").addClass("hover");
			me.closest("li").removeClass("nohover")
		});
		tabContainer.delegate("ul.tab-menu-ul", "mouseout", function(e) {
			var me = $(this);
			tabContainer.find("ul.tab-menu-ul li").removeClass("hover");
			tabContainer.find("ul.tab-menu-ul li").removeClass("nohover")
		});
		$(this).trigger("ev_init")
	};
	$.su.Menu.prototype.open = function(name) {
		var container = $(this.settings.container),
			menuItem = container.find("ul.menu-tree li a[name=" + name + "]");
		if (!menuItem.length || !menuItem.hasClass("fst")) {
			return
		} else {
			menuItem.next("div.menu-sec-wrap").find("ul.sec").slideDown(150, function() {
				menuItem.addClass("deployed").closest("li.fst").addClass("deployed");
				if ($.type($.su.layout.doLayout) == "function") {
					$.su.layout.doLayout()
				}
			})
		}
	};
	$.su.Menu.prototype.goTo = function(fstName, secName) {
		var container = $(this.settings.container),
			fstMenu = container.find("ul.menu-tree li.fst a[name=" + fstName + "]");
		if (!fstMenu.length) {
			return
		} else {
			fstMenu.trigger("click");
			if ( !! secName) {
				var secMenu = fstMenu.parent().find("li.sec a[name=" + secName + "]");
				if (!secMenu.length) {
					return
				} else {
					secMenu.trigger("click")
				}
			}
		}
	};
	$.su.Menu.prototype.collapse = function(name) {
		var menuItem = null,
			container = $(this.settings.container);
		menuItem = container.find("ul.menu-tree li a[name=" + name + "]");
		if (!menuItem.length || !menuItem.hasClass("fst")) {
			return
		} else {
			menuItem.next("div.menu-sec-wrap").find("ul.sec").slideUp(150);
			menuItem.removeClass("deployed").closest("li.fst").removeClass("deployed")
		}
	};
	$.su.app = null;
	$.su.mask = {
		displayed: false,
		count: 0,
		height: 0,
		width: 0,
		show: function() {
			var _this = this;
			_this.count++;
			_this.dom.queue(function() {
				if (_this.displayed == false) {
					$(this).show();
					_this.displayed = true;
				}
				$(this).dequeue()
			})
		},
		hide: function() {
			var _this = this;
			_this.count--;
			if (_this.count <= 0) {
				_this.count = 0
			}
			_this.dom.queue(function() {
				if (_this.displayed == true && _this.count <= 0) {
					$(this).hide();
					_this.displayed = false
				}
				$(this).dequeue()
			})
		},
		init: function() {
			var dom = $("div.mask#mask");
			if (dom.length == 0) {
				dom = $('<div id="mask" class="mask"></div>');
				dom.appendTo($("body"))
			}
			var _this = this;
			_this.dom = dom;
			if (dom.is(":hidden")) {
				_this.displayed = false;
				_this.count = 0
			} else {
				_this.displayed = true;
				_this.count = 1
			}
			var changeSize = function() {
				_this.dom.css({
					width: "100%",
					height: "100%"
				});
				var wrapper = $(".main-wrap");
				var dh = wrapper.height();
				var dw = wrapper.width();
				var wh = $(window).height();
				var ww = $(window).width();
				if (dw > ww) {
					_this.dom.css({
						width: dw
					})
				}
				if (dh > wh) {
					_this.dom.css({
						height: dh
					})
				}
			};
			$(window).on("load resize", changeSize)
		}
	};
	$.su.loading = {
		displayed: false,
		init: function(){
        var dom = $("div.loading-container#loading-container");
        if (dom.length === 0){
            var inHTML = 	"<div class=\"loading-container\" id=\"loading-container\">";
	            inHTML +=		"<div class=\"loading-container-wrap\">";
	            inHTML +=			"<div class=\"loading-container-inner\">";
	            inHTML +=				"<div class=\"loading-waiting-icon\">";
	            if($.su.ISIE == false){
		            inHTML +=                    '<div class="spinner">   ';
		            inHTML +=                    '    <div class="spinner-container container1">';
		            inHTML +=                    '        <div class="circle1"></div>';
		            inHTML +=                    '        <div class="circle2"></div>';
		            inHTML +=                    '        <div class="circle3"></div>';
		            inHTML +=                    '        <div class="circle4"></div>';
		            inHTML +=                    '    </div>';
		            inHTML +=                    '    <div class="spinner-container container2">';
		            inHTML +=                    '        <div class="circle1"></div>';
		            inHTML +=                    '        <div class="circle2"></div>';
		            inHTML +=                    '        <div class="circle3"></div>';
		            inHTML +=                    '        <div class="circle4"></div>';
		            inHTML +=                    '    </div>';
		            inHTML +=                    '    <div class="spinner-container container3">';
		            inHTML +=                    '        <div class="circle1"></div>';
		            inHTML +=                    '        <div class="circle2"></div>';
		            inHTML +=                    '        <div class="circle3"></div>';
		            inHTML +=                    '        <div class="circle4"></div>';
		            inHTML +=                    '    </div>';
		            inHTML +=                    '</div>';
	            }
	            
	            inHTML +=				"</div>";
	            inHTML +=			"</div>";
	            inHTML +=		"</div>";
	            inHTML +=	"</div>";
				dom = $(inHTML).appendTo($("body"))
			}
			var _this = this;
			_this.dom = dom;
			if (dom.is(":hidden")) {
				_this.displayed = false
			} else {
				_this.displayed = true
			}
		},
		show: function() {
			var _this = this;
			_this.dom.queue(function() {
				if (_this.displayed == false) {
					$.su.mask.show();
					$(this).show();
					_this.displayed = true;
				}
				$(this).dequeue()
			})
		},
		hide: function() {
			var _this = this;
			_this.dom.queue(function() {
				if (_this.displayed == true) {
					$.su.mask.hide();
					$(this).hide();
					_this.displayed = false;

				}
				$(this).dequeue()
			})
		}
	};
	$.su.mask.init();
	$.su.loading.init();
	$.su.addEventListener = function(obj, name, func, capture) {
		if (!obj) {
			return
		}
		if (obj.addEventListener) {
			obj.addEventListener(name, function(ev) {
				func.call(obj, ev || window.event)
			}, capture)
		} else {
			obj.attachEvent("on" + name, function(ev) {
				func.call(obj, ev || window.event)
			})
		}
		return func
	};
	$.su.mouse = {
		mousescroll: function(handler) {
			var obj = this.get(0);
			if (!obj || !handler) {
				return
			}
			var wheelType = "mousewheel";
			try {
				document.createEvent("MouseScrollEvents");
				wheelType = "DOMMouseScroll"
			} catch (e) {}
			$.su.addEventListener(obj, wheelType, function(e) {
				if ("detail" in e) {
					e.wheelDelta = e.detail * (-40)
				}
				handler.call(obj, e)
			})
		},
		draggable: function(options) {
			var me = this;
			var defaults = {
				zIndex: 99,
				opacity: 0.7,
				handle: null,
				containment: "parent",
				axis: false,
				distance: 1,
				drag: null,
				start: null,
				stop: null
			};
			var dd = {
				_init: function() {
					this._start()
				},
				_setContainment: function() {
					switch (this.containment) {
						case "window":
							this.containment = [$(window).scrollLeft() - this.position.relative.left - this.offset.parent.left, $(window).scrollTop() - this.position.relative.top - this.offset.top, $(window).scrollLeft() + $(window).width() - this.margins.left, $(window).scrollTop() + ($(window).height() || document.body.parentNode.scrollHeight) - this.margins.top];
							break;
						case "document":
							this.containment = [0, 0, $(document).width() - this.margins.left, ($(document).height() || document.body.parentNode.scrollHeight) - this.margins.top];
							break;
						case "parent":
							break
					}
				},
				_cacheMargins: function() {},
				_destroy: function() {},
				_capture: function() {},
				_start: function() {
					this._cacheMargins()
				},
				_drag: function() {},
				_stop: function() {},
				_cancel: function() {}
			};
			me.each(function(i, obj) {
				$.extend(dd, defaults, options);
				dd.element = obj;
				obj.dragdrop = dd;
				obj.dragdrop._init()
			});
			return me
		}
	};
	$.su.keybord = {};
	$.extend($.fn, $.su.mouse, $.su.keybord);
	$.su.Help = function(options) {
		var defaults = {
			container: "",
			content: "",
			create: function() {
				var inHTML = "";
				inHTML += '<div class="help-container-wrap">';
				inHTML += '<div class="help-btn-container">';
				inHTML += '<a class="btn-help" href="javascript:void(0);">';
				inHTML += "</a>";
				inHTML += "</div>";
				inHTML += '<div class="help-content-container">';
				inHTML += '<div class="position-top-left"></div><div class="position-top-center"></div><div class="position-top-right"></div>';
				inHTML += '<div class="position-center-left"><div class="position-center-right">';
				inHTML += '<div class="help-content-wrap">';
				inHTML += '<div class="help-content-container-wrap">';
				inHTML += '<div class="help-content"></div>';
				inHTML += "</div>";
				inHTML += "</div>";
				inHTML += "</div></div>";
				inHTML += '<div class="position-bottom-left"></div><div class="position-bottom-center"></div><div class="position-bottom-right"></div>';
				inHTML += "</div>";
				inHTML += "</div>";
				var container = $(this.container);
				container.addClass("help-container").append($(inHTML));
				return inHTML
			},
			layout: function() {
				var wh = $(window).height();
				var help = this,
					wrap = help.wrap;
				wrap.css({
					"max-height": wh - 260
				})
			}
		};
		var settings = $.extend({}, defaults, options);
		this.settings = settings;
		this.init()
	};
	$.su.Help.prototype.init = function() {
		var help = this;
		if (!help.settings) {
			return null
		}
		help.settings.create();
		var container = $(help.settings.container),
			contentContainer = container.find("div.help-content-container"),
			wrap = container.find("div.help-content-container-wrap"),
			content = container.find("div.help-content"),
			button = container.find("a.btn-help");
		help.container = container;
		help.wrap = wrap;
		help.content = content;
		help.contentContainer = contentContainer;
		help.button = button;
		button.on("click", function(e) {
			e.preventDefault();
			e.stopPropagation();
			var btn = $(this);
			if (help.show) {
				help.close()
			} else {
				if (!help.loaded) {
					help.load()
				}
				help.open()
			}
		});
		help.content.delegate("div.name-container h5.title.main-title", "click", function() {
			var title = $(this);
			var content = title.next("span.connector").next("div.content-wrap");
			if (title.hasClass("opened")) {
				content.slideUp(200, function() {
					title.removeClass("opened")
				})
			} else {
				title.addClass("opened");
				content.slideDown(200)
			}
		})
	};
	$.su.Help.prototype.load = function(name) {
		var help = this;
		if (help.loaded == true) {
			return
		}
		var name = name || this.settings.content;
		if (!$.isArray(name)) {
			name = [name]
		}
		var render = function(obj) {
			var contentRender = function(obj, subFlag) {
				var inHTML = "";
				var sub = subFlag ? "sub-container" : "main-container";
				for (var index = 0, len = obj.length; index < len; index++) {
					var o = obj[index];
					switch (o.type) {
						case "paragraph":
							if (o.id) {
								inHTML += '<div id="' + o.id + '" class="paragraph-container ' + sub + '">'
							} else {
								inHTML += '<div class="paragraph-container ' + sub + '">'
							} if (o.title) {
								inHTML += '<h5 class="title">' + o.title + "</h5>"
							}
							inHTML += '<div class="content-container">';
							inHTML += '<p class="paragraph">' + o.content + "</p>";
							break;
						case "title":
							if (o.id) {
								inHTML += '<div id="' + o.id + '" class="title-container ' + sub + '">'
							} else {
								inHTML += '<div class="title-container ' + sub + '">'
							}
							inHTML += '<h5 class="title">' + o.title + "</h5>";
							inHTML += '<div class="content-wrap">';
							if (o.content) {
								inHTML += "<p>" + o.content + "</p>"
							}
							break;
						case "name":
							if (o.id) {
								inHTML += '<div id="' + o.id + '" class="name-container ' + sub + '">'
							} else {
								inHTML += '<div class="name-container ' + sub + '">'
							}
							inHTML += '<h5 class="title ' + (subFlag ? "" : "main-title") + '">';
							inHTML += "<span>" + o.title + "</span>";
							inHTML += '<span class="arrow"></span>';
							inHTML += "</h5>";
							inHTML += '<span class="connector">' + (o.connector || " - ") + "</span>";
							inHTML += '<div class="content-wrap">';
							if (o.content) {
								inHTML += "<p>" + o.content + "</p>"
							}
							break;
						case "note":
							if (o.id) {
								inHTML += '<div id="' + o.id + '" class="note-container ' + sub + '">'
							} else {
								inHTML += '<div class="note-container ' + sub + '">'
							}
							inHTML += '<h5 class="title">' + o.title + (o.connector || ":") + "</h5>";
							inHTML += '<div class="content-wrap-note">';
							inHTML += '<ol class="note">';
							if ($.type(o.content) != "array") {
								o.content = [o.content]
							}
							for (var jndex = 0, lenj = o.content.length; jndex < lenj; jndex++) {
								inHTML += "<li>" + o.content[jndex] + "</li>"
							}
							inHTML += "</ol>";
							break;
						case "step":
							if (o.id) {
								inHTML += '<div id="' + o.id + '" class="step-container ' + sub + '">'
							} else {
								inHTML += '<div class="step-container ' + sub + '">'
							} if (o.title) {
								inHTML += '<h5 class="title">' + o.title + (o.connector || "") + "</h5>"
							}
							inHTML += '<div class="content-wrap-step">';
							inHTML += '<ol class="step">';
							if ($.type(o.content) != "array") {
								o.content = [o.content]
							}
							for (var jndex = 0, lenj = o.content.length; jndex < lenj; jndex++) {
								var c = o.content[jndex];
								if ($.type(c) == "string") {
									inHTML += "<li>" + c + "</li>"
								} else {
									inHTML += "<li>";
									inHTML += "<p>" + c.content + "</p>";
									if (c.children) {
										inHTML += contentRender(c.children, true)
									}
									inHTML += "</li>"
								}
							}
							inHTML += "</ol>";
							break;
						default:
					}
					if (o.children) {
						inHTML += contentRender(o.children, true)
					}
					inHTML += "</div>";
					inHTML += "</div>"
				}
				return inHTML
			};
			var inHTML = "";
			if (obj.TITLE) {
				inHTML += '<h4 class="title">' + obj.TITLE + "</h4>"
			}
			if ($.type(obj.CONTENT) == "array") {
				inHTML += contentRender(obj.CONTENT, false)
			}
			return inHTML
		};
		for (var index = 0, len = name.length; index < len; index++) {
			var contentObj = $.su.CHAR.HELP[name[index]];
			var htmlStr = render(contentObj);
			this.content.append($(htmlStr))
		}
		if (this.settings.afterLoad) {
			this.settings.afterLoad()
		}
		help.loaded = true
	};
	$.su.Help.prototype.open = function() {
		var help = this;
		help.settings.layout.call(this);
		help.contentContainer.slideDown(150, function() {
			$(this).show();
			help.show = true
		});
		help.contentContainer.on("click", function(e) {
			e.stopPropagation()
		});
		var btn = help.button;
		btn.addClass("clicked");
		$("html").one("click", function() {
			help.close()
		})
	};
	$.su.Help.prototype.close = function() {
		var help = this;
		help.contentContainer.fadeOut(150, function() {
			$(this).hide();
			help.show = false
		});
		var btn = help.button;
		btn.removeClass("clicked")
	};
	$.su.layout = {
		doLayout: function() {}
	};
	$.su.unicode = {
		encode: function(str) {
			var a = [];
			for (var i = 0; i < str.length; i++) {
				var code = str.charCodeAt(i);
				code = ((code.toString(16).length) % 2) == 0 ? code.toString(16) : "0" + code.toString(16);
				a[i] = code
			}
			return "&#" + a.join(";&#") + ";"
		},
		decode: function(str) {
			return str.replace(/&#(x)?([^&]{1,6});?/g, function(a, b, c) {
				return parseInt("0x" + String, 16).fromCharCode(parseInt(c, b ? 16 : 10))
			})
		},
		encodeNoPrefix: function(str) {
			var unicode = this.encode(str);
			return unicode.replace(/[&#;]/g, "").toString()
		},
		getUnicodeLength: function(str) {
			var unicode = this.encode(str);
			unicode = unicode.replace(/[&#;]/g, "");
			return Math.ceil(unicode.length / 2)
		},
		getUtf8Length: function(str) {
			var unicode = this.encode(str);
			var len = 0;
			unicode.replace(/&#(x)?([^&]{1,6});?/g, function(code) {
				var utf8Code = code.replace(/\&\#/g, "0x").replace(/\;/g, "").toString();
				if (0 <= utf8Code && utf8Code <= 127) {
					len = len + 1
				} else {
					if (128 <= utf8Code && utf8Code <= 2047) {
						len = len + 2
					} else {
						if (2048 <= utf8Code && utf8Code <= 65535) {
							len = len + 3
						} else {
							if (65536 <= utf8Code && utf8Code <= 2097151) {
								len = len + 4
							} else {
								if (2097152 <= utf8Code && utf8Code <= 67108863) {
									len = len + 5
								} else {
									if (67108864 <= utf8Code && utf8Code <= 2147483647) {
										len = len + 6
									}
								}
							}
						}
					}
				}
			});
			return len
		},
		checkUtf8Length: function(str, minLength, maxLength) {
			var minLength = minLength || 0,
				maxLength = maxLength || "";
			var len = $.su.unicode.getUtf8Length(str);
			if (len < minLength) {
				return false
			}
			if (maxLength !== "") {
				if (maxLength < len) {
					return false
				}
			}
			return true
		},
		checkUnicodeLength: function(str, minLength, maxLength) {
			var minLength = minLength * 2 || 0,
				maxLength = maxLength * 2 || "";
			var pattern = "^.{%minLength%,%maxLength%}$";
			pattern = pattern.replace("%minLength%", minLength).replace("%maxLength%", maxLength);
			pattern = new RegExp(pattern);
			return pattern.test(this.encodeNoPrefix(str))
		}
	};
	$.su.loadComboData = function(url, para, arr, type) {
		var proxy = new $.su.Proxy({
			url: url,
			type: type,
			async: false,
			autoLoad: false
		});
		var parseData = function(source, arr) {
			var retArr = [];
			if (!$.isArray(arr)) {
				return retArr
			}
			$(source).each(function(index, element) {
				var tempObj = {};
				var len = arr.length;
				for (var i = 0; i < len; i++) {
					if (arr[i]) {
						if (arr[i].func) {
							tempObj[arr[i].dstKey] = arr[i].func(element[arr[i].srcKey], arr[i].para)
						} else {
							tempObj[arr[i].dstKey] = element[arr[i].srcKey]
						}
					}
				}
				retArr.push(tempObj)
			});
			return retArr
		};
		var res = {};
		proxy.read(para, function(result, others, status, xhr) {
			res = parseData(result, arr)
		}, function() {}, function() {});
		return res
	};
	if (typeof JSON !== "object") {
		JSON = {}
	}

	function f(n) {
		return n < 10 ? "0" + n : n
	}
	if (typeof Date.prototype.toJSON !== "function") {
		Date.prototype.toJSON = function(key) {
			return isFinite(this.valueOf()) ? this.getUTCFullYear() + "-" + f(this.getUTCMonth() + 1) + "-" + f(this.getUTCDate()) + "T" + f(this.getUTCHours()) + ":" + f(this.getUTCMinutes()) + ":" + f(this.getUTCSeconds()) + "Z" : null
		};
		String.prototype.toJSON = Number.prototype.toJSON = Boolean.prototype.toJSON = function(key) {
			return this.valueOf()
		}
	}
	var cx = /[\u0000\u00ad\u0600-\u0604\u070f\u17b4\u17b5\u200c-\u200f\u2028-\u202f\u2060-\u206f\ufeff\ufff0-\uffff]/g,
		escapable = /[\\\"\x00-\x1f\x7f-\x9f\u00ad\u0600-\u0604\u070f\u17b4\u17b5\u200c-\u200f\u2028-\u202f\u2060-\u206f\ufeff\ufff0-\uffff]/g,
		gap, indent, meta = {
			"\b": "\\b",
			"\t": "\\t",
			"\n": "\\n",
			"\f": "\\f",
			"\r": "\\r",
			'"': '\\"',
			"\\": "\\\\"
		}, rep;

	function quote(string) {
		escapable.lastIndex = 0;
		return escapable.test(string) ? '"' + string.replace(escapable, function(a) {
			var c = meta[a];
			return typeof c === "string" ? c : "\\u" + ("0000" + a.charCodeAt(0).toString(16)).slice(-4)
		}) + '"' : '"' + string + '"'
	}

	function str(key, holder) {
		var i, k, v, length, mind = gap,
			partial, value = holder[key];
		if (value && typeof value === "object" && typeof value.toJSON === "function") {
			value = value.toJSON(key)
		}
		if (typeof rep === "function") {
			value = rep.call(holder, key, value)
		}
		switch (typeof value) {
			case "string":
				return quote(value);
			case "number":
				return isFinite(value) ? String(value) : "null";
			case "boolean":
			case "null":
				return String(value);
			case "object":
				if (!value) {
					return "null"
				}
				gap += indent;
				partial = [];
				if (Object.prototype.toString.apply(value) === "[object Array]") {
					length = value.length;
					for (i = 0; i < length; i += 1) {
						partial[i] = str(i, value) || "null"
					}
					v = partial.length === 0 ? "[]" : gap ? "[\n" + gap + partial.join(",\n" + gap) + "\n" + mind + "]" : "[" + partial.join(",") + "]";
					gap = mind;
					return v
				}
				if (rep && typeof rep === "object") {
					length = rep.length;
					for (i = 0; i < length; i += 1) {
						k = rep[i];
						if (typeof k === "string") {
							v = str(k, value);
							if (v) {
								partial.push(quote(k) + (gap ? ": " : ":") + v)
							}
						}
					}
				} else {
					for (k in value) {
						if (Object.prototype.hasOwnProperty.call(value, k)) {
							v = str(k, value);
							if (v) {
								partial.push(quote(k) + (gap ? ": " : ":") + v)
							}
						}
					}
				}
				v = partial.length === 0 ? "{}" : gap ? "{\n" + gap + partial.join(",\n" + gap) + "\n" + mind + "}" : "{" + partial.join(",") + "}";
				gap = mind;
				return v
		}
	}
	if (typeof JSON.stringify !== "function") {
		JSON.stringify = function(value, replacer, space) {
			var i;
			gap = "";
			indent = "";
			if (typeof space === "number") {
				for (i = 0; i < space; i += 1) {
					indent += " "
				}
			} else {
				if (typeof space === "string") {
					indent = space
				}
			}
			rep = replacer;
			if (replacer && typeof replacer !== "function" && (typeof replacer !== "object" || typeof replacer.length !== "number")) {
				throw new Error("JSON.stringify")
			}
			return str("", {
				"": value
			})
		}
	}
	if (typeof JSON.parse !== "function") {
		JSON.parse = function(text, reviver) {
			var j;

			function walk(holder, key) {
				var k, v, value = holder[key];
				if (value && typeof value === "object") {
					for (k in value) {
						if (Object.prototype.hasOwnProperty.call(value, k)) {
							v = walk(value, k);
							if (v !== undefined) {
								value[k] = v
							} else {
								delete value[k]
							}
						}
					}
				}
				return reviver.call(holder, key, value)
			}
			text = String(text);
			cx.lastIndex = 0;
			if (cx.test(text)) {
				text = text.replace(cx, function(a) {
					return "\\u" + ("0000" + a.charCodeAt(0).toString(16)).slice(-4)
				})
			}
			if (/^[\],:{}\s]*$/.test(text.replace(/\\(?:["\\\/bfnrt]|u[0-9a-fA-F]{4})/g, "@").replace(/"[^"\\\n\r]*"|true|false|null|-?\d+(?:\.\d*)?(?:[eE][+\-]?\d+)?/g, "]").replace(/(?:^|:|,)(?:\s*\[)+/g, ""))) {
				j = eval("(" + text + ")");
				return typeof reviver === "function" ? walk({
					"": j
				}, "") : j
			}
			throw new SyntaxError("JSON.parse")
		}
	}
	$.su.json = {};
	$.su.json.toJSONString = function(str, filter) {
		if ($.su.ISIE8) {
			if(str && str.params && str.params.old){
				for(var x in str.params.old){
					if(typeof str.params.old[x] == "string"){
						str.params.old[x] = str.params.old[x].replace(/\"/g, "\\\"");
					}
				}
			}
		}
		var json = JSON.stringify(str, filter);
		if ($.su.ISIE8) {
			var str1 = "";
			eval("var str1 = '" + json + "';");
			return str1;
		} else {
			return json;
		}
	};
	$.su.json.parseJSON = function(str, filter) {
		return JSON.parse(str, filter)
	};
	var arrayFilter = function(array, obj) {
		var returnObj = {};
		if (!array || array.length === 0 || !obj) {
			return returnObj
		}
		if (!$.isArray(array)) {
			array = [array]
		}
		$.each(array, function(i, instance) {
			var match = true;
			$.each(obj, function(key, value) {
				if (instance[key] != value) {
					match = false;
					return false
				}
			});
			if ( !! match) {
				returnObj = instance;
				return false
			}
		});
		return returnObj
	};
	$.su.Proxy = function(options) {
		var defaults = {
			xtype: "proxy",
			url: null,
			combineKey: null,
			async: true,
			timeout: 240 * 1000,
			reader: {
				url: null,
				root: "result",
				type: null,
				timeout: null
			},
			writer: {
				url: null,
				root: "result",
				type: null,
				timeout: null
			},
			type: "POST",
			dataType: "json"
		};
		var settings = $.extend(defaults, options);
		settings.reader.url = settings.reader.url || settings.url;
		settings.reader.combineKey = settings.reader.combineKey || settings.combineKey;
		settings.reader.type = settings.reader.type || settings.type;
		settings.reader.timeout = settings.reader.timeout || settings.timeout;
		settings.reader.type = settings.reader.type.toUpperCase();
		settings.writer.url = settings.writer.url || settings.url;
		settings.writer.combineKey = settings.writer.combineKey || settings.combineKey;
		settings.writer.type = settings.writer.type || settings.type;
		settings.writer.timeout = settings.writer.timeout || settings.timeout;
		settings.writer.type = settings.writer.type.toUpperCase();
		$.extend(this, settings);
		this.isProxy = true
	};
	$.su.Proxy.prototype.read = function(data, callback, callback_fail, callback_error, triggerEvent, scope) {
		var data = $.extend({
			"method": "get"
		}, data);
		var me = scope || this,
			callback = callback || function() {}, callback_fail = callback_fail || function() {}, callback_error = callback_error || function() {}, triggerEvent = triggerEvent === false ? false : true;
		var url = me.reader.url,
			combineKey = me.reader.combineKey;
		if (!$.isArray(url)) {
			return $.ajax({
				url: me.reader.url,
				type: me.reader.type,
				timeout: me.reader.timeout,
				dataType: me.dataType,
				async: me.async,
				cache: false,
				data: {
					data: $.su.json.toJSONString(data)
				},
				traditional: true,
				success: function(data, status, xhr) {
					if (data.error_code == 0) {
						var root = me.reader.root,
							result = null;
						if (root) {
							result = data[root]
						} else {
							result = data
						}
						callback.call(me, result, data.others, status, xhr);
						if (triggerEvent) {
							$(me).trigger("ev_read", [result, data.others, status, xhr])
						}
					} else {
						if ("undefined" == typeof(data.error_code)) {
							data.error_code = 404
						}
						if ($.su.app && $.su.app.errorOperation && $.su.app.errorOperation.denied) {
							$.su.app.errorOperation.denied(data.error_code)
						}
						callback_fail.call(me, data.error_code, data.others, data.result);
						$(me).trigger("ev_failed", [data.error_code, data.others, data.result])
					}
				},
				error: function(xhr, status, type) {
					if (!me.preventErrorDefault) {}
					callback_error.call(me, xhr, status, type, url);
					$(me).trigger("ev_error", [xhr, status, type, url])
				}
			})
		} else {
			var deferredArray = [];
			$.each(url, function(i, obj) {
				deferredArray.push($.ajax({
					url: obj,
					type: me.reader.type,
					timeout: me.reader.timeout,
					dataType: me.dataType,
					async: me.async,
					cache: false,
					data: {
						data: $.su.json.toJSONString(data)
					},
					traditional: true
				}))
			});
			return $.when.apply($, deferredArray).done(function() {
				var root = me.reader.root,
					result = {}, others = {}, error_code = 0,
					status = "success",
					xhr = arguments[0][2];
				if (!combineKey) {
					for (var i = arguments.length - 1; i >= 0; i--) {
						var dataTemp = arguments[i][0],
							statusTemp = arguments[i][1];
						if (dataTemp.error_code != 0) {
							error_code = dataTemp.error_code;
							break
						}
						if (statusTemp != "success") {
							status = statusTemp
						}
						if (dataTemp) {
							$.extend(true, result, dataTemp[root]);
							$.extend(true, others, dataTemp.others)
						}
					}
					result.length = arguments[0][0][root].length;
					result = Array.prototype.slice.call(result, 0)
				} else {
					if ($.isArray(combineKey) && combineKey.length == url.length) {
						result = arguments[0][0][root];
						if (!result || $.isEmptyObject(result)) {
							result = []
						}
						if (!$.isArray(result)) {
							result = [result]
						}
						status = arguments[0][1];
						error_code = arguments[0][0].error_code;
						others = arguments[0][0].others;
						for (var i = arguments.length - 1; i >= 1; i--) {
							var dataTemp = arguments[i][0],
								statusTemp = arguments[i][1];
							if (dataTemp.error_code != 0) {
								error_code = dataTemp.error_code;
								break
							}
							if (statusTemp != "success") {
								status = statusTemp
							}
							$.each(result, function(idx, instance) {
								var obj = {};
								obj[combineKey[i]] = instance[combineKey[0]];
								obj = arrayFilter(dataTemp[root], obj);
								delete obj[combineKey[i]];
								$.extend(result[idx], obj)
							})
						}
					}
				} if (error_code == 0) {
					callback.call(me, result, others, status, xhr);
					if (triggerEvent) {
						$(me).trigger("ev_read", [result, others, status, xhr])
					}
				} else {
					if ("undefined" == typeof(error_code)) {
						error_code = 404
					}
					if ($.su.app && $.su.app.errorOperation && $.su.app.errorOperation.denied) {
						$.su.app.errorOperation.denied(error_code)
					}
					callback_fail.call(me, error_code, others, result);
					$(me).trigger("ev_failed", [error_code, others, result])
				}
			}).fail(function() {
				var xhr = arguments[0][0],
					status = arguments[0][1],
					type = arguments[0][1];
				callback_error.call(me, xhr, status, type, url);
				if (triggerEvent) {
					$(me).trigger("ev_error", [xhr, status, type, url])
				}
			})
		}
	};
	$.su.Proxy.prototype.write = function(data, callback, callback_fail, callback_error, triggerEvent, scope) {
		var data = $.extend({
			"method": "set"
		}, data);
		var me = scope || this,
			callback = callback || function() {}, callback_fail = callback_fail || function() {}, callback_error = callback_error || function() {}, triggerEvent = triggerEvent === false ? false : true;
		var url = me.writer.url,
			combineKey = me.writer.combineKey;
		if (!$.isArray(url)) {
			return $.ajax({
				url: me.writer.url,
				type: me.writer.type,
				timeout: me.writer.timeout,
				dataType: me.dataType,
				cache: false,
				async: me.async,
				data: {
					data: $.su.json.toJSONString(data)
				},
				traditional: true,
				success: function(data, status, xhr) {
					if (data.error_code == 0) {
						var root = me.writer.root,
							result = null;
						if (root) {
							result = data[root]
						} else {
							result = data
						}
						callback.call(me, result, data.others, status, xhr);
						if (triggerEvent) {
							$(me).trigger("ev_write", [result, data.others, status, xhr])
						}
					} else {
						if ("undefined" == typeof(data.error_code)) {
							data.error_code = 404
						}
						if ($.su.app && $.su.app.errorOperation && $.su.app.errorOperation.denied) {
							$.su.app.errorOperation.denied(data.error_code)
						}
						callback_fail.call(me, data.error_code, data.others, data.result);
						$(me).trigger("ev_failed", [data.error_code, data.others, data.result])
					}
				},
				error: function(xhr, status, type) {
					if (!me.preventErrorDefault) {}
					callback_error.call(me, xhr, status, type);
					$(me).trigger("ev_error", [xhr, status, type, url])
				}
			})
		} else {
			var deferredArray = [];
			$.each(url, function(i, obj) {
				deferredArray.push($.ajax({
					url: obj,
					type: me.reader.type,
					timeout: me.reader.timeout,
					dataType: me.dataType,
					async: me.async,
					cache: false,
					data: {
						data: $.su.json.toJSONString(data)
					},
					traditional: true
				}))
			});
			return $.when.apply($, deferredArray).done(function() {
				var root = me.reader.root,
					result = {}, others = {}, error_code = 0,
					status = "success",
					xhr = arguments[0][2];
				if (!combineKey) {
					for (var i = arguments.length - 1; i >= 0; i--) {
						var dataTemp = arguments[i][0],
							statusTemp = arguments[i][1];
						if (dataTemp.error_code != 0) {
							error_code = dataTemp.error_code;
							break
						}
						if (statusTemp != "success") {
							status = statusTemp
						}
						if (dataTemp) {
							$.extend(true, result, dataTemp[root]);
							$.extend(true, others, dataTemp.others)
						}
					}
					result.length = arguments[0][0][root].length;
					result = Array.prototype.slice.call(result, 0)
				} else {
					if ($.isArray(combineKey) && combineKey.length == url.length) {
						result = arguments[0][0][root];
						if (!result || $.isEmptyObject(result)) {
							result = []
						}
						if (!$.isArray(result)) {
							result = [result]
						}
						status = arguments[0][1];
						error_code = arguments[0][0].error_code;
						others = arguments[0][0].others;
						for (var i = arguments.length - 1; i >= 1; i--) {
							var dataTemp = arguments[i][0],
								statusTemp = arguments[i][1];
							if (dataTemp.error_code != 0) {
								error_code = dataTemp.error_code;
								break
							}
							if (statusTemp != "success") {
								status = statusTemp
							}
							$.each(result, function(idx, instance) {
								var obj = {};
								obj[combineKey[i]] = instance[combineKey[0]];
								obj = arrayFilter(dataTemp[root], obj);
								delete obj[combineKey[i]];
								$.extend(result[idx], obj)
							})
						}
					}
				} if (error_code == 0) {
					callback.call(me, result, others, status, xhr);
					if (triggerEvent) {
						$(me).trigger("ev_read", [result, others, status, xhr])
					}
				} else {
					if ("undefined" == typeof(error_code)) {
						error_code = 404
					}
					if ($.su.app && $.su.app.errorOperation && $.su.app.errorOperation.denied) {
						$.su.app.errorOperation.denied(error_code)
					}
					callback_fail.call(me, error_code, others, result);
					$(me).trigger("ev_failed", [error_code, others, result])
				}
			}).fail(function() {
				var xhr = arguments[0][0],
					status = arguments[0][1],
					type = arguments[0][1];
				callback_error.call(me, xhr, status, type, url);
				if (triggerEvent) {
					$(me).trigger("ev_error", [xhr, status, type, url])
				}
			})
		}
	};
	$.su.Store = function(options) {
		var defaults = {
			fields: null,
			xtype: "store",
			proxy: null,
			autoLoad: false,
			tag: "store",
			global: false,
			keyProperty: "key",
			extraProperty: false,
			updateMode: "operation",
			keyLength: 0
		};
		var settings = $.extend({}, defaults, options);
		if (settings.proxy) {
			if (settings.proxy.isProxy !== true) {
				settings.proxy = new $.su.Proxy(settings.proxy)
			}
		} else {
			settings.autoLoad = false
		} if (!settings.fields || settings.fields.length === 0) {
			return null
		}
		if (settings.global == true) {
			if (!settings.id) {
				return null
			}
		}
		this.id = settings.id || $.su.randomId("store");
		this.init(settings)
	};
	$.su.Store.prototype.init = function(config) {
		$.extend(this, config);
		this.data = [];
		this.snapshot = null;
		this.isStore = true;
		this.isSorted = false;
		if (this.autoLoad === true) {
			this.load()
		}
		$(this).on("ev_datachanged", function(e, store, records) {
			this.isSorted = false
		});
		$.su.storeManager.add(this)
	};
	$.su.Store.prototype.getData = function(key) {
		var data = this.data,
			keyProperty = this.keyProperty;
		if (!key) {
			return undefined
		}
		var index = this.getIndex(key);
		if (index == undefined) {
			return undefined
		} else {
			return data[index]
		}
	};
	$.su.Store.prototype.getDataByIndex = function(index) {
		var data = this.data;
		return data[index]
	};
	$.su.Store.prototype.getIndex = function(key) {
		var data = this.data,
			keyProperty = this.keyProperty;
		if (!key) {
			return undefined
		}
		for (var index = 0, len = data.length; index < len; index++) {
			if (data[index][keyProperty].toString() == key.toString()) {
				return index;
				break
			}
		}
		return undefined
	};
	$.su.Store.prototype.getKeyByIndex = function(index) {
		var data = this.data;
		var keyProperty = this.keyProperty;
		var d = data[index];
		return d[keyProperty]
	};
	$.su.Store.prototype.getIndexs = function(keyArray) {
		var data = this.data,
			keyProperty = this.keyProperty;
		if (keyArray.length == 0) {
			return undefined
		}
		var indexArray = [];
		for (var jndex = 0, jlen = keyArray.length; jndex < jlen; jndex++) {
			for (var index = 0, len = data.length; index < len; index++) {
				var key = keyArray[jndex];
				if (data[index][keyProperty].toString() == key.toString()) {
					indexArray.push(index);
					break
				}
			}
		}
		return indexArray
	};
	$.su.Store.prototype.getExtraKey = function(keyArray) {
		var data = this.data,
			keyProperty = this.keyProperty,
			extraProperty = this.extraProperty;
		if (keyArray.length == 0 || !extraProperty) {
			return []
		}
		var extraArray = [];
		for (var jndex = 0, jlen = keyArray.length; jndex < jlen; jndex++) {
			for (var index = 0, len = data.length; index < len; index++) {
				var key = keyArray[jndex];
				if (data[index][keyProperty].toString() == key.toString()) {
					if ($.isArray(extraProperty)) {
						var tempData = [];
						$.each(extraProperty, function(i, extra) {
							tempData.push(data[index][extra])
						});
						extraArray.push(tempData)
					} else {
						extraArray.push(data[index][extraProperty])
					}
					break
				}
			}
		}
		return extraArray
	};
	$.su.Store.prototype.insert = function(index, data, _callback, _callback_failed, _callback_error) {
		var jndex = (index == undefined || index == null) ? data.length - 1 : index,
			store = this,
			opt = {};
		opt[this.keyProperty] = "add";
		this.proxy.write({
			"method": "add",
			"params": $.extend({
				"index": jndex
			}, data, opt)
		}, function(data, others, status, xhr) {
			if (!$.isArray(data)) {
				data = [data]
			}
			data = store.dataFormat(data);
			if (store.updateMode == "operation") {
				store.insertData(jndex, data, function(jndex, data) {
					if (_callback) {
						_callback.call(store, jndex, data)
					}
				})
			} else {
				store.loadData(data, others, false, function(data) {
					if (_callback) {
						_callback.call(store, data, others, status, xhr)
					}
				})
			}
		}, function(error, others) {
			if (_callback_failed) {
				_callback_failed.call(store, error, others)
			}
			$(store).trigger("ev_failed", ["insert", error, others])
		}, function(xhr, status, type) {
			if (_callback_error) {
				_callback_error.call(store, xhr, status, type)
			}
			$(store).trigger("ev_error", ["insert", xhr, status, type])
		})
	};
	$.su.Store.prototype.load = function(data, _callback, _callback_failed, _callback_error) {
		var store = this,
			data = data || {};
		this.proxy.read({
			"method": "get",
			"params": data
		}, function(data, others, status, xhr) {
			data = store.dataFormat(data);
			store.loadData(data, others, false, function(data) {
				if (_callback) {
					_callback.call(store, data, others, status, xhr)
				}
			});
			$(store).trigger("ev_load", [store, data])
		}, function(error, others) {
			if (_callback_failed) {
				_callback_failed.call(store, error, others)
			}
			$(store).trigger("ev_failed", ["load", error, others])
		}, function(xhr, status, type) {
			if (_callback_error) {
				_callback_error.call(store, xhr, status, type)
			}
			$(store).trigger("ev_error", ["load", xhr, status, type])
		})
	};
	$.su.Store.prototype.update = function(key, data, _callback, _callback_failed, _callback_error) {
		var keyProperty = this.keyProperty;
		if (key == undefined || key == null) {
			return
		}
		var index = this.getIndex(key),
			opt = {}, store = this;
		opt[keyProperty] = key;
		this.proxy.write({
			"method": "set",
			"params": $.extend({
				"index": index
			}, data, opt)
		}, function(data, others, status, xhr) {
			if (!$.isArray(data)) {
				data = [data]
			}
			$.extend(data, opt);
			data = store.dataFormat(data);
			if (store.updateMode == "operation") {
				store.updateData(key, data, function(key, data) {
					if (_callback) {
						_callback.call(store, key, data)
					}
				})
			} else {
				store.loadData(data, others, false, function(data) {
					if (_callback) {
						_callback.call(store, data)
					}
				})
			}
			$(store).trigger("ev_update", [store, data])
		}, function(error, others) {
			if (_callback_failed) {
				_callback_failed.call(store, error, others)
			}
			$(store).trigger("ev_failed", ["update", error, others])
		}, function(xhr, status, type) {
			if (_callback_error) {
				_callback_error.call(store, xhr, status, type)
			}
			$(store).trigger("ev_error", ["update", xhr, status, type])
		})
	};
	$.su.Store.prototype.remove = function(keyArray, data, _callback, _callback_failed, _callback_error) {
		var store = this,
			keyProperty = this.keyProperty;
		if (!$.isArray(keyArray)) {
			keyArray = [keyArray]
		}
		var indexArray = this.getIndexs(keyArray),
			keyData = {
				"key": keyArray.join(","),
				"index": indexArray.join(",")
			}, extraKeyArray = this.getExtraKey(keyArray);
		if (this.extraProperty && extraKeyArray.length) {
			if ($.isArray(this.extraProperty)) {
				$.each(extraKeyArray, function(i, el) {
					extraKeyArray[i] = el.join(";")
				})
			}
			$.extend(keyData, {
				"extraKey": extraKeyArray.join(",")
			})
		}
		this.proxy.write({
			"method": "delete",
			"params": $.extend(keyData, data)
		}, function(data, others, status, xhr) {
			if (store.updateMode == "operation") {
				if (data.length > 0) {
					if (data[0][keyProperty]) {
						var keyArray = [];
						for (var index = 0, len = data.length; index < len; index++) {
							if (data[index].success) {
								var key = data[index][keyProperty];
								keyArray.push(key)
							}
						}
						store.removeDataByKey(keyArray)
					} else {
						var indexArray = [];
						for (var jndex = 0, len = data.length; jndex < len; jndex++) {
							if (data[jndex].success) {
								var index = data[jndex]["index"];
								indexArray.push(parseInt(index, 10))
							}
						}
						store.removeDataByIndex(indexArray)
					}
				}
				if (_callback) {
					_callback.call(store, keyArray, indexArray, data)
				}
			} else {
				var d = store.dataFormat(data);
				store.loadData(d, others, false, function(data) {
					if (_callback) {
						_callback.call(store, data, others)
					}
				})
			}
		}, function(error, others) {
			if (_callback_failed) {
				_callback_failed.call(store, error, others)
			}
			$(store).trigger("ev_failed", ["remove", error, others])
		}, function(xhr, status, type) {
			if (_callback_error) {
				_callback_error.call(store, xhr, status, type)
			}
			$(store).trigger("ev_error", ["remove", xhr, status, type])
		})
	};
	$.su.Store.prototype.dataFormat = function(data) {
		var fields = this.fields,
			keyProperty = this.keyProperty,
			formatFuncList = $.su.format;
		if (!data || $.isEmptyObject(data)) {
			data = []
		}
		if (!$.isArray(data)) {
			data = [data]
		}
		var result = [],
			keyInitialedFlag = false;
		for (var jndex = 0; jndex < fields.length; jndex++) {
			var fieldName = fields[jndex].name,
				fieldType = fields[jndex].type || "string",
				dataMapping = fields[jndex].mapping || fieldName,
				defaultValue = fields[jndex].defaultValue || undefined,
				formatFunc = (fields[jndex].dataFormat) ? fields[jndex].dataFormat : function(data) {
					return data
				};
			for (var index = 0; index < data.length; index++) {
				result[index] = result[index] || {};
				var _dd = data[index][dataMapping];
				var ds = (_dd === undefined || _dd === null) ? defaultValue : _dd;
				var dd = formatFunc(ds);
				result[index][fieldName] = dd
			}
			if (keyProperty == name) {
				keyInitialedFlag = true
			}
		}
		if (!keyInitialedFlag) {
			for (var index = 0; index < data.length; index++) {
				result[index] = result[index] || {};
				var d = data[index][keyProperty];
				result[index][keyProperty] = (d === undefined || d === null) ? "key-" + (index + this.keyLength) : d
			}
		}
		this.keyLength += data.length;
		return result
	};
	$.su.Store.prototype.insertData = function(index, records, _callback) {
		var data = this.data;
		if (!$.isArray(records)) {
			records = [records]
		}
		var dataStart = data.slice(0, index);
		var dataEnd = data.slice(index, data.length);
		var result = dataStart.concat(records, dataEnd);
		this.data = null;
		delete this.data;
		this.data = result;
		this.snapshot = null;
		delete this.snapshot;
		this.snapshot = $.su.clone(this.data);
		if (_callback) {
			_callback.call(this, index, records)
		}
		$(this).trigger("ev_insertdata", [index, records]);
		$(this).trigger("ev_datachanged", [this, this.data, "insertData"]);
		return this
	};
	$.su.Store.prototype.loadData = function(data, others, _append, _callback) {
		if (!_append && this.data.length > 0) {
			this.removeAllData()
		}
		if (!data || $.isEmptyObject(data)) {
			data = []
		}
		if (!$.isArray(data)) {
			data = [data]
		}
		this.data = this.data || [];
		this.data = this.data.concat(data);
		this.snapshot = null;
		delete this.snapshot;
		this.snapshot = $.su.clone(this.data);
		if (_callback) {
			_callback.call(this, data, _append)
		}
		$(this).trigger("ev_loaddata", [this.data, others]);
		$(this).trigger("ev_datachanged", [this, this.data, "loadData"]);
		return this
	};
	$.su.Store.prototype.updateData = function(key, data, _callback) {
		if (!data || $.isEmptyObject(data)) {
			data = []
		}
		if ($.isArray(data)) {
			data = data[0]
		}
		var index = this.getIndex(key);
		if (index === undefined || index === null) {
			return
		}
		this.data.splice(index, 1, data);
		this.snapshot = null;
		delete this.snapshot;
		this.snapshot = $.su.clone(this.data);
		if (_callback) {
			_callback.call(this, key, data)
		}
		$(this).trigger("ev_updatedata", [key, index, data]);
		$(this).trigger("ev_datachanged", [this, this.data, "updateData"]);
		return this
	};
	$.su.Store.prototype.removeDataByKey = function(keyArray, _callback) {
		var keyProperty = this.keyProperty;
		if (!$.isArray(keyArray)) {
			keyArray = [keyArray]
		}
		var keyObj = {};
		for (var index = 0, len = keyArray.length; index < len; index++) {
			keyObj[keyArray[index]] = true
		}
		var data = this.data;
		var indexArray = [];
		for (var index = 0, len = data.length; index < len; index++) {
			if (data[index][keyProperty] in keyObj) {
				indexArray.push(index)
			}
		}
		this.removeDataByIndex(indexArray, function(keyArray, indexArray) {
			if (_callback) {
				_callback.call(this, keyArray, indexArray)
			}
		})
	};
	$.su.Store.prototype.removeDataByIndex = function(indexArray, _callback) {
		var keyProperty = this.keyProperty,
			data = this.data;
		if (!$.isArray(indexArray)) {
			indexArray = [indexArray]
		}
		indexArray.sort(function(a, b) {
			return a - b
		});
		var keyArray = [];
		for (var index = indexArray.length - 1; index >= 0; index--) {
			var i = indexArray[index];
			if (isNaN(i)) {
				continue
			}
			keyArray.push(data[i][keyProperty]);
			data.splice(indexArray[index], 1)
		}
		this.snapshot = null;
		delete this.snapshot;
		this.snapshot = $.su.clone(this.data);
		if (_callback) {
			_callback.call(this, keyArray, indexArray)
		}
		$(this).trigger("ev_removedata", [keyArray, indexArray]);
		$(this).trigger("ev_datachanged", [this, this.data, "removeData"]);
		return this
	};
	$.su.Store.prototype.removeAllData = function(_callback) {
		this.data = null;
		delete this.data;
		this.data = [];
		this.snapshot = null;
		$(this).trigger("ev_removeAllData", [this]);
		$(this).trigger("ev_datachanged", [this, this.data, "removeData"]);
		return this
	};
	$.su.TreeStore = function(options) {
		var defaults = {
			proxy: null,
			fields: [{
				name: "name"
			}, {
				name: "path"
			}, {
				name: "hasBranch"
			}, {
				name: "branches"
			}, {
				name: "leavesInfo"
			}, {
				name: "leaves"
			}, {
				name: "uuid"
			}],
			keyProperty: "path"
		};
		var settings = $.extend({}, defaults, options);
		var store = new $.su.Store(settings);
		store.getNode = function(nodeId) {
			var me = this;
			if (!me.map || !me.map[nodeId]) {
				return undefined
			} else {
				return me.map[nodeId]
			}
		};
		store.loadNode = function(nodeId, data, _callback) {
			var me = this,
				node = me.getNode(nodeId);
			if (!node) {
				return
			}
			var path = node.path,
				param = $.extend({
					"operation": "read",
					"path": path
				}, data);
			me.proxy.read(param, function(data, status, xhr) {
				if (_callback) {
					_callback.call(me, data, status, xhr)
				}
				if (!$.isArray(data.branches) && !$.isArray(data.leaves)) {
					return
				}
				me.map[nodeId].branches = data.branches;
				$(me).trigger("ev_datachanged", [me, "loadNode"]);
				$(me).trigger("ev_loadnode", [me, nodeId, data])
			})
		};
		store.updateMap = function() {
			var me = this,
				root = me.data[0];
			if (!root) {
				return
			}
			var map = {};
			map[root[me.keyProperty]] = root;
			var mapNode = function(node) {
				if (node.branches) {
					for (var index = 0, len = node.branches.length; index < len; index++) {
						var n = node.branches[index];
						store.mapId++;
						map[n[me.keyProperty]] = n;
						mapNode(n)
					}
				}
			};
			mapNode(root);
			store.map = map
		};
		$(store).on("ev_datachanged", store.updateMap);
		return store
	};
	$.su.Widget = function(name, options) {
		var constructor = $.fn[name];
		var fn = {
			defaults: {
				separator: ":",
				cls: "",
				labelCls: "m",
				inputCls: "l",
				fieldLabel: "",
				tips: null,
				tipsCls: "m",
				errorTipsCls: "",
				showError: true
			},
			create: null,
			validate: function() {
				return true
			},
			setValue: function(me, _value) {
				var me = me || this,
					value = _value[1];
				$(me).attr("snapshot", value);
				$(me).val(value);
				return me
			},
			enable: function() {
				var me = me || this,
					container = me[name]("getContainer");
				container.removeClass("disabled");
				me.prop("disabled", false);
				return me
			},
			disable: function() {
				var me = me || this,
					container = me[name]("getContainer");
				container.addClass("disabled");
				me.prop("disabled", true);
				return me
			},
			setFieldLabel: function(me, _fieldLabel) {
				var me = me || this,
					container = me[name]("getContainer");
				var fieldLabel = _fieldLabel[1] || me.get(0).fieldLabel || "";
				container.find("label.widget-fieldlabel").html(fieldLabel);
				return me
			},
			setNormal: function(me) {
				var me = me || this,
					obj = me.get(0),
					container = me[name]("getContainer");
				if (obj.tips) {
					me[name]("setTips", obj.tips)
				}
				container.removeClass("focus error disable dirty");
				container.find("span.widget-validate-icon").css({
					"display": "none"
				});
				container.find("div.widget-error-tips").css({
					"display": "none"
				})
			},
			setFocus: function(me) {
				var me = me || this,
					container = me[name]("getContainer");
				me[name]("setNormal");
				container.addClass("focus");
				return me
			},
			removeFocus: function(me) {
				var me = me || this,
					container = me[name]("getContainer");
				container.removeClass("focus");
				return me
			},
			setValid: function(me) {
				var me = me || this,
					container = me[name]("getContainer");
				container.removeClass("error");
				container.addClass("valid");
				container.find("span.widget-validate-icon").css({
					"display": "inline-block"
				});
				container.find("div.widget-error-tips").css({
					"display": "none"
				});
				return me
			},
			setError: function(me, tips) {
				var me = me || this,
					tips = tips[1] || null,
					container = me[name]("getContainer");
				if (tips) {
					me[name]("setErrorTips", tips)
				}
				container.removeClass("valid");
				container.addClass("error");
				container.find("span.widget-validate-icon").css({
					"display": "inline-block"
				});
				return me
			},
			reset: function(me) {
				var me = me || this,
					obj = me.get(0),
					defaultValue = obj.defaultValue || "";
				me.val(defaultValue);
				return me
			},
			setDirty: function(me) {
				var me = me || this,
					container = me[name]("getContainer");
				me[name]("setNormal");
				container.addClass("dirty");
				return me
			},
			setTips: function(me, _tips) {
				var me = me || this,
					container = me[name]("getContainer"),
					tipsContainer = container.find("div.widget-tips div.tips-content"),
					tips = _tips[1] || "";
				if (me.get(0)) {
					me.get(0).tips = tips
				}
				if ($.type(tips) === "string") {
					tipsContainer.html(tips)
				}
				if (tips == "") {
					tipsContainer.hide();
					tipsContainer.css("display", "none")
				} else {
					tipsContainer.show();
					tipsContainer.fadeIn(150)
				}
				return me
			},
			setErrorTips: function(me, _tips) {
				var me = me || this,
					container = me[name]("getContainer"),
					tips = _tips[1] || "",
					c = container.find("div.widget-error-tips").removeClass("show").css({
						left: "-9999px",
						top: "-9999px",
						display: "block"
					}),
					content = c.find("div.error-tips-content").css({
						"width": "inherit",
						"white-space": "normal"
					});
				if (!me.get(0).showError) {
					return me
				}
				if ($.type(tips) === "string") {
					content.html(tips)
				}
				if (tips == "") {
					c.css("display", "none")
				} else {
					var w = content.width();
					content.css({
						"width": w,
						"white-space": "normal"
					});
					c.css({
						"display": "none",
						left: 0,
						top: 0
					}).fadeIn(120, function() {});
					setTimeout(function() {
						c.addClass("show")
					}, 200)
				}
				return me
			},
			hideErrorTips: function() {
				var me = me || this,
					container = me[name]("getContainer"),
					c = container.find("div.widget-error-tips").removeClass("show").css({
						left: "-9999px",
						top: "-9999px",
						display: "block"
					}),
					content = c.find("div.error-tips-content").css({
						"width": "inherit",
						"white-space": "normal"
					})
			},
			setPosition: function(me, _pos) {
				var me = me || this,
					container = me[name]("getContainer"),
					posX = _pos[1] === "center" ? parseInt(($(window).width() - container.width()) / 2, 10) : _pos[1] || 0,
					posY = _pos[2] === "center" ? parseInt(($(window).height() - container.height()) / 2, 10) : _pos[2] || 0;
				posX = posX < 0 ? 0 : posX;
				posY = (posY - 60) < 0 ? 0 : posY - 60;
				container.css({
					left: posX,
					top: posY
				});
				return {
					x: posX,
					y: posY
				}
			},
			getContainer: function(me) {
				var me = me || this;
				if (me.hasClass("widget-container")) {
					return me
				} else {
					var container = me.closest("div.widget-container");
					if (container.get(0)) {
						return $(container.get(0))
					} else {
						return null
					}
				}
			},
			getWidth: function(me) {
				var me = me || this;
				return me[name]("getContainer").width()
			},
			getHeight: function(me) {
				var me = me || this;
				return me[name]("getContainer").height()
			},
			getSize: function(me) {
				var me = me || this,
					container = me[name]("getContainer");
				return {
					"width": container.width(),
					"height": container.height()
				}
			},
			getValue: function(me) {
				var me = me || this;
				return me.val()
			},
			show: function(me) {
				var me = me || this,
					container = me[name]("getContainer");
				if (container.hasClass("inline-block")) {
					container.css("display", "inline-block")
				} else {
					if (container.hasClass("inline")) {
						container.css("display", "inline")
					} else {
						container.css("display", "block")
					}
				}
				return me
			},
			hide: function(me) {
				var me = me || this,
					container = me[name]("getContainer");
				container.hide();
				return me
			}
		};
		constructor = constructor || function(options) {
			var me = this,
				defaults = constructor.defaults || {}, options = options || {};
			defaults = $.extend(fn.defaults, defaults);
			defaults.xtype = name;
			defaults.isWidget = true;
			if (options.title) {
				options._title = options.title;
				delete options.title
			}
			if (options.minLength) {
				options._minLength = options.minLength;
				delete options.minLength
			}
			if (options.maxLength) {
				options._maxLength = options.maxLength;
				delete options.maxLength
			}
			if ($.type(options) === "string") {
				return constructor[options].call(me, me, arguments)
			}
			if (!constructor.create) {} else {
				return constructor.create.call(me, defaults, options)
			}
		};
		$.fn[name] = $.extend(constructor, fn, options);
		return constructor
	};
	$("html").delegate("input", "focus", function(e) {
		e.stopPropagation();
		e.preventDefault()
	}).on("click", function(e) {
		e.stopPropagation();
		$("div.region-select-wrap, div.region-search-wrap").hide();
		$("div.combobox-list-wrap").hide().attr("toggleflag", "hidden");
		$("div.combobox-container").removeClass("selected focus");
		$("div.widget-error-tips.show").css("display", "none");
		$("div.timepicker-msg-container").removeAttr("dragFlag")
	}).on("mouseup", function(e) {
		e.stopPropagation();
		$("div.button-container").removeClass("clicked");
		$("div.btn-help-container a.btn-help").removeClass("clicked")
	}).on("keyup mousedown", function(e) {
		$("div.widget-error-tips.show").css("display", "none")
	});
	$(window).on("resize", function(e) {
		var msg = $("div.msg-container");
		msg.each(function(i, obj) {
			var m = $(obj);
			if (obj.shown || m.attr("shown")) {
				m.msg("setPosition", "center", "center")
			}
		})
	});
	$.su.Widget("panel", {
		defaults: {
			_title: "",
			icon: "",
			iconCls: "",
			panelType: "form",
			collapsible: false,
			collapsed: false,
			help: false,
			helpHandler: null
		},
		create: function(defaults, options) {
			var me = this;
			me.each(function(i, obj) {
				var tar = $(this);
				$.extend(this, defaults, options);
				var display = this.collapsed === false ? "block" : "none";
				var inHTML = '<div class="panel-wrap">';
				var collapsed = this.collapsed ? "collapsed" : "";
				if (!(this._title == "")) {
					inHTML += '<div class="panel-header">';
					inHTML += '<h3 class="panel-title">';
					inHTML += '<span class="panel-title-icon"></span>';
					inHTML += '<span class="panel-title-text">' + this._title + "</span>";
					inHTML += '<div class="panel-header-btn-container">';
					if (this.collapsible) {
						inHTML += '<button class="panel-header-btn-collapse ' + collapsed + '" type="button"></button>'
					}
					inHTML += "</div>";
					inHTML += "</h3>";
					inHTML += "</div>"
				}
				inHTML += '<div class="panel-content" style="display: ' + display + '">';
				inHTML += '<div class="panel-tbar-container"></div>';
				inHTML += '<div class="panel-content-container"></div>';
				inHTML += '<div class="panel-fbar-container"></div>';
				inHTML += "</div>";
				inHTML += "</div>";
				var content = $(inHTML);
				content.find("div.panel-content-container").append(tar.children().detach());
				tar.append(content).addClass("container widget-container panel-container " + this.cls);
				if (this.help) {
					var help = this.help.remove();
					$("h3.panel-title").prepend(help)
				}
				this.isPanel = true
			});
			me.delegate("button.panel-header-btn-collapse", "click", function(e) {
				var btn = $(this),
					container = btn.closest("div.panel-container"),
					content = container.find("div.panel-content");
				if (container.get(0).collapsed) {
					content.slideDown(200, function() {
						$(this).css("display", "block");
						btn.removeClass("collapsed")
					});
					container.get(0).collapsed = false
				} else {
					content.slideUp(200, function() {
						$(this).css("display", "none");
						btn.addClass("collapsed")
					});
					container.get(0).collapsed = true
				}
			});
			if ($.type(options.helpHandler) === "function") {
				container.delegate("button.panel-header-btn-help", "click", {
					panel: $(this)
				}, options.helpHandler)
			}
			return me
		},
		setTitle: function(me, title) {
			var me = me || this,
				container = me.closest("div.panel-container"),
				title = title[1];
			if (!title) {
				return me
			}
			container.find("h3.panel-title span.panel-title-text").html(title);
			return me
		},
		getContainer: function(me) {
			var me = me || this;
			return me
		}
	});
	$.su.Widget("page", {
		defaults: {
			_title: "",
			help: "...",
			showTitle: false
		},
		create: function(defaults, options) {
			var me = this;
			me.each(function(i, obj) {
				var tar = $(obj);
				$.extend(obj, defaults, options);
				tar.find("h2.func-title").remove();
				var inHTML = "";
				if (obj.showTitle) {
					inHTML += '<h2 class="func-title">';
					inHTML += "<span>" + obj._title + "</span>";
					inHTML += "</h2>"
				}
				tar.prepend($(inHTML)).addClass("container widget-container page-container")
			});
			me.delegate("div.btn-help-container a.btn-help", "mousedown", function(e) {
				var btn = $(this);
				btn.addClass("clicked")
			}).delegate("div.btn-help-container a.btn-help", "click", function(e) {
				e.preventDefault();
				var contaienrWidth = $.su.help.width;
				var btn = $(this),
					btnContainer = btn.closest("div.btn-help-container");
				if (btn.hasClass("closed")) {
					$("div.help-content-container").css("display", "block");
					btn.closest("div.help-container").animate({
						"width": "+=" + contaienrWidth + "px"
					}, 200);
					var right = btnContainer.css("right");
					right = right.slice(0, right.length - 2);
					btnContainer.animate({
						"right": Math.abs(right) + contaienrWidth - btn.width()
					}, 200, function(e) {
						btn.removeClass("closed")
					});
					if ($.su.CHAR.HELP) {
						$.su.help.load(btn.attr("name"))
					} else {
						$.getScript("./locale/en_US/help.js", function(e) {
							$.su.help.load(btn.attr("name"))
						})
					}
				} else {
					$("div.help-content-container").empty();
					btn.closest("div.help-container").animate({
						"width": "-=0"
					}, 200);
					var right = btnContainer.css("right");
					right = right.slice(0, right.length - 2);
					btnContainer.animate({
						"right": Math.abs(right) - contaienrWidth + btn.width()
					}, 200, function() {
						btn.addClass("closed")
					})
				}
			})
		}
	});
	$.su.Widget("wizard", {
		defaults: {
			autoStart: true,
			items: [{
				name: "",
				label: "",
				content: "",
				prevButton: true,
				prevHandler: null,
				nextButton: true,
				nextHandler: null
			}],
			currentIndex: 0,
			finishHandler: null
		},
		create: function(defaults, options) {
			var me = this;
			me.each(function(i, obj) {
				var container = $(obj);
				$.extend(obj, defaults, options);
				var inHTMLStep = '<div class="process-flow">';
				inHTMLStep += '<div class="process-flow-wrap">';
				var inHTML = '<div class="form-container">';
				var items = obj.items,
					len = items.length,
					pos = "up";
				for (var index = 0; index < len; index++) {
					var item = items[index],
						last = (index == (len - 1)) ? "lst" : "",
						pos = (pos === "up") ? "down" : "up",
						labelCls = item.labelCls || "";
					inHTMLStep += '<div name="' + item.name + '" class="process-flow-step step' + index + " " + last + '">';
					inHTMLStep += '<span class="icon"></span>';
					if (item.label) {
						inHTMLStep += '<span class="text ' + pos + " " + labelCls + '">' + item.label + "</span>"
					}
					inHTMLStep += "</div>";
					if (last != "lst") {
						inHTMLStep += '<span class="bar">';
						inHTMLStep += '<span class="bar-inner">';
						inHTMLStep += "</span>";
						inHTMLStep += "</span>"
					}
					inHTML += '<div class="form-step" data-step="' + index + '" name="' + item.name + '">';
					inHTML += '<div class="form-content" data-step="' + index + '" name="' + item.name + '"></div>';
					inHTML += '<div class="form-buttons-container">';
					if (item.prevButton !== false) {
						inHTML += '<button type="button" class="button-prev wizard-buttons" data-name="' + item.name + '" data-step="' + index + '"></button>'
					}
					if (item.nextButton !== false) {
						inHTML += '<button type="button" class="button-next wizard-buttons" data-name="' + item.name + '" data-step="' + index + '"></button>'
					}
					inHTML += "</div>";
					inHTML += "</div>"
				}
				inHTMLStep += "</div>";
				inHTMLStep += "</div>";
				inHTML += "</div>";
				container.append($(inHTMLStep)).append($(inHTML)).addClass("container widget-container wizard-container");
				for (var index = 0; index < len; index++) {
					var item = items[index];
					var form = $(item.content).attr("name", item.name),
						stepContainer = container.find("div.form-step[name=" + item.name + "]").css("display", "none");
					stepContainer.find("div.form-content").append(form);
					if (item.prevButton !== false) {
						stepContainer.find("button.button-prev").button({
							text: item.prevButtonText || $.su.CHAR.OPERATION.BACK,
							cls: "wizard-btn btn-prev",
							handler: function(e) {
								me.wizard("goPrev")
							}
						})
					}
					if (item.nextButton !== false) {
						stepContainer.find("button.button-next").button({
							text: item.nextButtonText || $.su.CHAR.OPERATION.NEXT,
							cls: "wizard-btn btn-next",
							handler: function(e) {
								me.wizard("goNext")
							}
						})
					}
				}
			});
			me.wizard("geToIndex", 0);
			return me
		},
		setCurrent: function(me, params) {
			var me = me || this,
				stepName = params[1];
			var stepIcon = me.find("div.process-flow-step[name='" + stepName + "']");
			stepIcon.addClass("current");
			var stepBar = stepIcon.prev("span.bar").addClass("processed");
			stepBar.find("span.bar-inner").css("width", "0").animate({
				"width": "+=100%"
			}, 200);
			me.find("div.form-container div.form-step").css("display", "none");
			me.find("div.form-container div.form-step[name='" + stepName + "']").fadeIn(200)
		},
		setProcessed: function(me, params) {
			var me = me || this,
				stepName = params[1];
			var stepIcon = me.find("div.process-flow-step[name='" + stepName + "']");
			stepIcon.addClass("processed");
			var stepBar = stepIcon.prev("span.bar").addClass("processed");
			stepBar.find("span.bar-inner").css("width", "0").animate({
				"width": "+=100%"
			}, 200)
		},
		setNormal: function(me, params) {
			var me = me || this,
				stepName = params[1];
			var stepIcon = me.find("div.process-flow-step[name='" + stepName + "']");
			stepIcon.removeClass("current, processed");
			var stepBar = stepIcon.prev("span.bar").removeClass("current, processed");
			stepBar.find("span.bar-inner").css("width", "100%").animate({
				"width": "-=0"
			}, 200)
		},
		setNormalAll: function(me, params) {
			me.find("div.process-flow-step, span.bar").removeClass("current processed")
		},
		goNext: function() {
			var me = me || this,
				obj = me.get(0),
				items = obj.items,
				len = items.length,
				currentIndex = obj.currentIndex,
				nextIndex = currentIndex + 1;
			var item = items[currentIndex],
				res;
			if (item.nextHandler) {
				res = item.nextHandler.call(me)
			}
			if (res === false) {
				return
			}
			if (currentIndex >= len) {
				return false
			} else {
				if (currentIndex === len - 1) {
					nextIndex = currentIndex
				}
			}
			var currentName = item["name"],
				nextName = items[nextIndex]["name"];
			var stepIcon = me.find("div.process-flow-step[name='" + currentName + "']").removeClass("current").addClass("processed"),
				stepBarNext = stepIcon.next("span.bar"),
				stepBarNextInner = stepBarNext.find("span.bar-inner");
			var nextIcon = me.find("div.process-flow-step[name='" + nextName + "']");
			stepBarNextInner.width(0);
			stepBarNext.addClass("processed");
			stepBarNextInner.animate({
				width: "+=100%"
			}, 200, function() {
				stepBarNextInner.css("width", "100%");
				nextIcon.addClass("current");
				me.find("div.form-container div.form-step").css("display", "none");
				me.find("div.form-container div.form-step[name='" + nextName + "']").fadeIn(150, function() {
					if ($.su.layout.doLayout) {
						$.su.layout.doLayout()
					}
				})
			});
			obj.currentIndex = nextIndex;
			return me
		},
		goPrev: function() {
			var me = me || this,
				obj = me.get(0),
				items = obj.items,
				len = items.length,
				currentIndex = obj.currentIndex,
				prevIndex = currentIndex - 1;
			var item = items[currentIndex],
				res;
			if (item.prevHandler) {
				res = item.prevHandler.call(me)
			}
			if (res === false) {
				return me
			}
			if (currentIndex < 0) {
				return false
			} else {
				if (currentIndex === 0) {
					prevIndex = 0
				}
			}
			var currentName = item["name"],
				prevName = items[prevIndex]["name"];
			var stepIcon = me.find("div.process-flow-step[name='" + currentName + "']").removeClass("current processed"),
				stepBarPrev = stepIcon.prev("span.bar"),
				stepBarPrevInner = stepBarPrev.find("span.bar-inner");
			var prevIcon = me.find("div.process-flow-step[name='" + prevName + "']");
			stepBarPrevInner.css("width", "100%");
			stepBarPrev.addClass("processed");
			stepBarPrevInner.animate({
				width: "-=0px"
			}, 200, function() {
				stepBarPrev.removeClass("processed");
				stepBarPrevInner.css("width", "0");
				prevIcon.removeClass("processed").addClass("current");
				stepIcon.removeClass("current processed");
				me.find("div.form-container div.form-step").css("display", "none");
				me.find("div.form-container div.form-step[name='" + prevName + "']").fadeIn(150, function() {
					if ($.su.layout.doLayout) {
						$.su.layout.doLayout()
					}
				})
			});
			obj.currentIndex = prevIndex;
			return me
		},
		goTo: function(me, params) {
			var me = me || this,
				stepName = params[1];
			var obj = me.get(0),
				items = obj.items,
				currentIndex = obj.currentIndex;
			me.wizard("setNormalAll");
			var flag = false;
			for (var index = 0; index < items.length; index++) {
				var item = items[index],
					name = item.name;
				if (flag == false) {
					if (name == stepName) {
						me.wizard("setCurrent", name);
						currentIndex = index;
						flag = true;
						continue
					} else {
						me.wizard("setProcessed", name);
						continue
					}
				} else {
					me.wizard("setNormal", name);
					continue
				}
			}
			if (flag) {
				if (currentIndex >= 0 && currentIndex <= items.length - 1) {
					me.find("div.form-step[data-step=" + currentIndex + "]")
				}
				obj.currentIndex = currentIndex;
				if ($.su.layout.doLayout) {
					$.su.layout.doLayout()
				}
				return true
			} else {
				return false
			}
			return me
		},
		geToIndex: function(me, params) {
			var me = me || this,
				stepIndex = params[1];
			var obj = me.get(0),
				items = obj.items,
				stepName = items[stepIndex].name;
			if (!stepName) {
				return false
			} else {
				return me.wizard("goTo", stepName)
			}
			return me
		},
		getContainer: function(me) {
			var me = me || this;
			return me
		},
		showButtons: function(me) {
			var me = me || this,
				buttons = me.find("button.wizard-buttons");
			buttons.each(function(i, obj) {
				$(obj).button("show")
			});
			return me
		},
		hideButtons: function(me) {
			var me = me || this,
				buttons = me.find("button.wizard-buttons");
			buttons.each(function(i, obj) {
				$(obj).button("hide")
			});
			return me
		}
	});
	$.su.Widget("msg", {
		defaults: {
			type: "prompt",
			cls: "xl",
			_title: "",
			autoshow: false,
			mask: true,
			msg: "",
			callback: null,
			okHandler: null,
			noHandler: null,
			cancelHandler: null,
			closeBtn: true,
			global: false,
			showHead: false,
			okText: $.su.CHAR.OPERATION.OK,
			yesText: $.su.CHAR.OPERATION.YES,
			noText: $.su.CHAR.OPERATION.NO,
			cancelText: $.su.CHAR.OPERATION.CANCEL,
			cancel_upgrade: $.su.CHAR.OPERATION.CANCEL_UPGRADE,
			upgrade: $.su.CHAR.OPERATION.UPGRADE
		},
		create: function(defaults, options) {
			var me = this;
			me.each(function(i, obj) {
				if (this.isMsg) {
					return
				}
				var container = $(this);
				$.extend(this, defaults, options);
				if (this.global) {
					if (!this.id) {
						return null
					}
				}
				this.id = this.id || $.su.randomId("msg");
				var inHTML = "";
				inHTML += '<div class="msg-wrap">';
				if (this.showHead) {
					inHTML += '<div class="msg-head">';
					var title = this._title || "";
					inHTML += '<span class="widget-title msg-title">';
					inHTML += title;
					inHTML += "</span>";
					if (this.closeBtn) {
						inHTML += '<a class="widget-close msg-close" href="javascript:void(0);"></a>'
					}
					inHTML += "</div>"
				}
				inHTML += '<div class="msg-content-wrap">';
				var content = this.msg || this.innerHTML;
				container.empty();
				inHTML += '<div class="widget-content msg-content-container">' + content + "</div>";
				inHTML += "</div>";
				var type = this.type;
				switch (type) {
					case "alert":
						inHTML += '<div class="msg-btn-container">';
						inHTML += '<div class="msg-btn-wrap">';
						inHTML += '<div class="button-container inline-block">';
						inHTML += '<button type="button" class="button-button btn-msg btn-msg-ok btn-alert">';
						inHTML += '<span class="text button-text">' + this.okText + "</span>";
						inHTML += "</button>";
						inHTML += "</div>";
						inHTML += "</div>";
						inHTML += "</div>";
						break;
					case "confirm":
						inHTML += '<div class="msg-btn-container">';
						inHTML += '<div class="msg-btn-wrap">';
						inHTML += '<div class="button-container inline-block">';
						inHTML += '<button type="button" class="button-button btn-msg btn-msg-ok btn-confirm">';
						inHTML += '<span class="text button-text">' + this.yesText + "</span>";
						inHTML += "</button>";
						inHTML += "</div>";
						inHTML += '<div class="button-container inline-block">';
						inHTML += '<button type="button" class="button-button btn-msg btn-msg-no btn-confirm">';
						inHTML += '<span class="text button-text">' + this.noText + "</span>";
						inHTML += "</button>";
						inHTML += "</div>";
						inHTML += "</div>";
						inHTML += "</div>";
						break;
					case "prompt":
						inHTML += '<div class="button-container msg-btn-container">';
						inHTML += '<div class="msg-btn-wrap">';
						inHTML += '<div class="button-container inline-block">';
						inHTML += '<button type="button" class="button-button btn-msg btn-msg-ok btn-prompt">';
						inHTML += '<span class="text button-text">' + this.okText + "</span>";
						inHTML += "</button>";
						inHTML += "</div>";
						inHTML += '<div class="button-container inline-block">';
						inHTML += '<button type="button" class="button-button btn-msg btn-msg-cancel btn-prompt">';
						inHTML += '<span class="text button-text">' + this.cancelText + "</span>";
						inHTML += "</button>";
						inHTML += "</div>";
						inHTML += "</div>";
						inHTML += "</div>";
						break;
					case "show":
						inHTML += '<div class="button-container msg-btn-container">';
						inHTML += '<div class="msg-btn-wrap">';
						inHTML += '<div class="button-container inline-block">';
						inHTML += '<button type="button" class="button-button btn-msg btn-msg-cancel btn-show">';
						inHTML += '<span class="text button-text">' + this.cancelText + "</span>";
						inHTML += "</button>";
						inHTML += "</div>";
						inHTML += '<div class="button-container inline-block">';
						inHTML += '<button type="button" class="button-button btn-msg btn-msg-no btn-show">';
						inHTML += '<span class="text button-text">' + this.noText + "</span>";
						inHTML += "</button>";
						inHTML += "</div>";
						inHTML += '<div class="button-container inline-block">';
						inHTML += '<button type="button" class="button-button btn-msg btn-msg-ok btn-show">';
						inHTML += '<span class="text button-text">' + this.yesText + "</span>";
						inHTML += "</button>";
						inHTML += "</div>";
						inHTML += "</div>";
						inHTML += "</div>";
						break;
					case "upgrade":
						inHTML += '<div class="msg-btn-container" style="margin-bottom: 25px">';
						inHTML += '<div class="msg-btn-wrap">';
						inHTML += '<div class="button-container inline-block" style="margin:0px 25px">';
						inHTML += '<button type="button" class="button-button btn-msg btn-msg-ok btn-confirm">';
						inHTML += '<span class="text button-text">' + this.upgrade + "</span>";
						inHTML += "</button>";
						inHTML += "</div>";
						inHTML += '<div class="button-container inline-block" style="margin:0px 25px">';
						inHTML += '<button type="button" class="button-button btn-msg btn-msg-no btn-confirm">';
						inHTML += '<span class="text button-text">' + this.cancel_upgrade + "</span>";
						inHTML += "</button>";
						inHTML += "</div>";
						inHTML += "</div>";
						inHTML += "</div>";
						inHTML += '<div id="ignore" style="position:absolute;bottom:0px;right:10px">';
        				inHTML += '<input id="ignore_box"/>';
    					inHTML += '</div>';

						break;
					default:
						var buttonsCfg = this.buttons;
						if (buttonsCfg) {}
						break
				}
				inHTML += "</div>";
				inHTML = '<div class="position-center-right">' + inHTML + "</div>";
				inHTML = '<div class="position-center-left">' + inHTML + "</div>";
				inHTML = '<div class="position-top-right"></div>' + inHTML;
				inHTML = '<div class="position-top-center"></div>' + inHTML;
				inHTML = '<div class="position-top-left"></div>' + inHTML;
				inHTML += '<div class="position-bottom-left"></div>';
				inHTML += '<div class="position-bottom-center"></div>';
				inHTML += '<div class="position-bottom-right"></div>';
				var msgBoxsContainer = $("div#msg-boxs-container");
				if (msgBoxsContainer.length == 0) {
					msgBoxsContainer = $('<div id="msg-boxs-container" class="msg-boxs-container"></div>');
					$("body").append(msgBoxsContainer)
				}
				msgBoxsContainer.find("#" + obj.id).remove();
				msgBoxsContainer.append(container.detach());
				container.append($(inHTML)).addClass("container widget-container msg-container " + this.cls).css({
					"z-index": "999",
					"display": "none",
					"position": "absolute"
				});
				this.isMsg = true;
				$.su.msgManager.add(this)
			});
			me.delegate("a.msg-close", "click", function(e) {
				e.preventDefault();
				var container = $(this).closest("div.msg-container");
				container.msg("close", container.get(0).cancelHandler)
			}).delegate("button.btn-msg-ok", "click", function(e) {
				e.preventDefault();
				var container = $(this).closest("div.msg-container");
				if (container.get(0).okHandler) {
					if (container.get(0).okHandler.call(me) !== false) {
						container.msg("close")
					}
				} else {
					container.msg("close")
				}
			}).delegate("button.btn-msg-no", "click", function(e) {
				e.preventDefault();
				var container = $(this).closest("div.msg-container");
				if (container.get(0).noHandler) {
					if (container.get(0).noHandler.call(me) !== false) {
						container.msg("close")
					}
				} else {
					container.msg("close")
				}
			}).delegate("button.btn-msg-cancel", "click", function(e) {
				e.preventDefault();
				var container = $(this).closest("div.msg-container");
				container.msg("close", container.get(0).cancelHandler)
			});
			if (me.get(0).autoshow) {
				me.msg("show")
			}
			return me
		},
		show: function(me, arguments) {
			var me = me || this;
			var setCenter = arguments[1] || false;
			me.msg("setPosition", "center", "center");
			var container = $(this).closest("div.msg-container");
			var wh = $(window).height();
			var ww = $(window).width();
			container.css({
				"max-height": wh,
				"overflow-y": "auto",
				"overflow-x": "hidden"
			});
			$(window).resize(function() {
				var wh = $(window).height();
				var ww = $(window).width();
				container.css({
					"max-height": wh,
					"overflow-y": "auto",
					"overflow-x": "hidden"
				})
			});
			me.each(function() {
				if (this.isMsg === true) {
					if (this.mask && !this.shown) {
						$.su.mask.show()
					}
					this.shown = true;
					$(this).fadeIn(200, function() {
						me.css("display", "block")
					})
				} else {
					return false
				}
			});
			me.trigger("ev_show", me);
			return me
		},
		close: function(me, arguments) {
			var me = me || this,
				obj = me.get(0);
			var callback = $.type(arguments[1]) === "function" ? arguments[1] : null,
				destroy = $.type(arguments[1]) === "boolean" ? arguments[1] : $.type(arguments[2]) === "boolean" ? arguments[2] : false;
			if (!obj.shown) {
				return me
			}
			if (obj.mask) {
				$.su.mask.hide()
			}
			if (destroy) {
				me.fadeOut(200, function() {
					this.shown = false;
					me.remove()
				})
			} else {
				me.fadeOut(200, function() {
					this.shown = false;
					me.css("display", "none")
				})
			}
			me.trigger("ev_close", me);
			if (callback) {
				return callback.call(me, me)
			} else {
				return me
			}
		},
		setTitle: function(me, arguments) {
			var me = me || this,
				obj = me.get(0),
				title = arguments[1];
			if (title) {
				obj._title = title;
				me.find("span.msg-title-container").html(title)
			}
			return me
		},
		setContent: function(me, arguments) {
			var me = me || this,
				text = arguments[1];
			if (text) {
				me.find("span.msg-content-container").html(text)
			}
			return me
		},
		showButtons: function(me) {
			var me = me || this,
				buttonsContainer = me.find("div.msg-btn-container");
			buttonsContainer.fadeIn(150);
			return me
		},
		hideButtons: function(me) {
			var me = me || this,
				buttonsContainer = me.find("div.msg-btn-container");
			buttonsContainer.css("display", "none");
			return me
		},
		hideClose: function(me) {
			var me = me || this,
				closeContainer = me.find("a.widget-close.msg-close");
			closeContainer.css("display", "none");
			return me
		},
		showClose: function(me) {
			var me = me || this,
				closeContainer = me.find("a.widget-close.msg-close");
			closeContainer.fadeIn(150);
			return me
		}
	});
	$.su.Widget("foldertree", {
		defaults: {
			store: null,
			routerName: "My Router",
			selectLeaves: false,
			extension: "*"
		},
		create: function(defaults, options) {
			var me = this;
			me.each(function(i, obj) {
				var tar = $(obj);
				$.extend(obj, defaults, options);
				var inHTML = '<div class="container widget-container foldertree-container">';
				inHTML += '<div class="router">';
				inHTML += '<span class="icon"></span>';
				inHTML += '<span class="text">' + obj.routerName + "</span>";
				inHTML += "</div>";
				inHTML += "</div>";
				var container = $(inHTML);
				tar.replaceWith(container);
				container.append(tar.addClass("hidden"))
			});
			var container = me.closest("div.foldertree-container");
			container.delegate("a.foldertree-text", "click", function(e) {
				e.preventDefault();
				e.stopPropagation();
				var tar = $(this);
				if (me.get(0).selectLeaves) {
					if (tar.attr("data-type") != "leaf") {
						return
					}
					container.find("li.foldertree-branch, a.foldertree-text").removeClass("selected");
					tar.closest("li.foldertree-branch").addClass("selected");
					tar.addClass("selected");
					var path = tar.attr("data-path");
					me.foldertree("setValue", path);
					return
				}
				container.find("li.foldertree-branch, a.foldertree-text").removeClass("selected");
				tar.closest("li.foldertree-branch").addClass("selected");
				tar.addClass("selected");
				var path = tar.attr("data-path");
				me.foldertree("setValue", path)
			}).delegate("span.foldertree-icon", "click", function(e) {
				e.preventDefault();
				e.stopPropagation();
				var btn = $(this),
					path = btn.attr("data-path"),
					store = me.get(0).store,
					subBranch = btn.next("a.foldertree-text").next("ul.foldertree-wrap"),
					subLeaf = subBranch.next("ul.foldertree-wrap"),
					uuid = me.get(0).uuid;
				if (btn.hasClass("foldertree-root")) {
					return
				}
				if (btn.hasClass("foldertree-has-branch")) {
					if (btn.hasClass("opened")) {
						subBranch.slideUp(200, function() {
							btn.removeClass("opened")
						});
						if (subLeaf) {
							subLeaf.slideUp(200, function() {
								btn.removeClass("opened")
							})
						}
					} else {
						store.loadNode(path, {
							"path": path,
							"uuid": uuid
						}, function() {
							btn.addClass("opened");
							subBranch.slideDown(200);
							if (subLeaf) {
								subLeaf.slideDown(200)
							}
						})
					}
				}
			});
			var store = $(me.get(0).store);
			store.on("ev_loaddata", function(e, data) {
				me.foldertree("load", data)
			}).on("ev_loadnode", function(e, store, nodeId, data) {
				var Nodes = container.find("ul.foldertree-wrap"),
					parentNode = null;
				Nodes.each(function(i, obj) {
					if ($(obj).attr("data-path") == nodeId) {
						parentNode = $(obj);
						return false
					}
				});
				if ($.isArray(data.branches)) {
					me.foldertree("initBranch", data.branches, parentNode)
				}
				if (me.get(0).selectLeaves) {
					var leafUl;
					if (parentNode.siblings(".foldertree-leaf-wrap").length) {
						leafUl = parentNode.siblings(".foldertree-leaf-wrap")
					} else {
						leafUl = $('<ul class="foldertree-wrap foldertree-leaf-wrap" data-path="' + nodeId + '" ></ul>');
						parentNode.after(leafUl)
					}
					me.foldertree("initLeaf", data.leaves, leafUl)
				}
			});
			return me
		},
		load: function(me, params) {
			var me = me || this,
				container = me.closest("div.foldertree-container"),
				obj = me.get(0),
				data = params[1][0];
			me.foldertree("initRoot", data, container);
			me.trigger("ev_treeloaded", [me, data]);
			return me
		},
		initRoot: function(me, params) {
			var me = me || this,
				obj = me.get(0),
				container = me.closest("div.foldertree-container"),
				data = params[1] || {}, parentNode = params[2],
				uuid = data.uuid || "0000000000";
			obj.uuid = uuid;
			if (!data) {
				return me
			}
			container.find("div.foldertree-root").remove();
			var hasBranch = data.hasBranch ? "foldertree-has-branch" : "";
			var inHTML = '<div class="foldertree-root">';
			inHTML += '<span class="foldertree-icon foldertree-root ' + hasBranch + ' opened" data-path="' + data.path + '"></span>';
			inHTML += '<a href="javascript:void(0);" class="foldertree-text foldertree-root" data-path="' + data.path + '">';
			inHTML += '<span class="icon"></span>';
			inHTML += '<span class="text">' + data.name + "</span>";
			inHTML += "</a>";
			inHTML += '<ul class="foldertree-wrap foldertree-root-wrap" data-path="' + data.path + '"></ul>';
			inHTML += '<ul class="foldertree-wrap foldertree-leaf-wrap" data-path="' + data.path + '"></ul>';
			inHTML += "</div>";
			var currentNode = $(inHTML);
			parentNode.append(currentNode);
			if (data.hasBranch) {
				var childNode = currentNode.find("ul.foldertree-root-wrap");
				me.foldertree("initBranch", data.branches, childNode)
			}
			if (data.leavesInfo && me.get(0).selectLeaves) {
				var childNode = currentNode.find("ul.foldertree-leaf-wrap");
				me.foldertree("initLeaf", data.leaves, childNode)
			}
			return me
		},
		initBranch: function(me, params) {
			var me = me || this,
				datas = params[1],
				parentBranch = params[2].empty(),
				span = parentBranch.prev("a.foldertree-text").prev("span.foldertree-icon");
			if (!$.isArray(datas)) {
				datas = [datas]
			}
			var inHTML = "";
			if (datas.length == 0) {
				span.removeClass("foldertree-has-branch")
			} else {
				for (var index = 0, len = datas.length; index < len; index++) {
					var data = datas[index];
					var hasBranch = (data.hasBranch) ? "foldertree-has-branch" : "foldertree-has-branch opened";
					var lst = (index == len - 1) ? "lst" : "";
					inHTML += '<li class="foldertree-branch ' + lst + '">';
					inHTML += '<span class="foldertree-icon foldertree-branch ' + hasBranch + '" data-path="' + data.path + '"></span>';
					inHTML += '<a href="javascript:void(0);" class="foldertree-text foldertree-branch" data-path="' + data.path + '">';
					inHTML += '<span class="icon"></span>';
					inHTML += '<span class="text">' + data.name + "</span>";
					inHTML += "</a>";
					inHTML += '<ul class="foldertree-wrap foldertree-branch-wrap" data-path="' + data.path + '"></ul>';
					inHTML += "</li>"
				}
				var currentBranch = $(inHTML);
				parentBranch.append(currentBranch);
				span.addClass("foldertree-has-branch")
			}
			return me
		},
		initLeaf: function(me, params) {
			var me = me || this,
				extension = me.get(0).extension,
				datas = params[1],
				parentBranch = params[2].empty(),
				span = parentBranch.prev("a.foldertree-text").prev("span.foldertree-icon");
			if (!$.isArray(datas)) {
				datas = [datas]
			}
			var inHTML = "";
			for (var index = 0, len = datas.length; index < len; index++) {
				var data = datas[index];
				if (extension != "*") {
					if (extension == data.character) {} else {
						continue
					}
				}
				var lst = (index == len - 1) ? "lst" : "";
				inHTML += '<li class="foldertree-branch ' + lst + '">';
				inHTML += '<span class="foldertree-icon foldertree-branch " data-path="' + data.path + '"></span>';
				inHTML += '<a href="javascript:void(0);" class="foldertree-text foldertree-leaf" data-type="leaf" data-path="' + data.path + '">';
				inHTML += '<span class="icon"></span>';
				inHTML += '<span class="text">' + data.name + "</span>";
				inHTML += "</a>";
				inHTML += '<ul class="foldertree-wrap foldertree-branch-wrap" data-path="' + data.path + '"></ul>';
				inHTML += "</li>"
			}
			var currentBranch = $(inHTML);
			parentBranch.append(currentBranch);
			return me
		},
		setValue: function(me, path) {
			var me = me || this;
			path = path[1];
			me.val(path);
			return me
		},
		getValue: function(me) {
			var me = me || this;
			return me.val()
		},
		reset: function(me) {
			var me = me || this;
			return me.val("")
		}
	});
	$.su.Widget("keyword", {
		defaults: {
			fieldLabel: null,
			addBtnText: $.su.CHAR.OPERATION.ADD_A_NEW_KEYWORD,
			removeBtnText: $.su.CHAR.OPERATION.REMOVE,
			keywordType: "textbox",
			keywordProperty: {
				fieldLabel: null,
				cls: "inline-block"
			},
			columns: 3,
			maxHeight: 160,
			maxKeys: 99999,
			maxKeysText: $.su.CHAR.OPERATION.KEYWORD_MAX_OVERFLOW,
			keyNumbers: 0,
			keyTag: 0
		},
		create: function(defaults, options) {
			var me = this;
			me.each(function(i, obj) {
				var tar = $(obj);
				$.extend(obj, defaults, options);
				var inHTML = '<div class="container widget-container keyword-container ' + this.cls + '">';
				if (this.fieldLabel !== null) {
					inHTML += '<div class="widget-fieldlabel-wrap ' + this.labelCls + '">';
					inHTML += '<label class="widget-fieldlabel keyword-fieldlabel">' + this.fieldLabel + "</label>";
					if (this.fieldLabel !== "") {
						inHTML += '<span class="widget-separator">' + this.separator + "</span>"
					}
					inHTML += "</div>"
				}
				inHTML += '<div class="widget-wrap keyword-container-wrap">';
				inHTML += '<div class="keyword-btn-container">';
				inHTML += '<a class="keyword-btn keyword-add-btn" href="javascript:void(0);">';
				inHTML += '<span class="keyword-add-btn-wrap">';
				inHTML += '<span class="keyword-icon add-icon icon"></span>';
				inHTML += '<span class="keyword-text add-text text">' + obj.addBtnText + "</span>";
				inHTML += "</span>";
				inHTML += "</a>";
				inHTML += '<span class="keyword-overflow-warning hidden">' + this.maxKeysText + "</span>";
				inHTML += "</div>";
				inHTML += '<div class="keyword-container-div">';
				inHTML += "<table>";
				inHTML += '<tbody class="keyword-container-body">';
				inHTML += "</tbody>";
				inHTML += "</table>";
				inHTML += "</div>";
				inHTML += "</div>";
				inHTML += "</div>";
				var container = $(inHTML);
				tar.replaceWith(container);
				container.append(tar.addClass("hidden"))
			});
			var container = me.closest("div.keyword-container");
			container.delegate("a.keyword-remove-btn", "click", function(e) {
				e.stopPropagation();
				e.preventDefault();
				me.keyword("removeKey", $(this).attr("data-index"))
			}).delegate("a.keyword-add-btn", "click", function(e) {
				e.stopPropagation();
				e.preventDefault();
				if ($(this).hasClass("disabled")) {
					return
				}
				me.keyword("addKey", "")
			});
			return me
		},
		addKey: function(me, value) {
			var me = me || this;
			if (me.keyword("hasEmpty")) {
				return me
			}
			var obj = me.get(0),
				value = value[1] || "",
				keywordType = obj.keywordType,
				keywordProperty = obj.keywordProperty,
				columns = obj.columns || 1,
				container = me.closest("div.keyword-container"),
				keywordContainer = container.find("div.keyword-container-div tbody.keyword-container-body");
			if (obj.maxKeys <= obj.keyNumbers) {
				container.find("span.keyword-overflow-warning").css("display", "inline-block");
				return me
			}
			container.removeClass("empty");
			var trLast = keywordContainer.find("tr:last"),
				tdContainerList = trLast.find("td.keyword-td");
			if (tdContainerList.length >= columns || trLast.length == 0) {
				keywordContainer.append($("<tr></tr>"))
			}
			trLast = keywordContainer.find("tr:last");
			var tdContainer = $('<td class="keyword-td" style="display: none; width: ' + obj.tdWidth + 'px;"></td>');
			trLast.append(tdContainer);
			obj.keyTag++;
			obj.keyNumbers++;
			var input = $('<input class="keyword-content" data-index="' + obj.keyTag + '" />');
			tdContainer.append(input);
			input[keywordType](keywordProperty)[keywordType]("setValue", value);
			var inHTML = '<a class="keyword-btn keyword-remove-btn" href="javascript:void(0);" data-index="' + obj.keyTag + '">';
			inHTML += '<span class="keyword-icon remove-icon icon"></span>';
			inHTML += '<span class="keyword-text remove-text text">' + obj.removeBtnText + "</span>";
			inHTML += "</a>";
			tdContainer.append($(inHTML)).fadeIn(250);
			if (obj.maxKeys <= obj.keyNumbers) {
				container.find("div.keyword-btn-container").addClass("disabled")
			}
			return me
		},
		getKeyByIndex: function(me, index) {
			var me = me || this;
			var index = index[1];
			var container = me.closest("div.keyword-container");
			var input = container.find("input.keyword-content").get(index);
			return input
		},
		removeKey: function(me, index) {
			var me = me || this,
				obj = me.get(0),
				container = me.closest("div.keyword-container"),
				index = index[1];
			obj.keyNumbers--;
			var tdContainer = container.find("a.keyword-remove-btn[data-index=" + index + "]").closest("td.keyword-td");
			var formContainer = tdContainer.closest("form.form-panel");
			if (tdContainer.find("div.error input.text-text").length != 0) {
				formContainer.find(".form-error-tips").css("display", "none");
				formContainer.find("div.error").removeClass("error")
			}
			tdContainer.fadeOut(350, function() {
				$(this).remove();
				me.keyword("refreshLayout")
			});
			if (obj.maxKeys <= obj.keyNumbers) {} else {
				container.find("div.keyword-btn-container").removeClass("disabled");
				container.find("span.keyword-overflow-warning").css("display", "none")
			}
			return me
		},
		refreshLayout: function(me, index) {
			var me = me || this,
				obj = me.get(0),
				columns = obj.columns,
				container = me.closest("div.keyword-container"),
				keywordContainer = container.find("div.keyword-container-div tbody.keyword-container-body");
			var tdContainerList = container.find("td.keyword-td");
			tdContainerList.detach();
			keywordContainer.empty();
			var temp = 0;
			for (var index = 0, len = tdContainerList.length; index < len; index++) {
				var tdContainer = $(tdContainerList[index]);
				if (temp >= columns || temp == 0) {
					keywordContainer.append($("<tr></tr>"));
					temp = 1
				} else {
					temp++
				}
				keywordContainer.find("tr:last").append(tdContainer);
				tdContainer.find("a.keyword-remove-btn").attr("data-index", index)
			}
			if (tdContainerList.length == 0) {
				container.addClass("empty")
			}
			return me
		},
		getValue: function(me) {
			var me = me || this,
				keywordContainer = me.closest("div.keyword-container").find("div.keyword-container-div tbody.keyword-container-body"),
				value = [];
			var keywords = keywordContainer.find("input.keyword-content");
			for (var index = 0, len = keywords.length; index < len; index++) {
				var keyword = keywords.eq(index),
					v = keyword.val();
				if (v != "") {
					value.push(v)
				}
			}
			return $.su.json.toJSONString(value)
		},
		setValue: function(me, value) {
			var me = me || this,
				value = value[1] || "",
				container = me.closest("div.keyword-container"),
				keywordContainer = container.find("div.keyword-container-div tbody.keyword-container-body");
			value = $.su.json.parseJSON(value);
			me.keyword("removeAll");
			for (var index = 0, len = value.length; index < len; index++) {
				me.keyword("addKey", value[index])
			}
			if (len == 0) {
				container.addClass("empty")
			}
			return me
		},
		removeAll: function(me) {
			var me = me || this,
				obj = me.get(0),
				container = me.closest("div.keyword-container"),
				keywordContainer = container.find("div.keyword-container-div tbody.keyword-container-body");
			keywordContainer.empty();
			obj.keyTag = 0;
			obj.keyNumbers = 0;
			container.addClass("empty");
			container.find("div.keyword-btn-container").removeClass("disabled");
			container.find("span.keyword-overflow-warning").css("display", "none");
			return me
		},
		removeEmpty: function(me) {
			var me = me || this,
				obj = me.get(0),
				keywordContainer = me.closest("div.keyword-container").find("div.keyword-container-div tbody.keyword-container-body"),
				keywordType = obj.keywordType;
			var keywords = keywordContainer.find("input.keyword-content");
			for (var index = 0, len = keywords.length; index < len; index++) {
				var keyword = keywords.eq(index);
				if (keyword.val() == "") {
					me.keyword("removeKey", keyword.attr("data-index"))
				}
			}
			return me
		},
		hasEmpty: function(me) {
			var me = me || this,
				obj = me.get(0),
				keywordContainer = me.closest("div.keyword-container").find("div.keyword-container-div tbody.keyword-container-body"),
				keywordType = obj.keywordType;
			var keywords = keywordContainer.find("input.keyword-content");
			for (var index = 0, len = keywords.length; index < len; index++) {
				var keyword = keywords.eq(index);
				if (keyword.val() == "") {
					keyword[keywordType]("setError");
					return true
				}
			}
			return false
		},
		setMaxKeys: function(me, max) {
			var me = me || this,
				obj = me.get(0),
				maxKeys = max[1],
				container = me.closest("div.keyword-container");
			if (maxKeys) {
				obj.maxKeys = maxKeys
			}
			if (obj.maxKeys <= obj.keyNumbers) {
				container.find("div.keyword-btn-container").addClass("disabled")
			}
			return me
		},
		validate: function(me) {
			var me = me || this,
				obj = me.get(0),
				keywordContainer = me.closest("div.keyword-container").find("div.keyword-container-div tbody.keyword-container-body"),
				keywordType = obj.keywordType,
				result = true;
			var keywords = keywordContainer.find("input.keyword-content"),
				len = keywords.length;
			for (var index = 0; index < len - 1; index++) {
				var keyword = keywords.eq(index);
				if (keyword.val() == "") {
					if (!obj.allowBlank) {
						keyword[keywordType]("setError");
						return false
					}
				} else {
					if (!keyword[keywordType]("validate")) {
						return false
					}
				}
			}
			if (len) {
				keyword = keywords.eq(len - 1);
				if (keyword.val() == "") {
					me.keyword("removeKey", len - 1)
				} else {
					if (!keyword[keywordType]("validate")) {
						return false
					}
				}
			}
			if (obj.validator) {
				result = obj.validator.call(me)
			}
			if (!result) {
				return false
			} else {
				var v = me.keyword("getValue");
				me.val(v);
				return true
			}
		}
	});
	$.su.Widget("grid", {
		defaults: {
			columns: [],
			store: null,
			operation: null,
			sortable: false,
			paging: null,
			editor: null,
			update: "operation",
			autoRefresh: false,
			refreshDuration: 500,
			minLines: 0,
			maxLines: 0,
			rows: [],
			promptTextSuccessed: $.su.CHAR.OPERATION.GRID_SAVED,
			promptTextFailed: $.su.CHAR.OPERATION.GRID_FAILED,
			noneSelectedMsgText: $.su.CHAR.OPERATION.GRID_NONE_SELECT,
			deleteConfirmMsgText: $.su.CHAR.OPERATION.GRID_DELETE_COMFIRM,
			maxRulesMsgText: $.su.CHAR.OPERATION.GRID_MAX_RULES,
			deleteAllConfirmMsgText: $.su.CHAR.OPERATION.GRID_DELETE_ALL_COMFIRM,
			maxRulesProperty: "max_rules",
			showPrompt: true
		},
		create: function(defaults, options) {
			var me = this;
			me.each(function(i, obj) {
				var tar = $(obj);
				$.extend(this, defaults, options);
				obj.id = obj.id || $.su.randomId("gird");
				if (!obj.isPanel) {
					$(obj).panel(options).addClass("grid-panel")
				}
				var columns = this.columns;
				if (columns.length === 0) {
					return false
				}
				var btnSort = "";
				if (obj.sortable) {
					btnSort = '<button class="grid-header-btn btn-sort"></button>'
				}
				var styleText = '<style type="text/css">';
				var inHTML = '<div class="container grid-container">';
				inHTML += '<div class="container grid-header-container">';
				inHTML += '<table border="0" cellspacing="0" cellpadding="0">';
				inHTML += '<tr class="grid-header-tr">';
				for (var index = 0; index < columns.length; index++) {
					var column = columns[index];
					if (column.hidden) {
						continue
					}
					column.cls = column.cls || "", column.dataIndex = column.dataIndex || column.name || "", column.renderer = column.renderer || function(data) {
						return $.su.func.escapeHtml(data)
					};
					var addOn = "";
					switch (column.xtype) {
						case "checkcolumn":
							addOn += '<div class="checkbox-group-container grid-header-checkbox checkcolumn inline">';
							addOn += '<div class="widget-wrap">';
							addOn += '<label class="checkbox-label">';
							addOn += '<input class="checkbox-checkbox" type="checkbox" value=""/>';
							addOn += '<span class="icon"></span>';
							addOn += "</label>";
							addOn += "</div>";
							addOn += "</div>";
							column.text = column.text || "";
							column.name = column.name || "select";
							column.width = column.width || $.su.CHAR.SETTING.GLOBAL.CHECK_COLUMN_WIDTH;
							break;
						case "rownumberer":
							column.text = column.text || $.su.CHAR.GRID.ID;
							column.name = column.name || "seq";
							column.width = column.width || $.su.CHAR.SETTING.GLOBAL.ROW_NUMBER_WIDTH;
							break;
						case "onlydelete":
							column.text = column.text || "删除重新学习";
							column.name = column.name || "onlydelete";
							column.width = column.width || $.su.CHAR.SETTING.GLOBAL.SETTING_WIDTH;
							break;	
						case "settings":
							column.text = column.text || $.su.CHAR.GRID.OPERATION;
							column.name = column.name || "settings";
							column.width = column.width || $.su.CHAR.SETTING.GLOBAL.SETTING_WIDTH;
							break;
						case "statuscolumn":
							column.text = column.text || $.su.CHAR.GRID.STATUS;
							column.dataIndex = column.dataIndex || "status";
							column.name = column.name || column.dataIndex;
							column.width = column.width || $.su.CHAR.SETTING.GLOBAL.STATUS_WIDTH;
							break;
						case "dropcolumn":
							column.text = column.text || $.su.CHAR.GRID.STATUS;
							column.dataIndex = column.dataIndex || "status";
							column.name = column.name || column.dataIndex;
							column.width = column.width || $.su.CHAR.SETTING.GLOBAL.STATUS_WIDTH;
							break;	
						case "learningcolumn":
							column.text = column.text || $.su.CHAR.GRID.STATUS;
							column.dataIndex = column.dataIndex || "status";
							column.name = column.name || column.dataIndex;
							column.width = column.width || $.su.CHAR.SETTING.GLOBAL.STATUS_WIDTH;
							break;	
						case "comment":
							column.text = column.text || $.su.CHAR.SYS_STATUS_STATUS.COMMENT;
							column.dataIndex = column.dataIndex || "comment";
							column.name = column.name || column.dataIndex;
							column.width = column.width || $.su.CHAR.SETTING.GLOBAL.COMMENT_WIDTH;
							break;
						default:
							column.text = column.text || "";
							column.name = column.name || column.dataIndex;
							column.width = column.width || $.su.CHAR.SETTING.GLOBAL.DEFAULT_WIDTH
					}
					if (column.width) {
						styleText += "div#" + obj.id + " th.grid-header-" + index + ",";
						styleText += "div#" + obj.id + " td.grid-content-td-" + index;
						styleText += "{width:" + column.width + "px;}"
					}
					inHTML += '<th class="grid-header grid-header-' + index + " " + column.dataIndex + '" name="' + column.dataIndex + '">';
					inHTML += addOn;
					inHTML += '<span class="content ' + column.xtype + '">' + column.text + "</span>";
					inHTML += btnSort;
					inHTML += "</th>"
				}
				inHTML += "</tr>";
				inHTML += "</table>";
				inHTML += "</div>";
				inHTML += '<div class="grid-content-container-outer">';
				inHTML += '<div class="grid-content-container">';
				inHTML += '<table border="0" cellspacing="0" cellpadding="0">';
				inHTML += '<tbody class="grid-content-data">';
				inHTML += "</tbody>";
				inHTML += "</table>";
				inHTML += "</div>";
				inHTML += "</div>";
				inHTML += "</div>";
				var grid = $(inHTML);
				$(obj).find("div.panel-content-container").append(grid);
				grid.find("tbody.grid-content-data").append(me.grid("initEmptyRow"));
				styleText += "div#" + obj.id + " div.grid-content-container{";
				var lineHeight = grid.find("tr.grid-content-tr").outerHeight();
				if (obj.minLines) {
					styleText += "min-height:" + obj.minLines * lineHeight + "px;"
				}
				if (obj.maxLines) {
					styleText += "max-height:" + obj.maxLines * lineHeight + "px;";
					grid.addClass("allow-scroll")
				}
				styleText += "}";
				styleText += "</style>";
				grid.prepend($(styleText));
				if (!obj.store) {
					return null
				} else {
					if (!obj.store.isStore) {
						obj.store = new $.su.Store(obj.store)
					}
				}
				this.isGrid = true;
				if (obj.operation) {
					tar.grid("initTBar")
				}
				if (obj.editor) {
					tar.grid("initEditor")
				}
				if (obj.paging) {
					tar.grid("initPaging")
				}
			});
			var obj = me.get(0),
				store = obj.store;
			obj.rows = [];
			if (store.updateMode == "operation") {
				$(store).on("ev_insertdata", function(e, index, data) {
					me.grid("insert", index, data);
					me.find("tr.grid-content-tr.empty").remove()
				}).on("ev_loaddata", function(e, data, others) {
					if (me.grid("isEditing") || me.grid("getSelected").length > 0) {
						return
					}
					me.grid("load", data, others);
					if (others) {
						var maxRules = others[obj.maxRulesProperty];
						obj.maxRules = maxRules || 0
					}
				}).on("ev_updatedata", function(e, key, index, data) {
					me.grid("update", key, index, data)
				}).on("ev_removedata", function(e, keyArray, indexArray) {
					me.grid("remove", keyArray)
				})
			} else {
				$(store).on("ev_loaddata", function(e, data, others) {
					if (me.grid("isEditing")) {
						$(obj.editor).editor("cancelEdit")
					}
					me.grid("load", data);
					if (others) {
						var maxRules = others[obj.maxRulesProperty];
						obj.maxRules = maxRules || 0
					}
				})
			}
			me.delegate("tr.grid-content-tr", "click", function(e) {
				e.stopPropagation();
				e.preventDefault();
				var key = $(this).attr("data-key"),
					store = me.grid("getStore");
				if (store && key !== undefined && key !== "undefined") {
					var data = store.getData(key);
					me.trigger("ev_lineclicked", [key, data])
				}
				return false
			});
			me.delegate("td.grid-content-td-check-column label.checkbox-label", "click", function(e) {
				e.stopPropagation();
				e.preventDefault();
				var label = $(this),
					tr = label.closest("tr.grid-content-tr"),
					checkbox = label.find("input[type=checkbox]");
				tr.toggleClass("selected");
				if (tr.hasClass("selected")) {
					checkbox.prop("checked", true);
					label.addClass("checked")
				} else {
					checkbox.prop("checked", false);
					label.removeClass("checked")
				}
				var trList = trList = me.find("tr.grid-content-tr");
				var label = me.find("tr.grid-header-tr label.checkbox-label");
				var container = label.closest("div.checkbox-group-container");
				if (trList.length > 0) {
					for (var index = 0; index < trList.length; ++index) {
						if ($(trList[index]).hasClass("disabled")) {
							continue
						}
						if (!$(trList[index]).hasClass("selected")) {
							break
						}
					}
					if (index != trList.length) {
						container.removeClass("selected");
						label.removeClass("checked")
					}
					for (var index = 0; index < trList.length; ++index) {
						if ($(trList[index]).hasClass("disabled")) {
							continue
						}
						if (!$(trList[index]).hasClass("selected")) {
							break
						}
					}
					if (index == trList.length) {
						container.addClass("selected");
						label.addClass("checked")
					}
				}
				return false
			}).delegate("th.grid-header div.checkcolumn label.checkbox-label", "click", function(e) {
				e.stopPropagation();
				e.preventDefault();
				var label = $(this),
					container = $(this).closest("div.checkbox-group-container"),
					trList = me.find("tr.grid-content-tr");
				if (container.hasClass("selected")) {
					container.removeClass("selected");
					trList.removeClass("selected");
					trList.find("label.checkbox-label").removeClass("checked");
					trList.find("input[type=checkbox]").prop("checked", false);
					label.find("input[type=checkbox]").prop("checked", false);
					label.removeClass("checked")
				} else {
					container.addClass("selected");
					trList.addClass("selected");
					trList.find("input[type=checkbox]").prop("checked", true);
					trList.find("label.checkbox-label").addClass("checked");
					label.find("input[type=checkbox]").prop("checked", true);
					label.addClass("checked")
				}
				return false
			});
			var btn_status_id = false;
			var btn_delete_id = false;
			me.delegate("a.grid-content-btn.grid-content-btn-status", "click", function(e) {
				e.preventDefault();
				e.stopPropagation();
				var btn = $(this),
					tr = $(this).closest("tr.grid-content-tr");
				if (tr.hasClass("disabled")) {
					return
				}
				var editorObj = me.grid("getEditor");
				if (editorObj && editorObj.isEditor) {
					if (editorObj.editing) {
						$(editorObj).editor("shake");
						return
					}
				}
				var key = btn.attr("data-key"),
					value = btn.attr("data-value"),
					vOn = btn.attr("data-on"),
					vOff = btn.attr("data-off"),
					name = btn.attr("data-name"),
					store = me.grid("getStore"),
					keyProperty = store.keyProperty,
					dOld = $.extend({}, store.getData(key));
				delete dOld[keyProperty];
				var opt = {};
				opt[name] = (value === vOn) ? vOff : vOn;
				var dNew = $.extend({}, dOld, opt);
				if($.su.ISIE8){
					for(var x in dNew){
						if(typeof dNew[x] == "string"){
							dNew[x] = dNew[x].replace(/\"/g, "\\\"");
						}
					}
				}
				if (btn_status_id) {
					clearTimeout(btn_status_id);
					btn_status_id = false
				}
				btn_status_id = setTimeout(function() {
					me.grid("runProgress");
					store.update(key, {
						"old": dOld,
						"new": dNew
					}, function() {
						me.grid("prompt", true);
						setTimeout(function() {
							me.trigger("ev_statusChange")
						}, 100)
					}, function() {
						me.grid("prompt", false)
					})
				}, 500)
			}).delegate("a.grid-content-btn.grid-content-btn-delete", "click", function(e) {
				e.preventDefault();
				e.stopPropagation();
				var btn = $(this),
					tr = btn.closest("tr.grid-content-tr");
				if (tr.hasClass("disabled")) {
					return
				}
				var key = btn.attr("data-key"),
					editorObj = me.grid("getEditor");
				if (editorObj && editorObj.isEditor) {
					if (editorObj.editing === false) {
						store = me.get(0).store;
						if (btn_delete_id) {
							clearTimeout(btn_delete_id);
							btn_delete_id = false
						}
						btn_delete_id = setTimeout(function() {
							me.grid("runProgress");
							store.remove([key], {}, function() {
								me.grid("prompt", true)
							}, function() {
								me.grid("prompt", false)
							}, function() {
								me.grid("prompt", false)
							})
						}, 500)
					} else {
						$(editorObj).editor("shake")
					}
				}
			});
			var tar = me.get(0);
			tar.autoRefreshTime = 0;
			if (tar.autoRefresh) {
				tar.autoRefreshTime = setTimeout(function(e) {
					if (me.grid("isEditing")) {
						return me
					}
					me.grid("getStore").load()
				}, tar.refreshDuration)
			}
			return me
		},
		initRow: function(me, params) {
			var me = me || this,
				obj = me.get(0),
				jndex = params[1] || 0,
				data = params[2],
				key = data[obj.store.keyProperty],
				columns = me.grid("getColumns");
			var inHTML = '<tr class="grid-content-tr grid-content-tr-' + key + '" data-key="' + key + '" >';
			for (var lastVisibleIndex = columns.length - 1; lastVisibleIndex >= 0; lastVisibleIndex--) {
				if (!columns[lastVisibleIndex].hidden) {
					break
				}
			}
			for (var firstVisibleIndex = 0; firstVisibleIndex < columns.length; firstVisibleIndex++) {
				if (!columns[firstVisibleIndex].hidden) {
					break
				}
			}
			var len = columns.length,
				actionFlag = [];
			for (var kndex = 0; kndex < len; kndex++) {
				var column = columns[kndex],
					dd = (data[column.dataIndex] == undefined || data[column.dataIndex] == "") ? "---" : data[column.dataIndex],
					fst = (kndex === firstVisibleIndex) ? "fst" : "",
					lst = (kndex === lastVisibleIndex) ? "lst" : "";
				if (column.hidden) {
					continue
				}
				switch (column.xtype) {
					case "rownumberer":
						inHTML += '<td class="grid-content-td grid-content-td-' + kndex + " grid-content-td-row-numberer " + fst + " " + lst + " " + column.cls + '" name="row-numberer">';
						inHTML += '<span class="grid-row-numberer content">' + (jndex + 1) + "</span>";
						inHTML += "</td>";
						break;
					case "checkcolumn":
						inHTML += '<td class="grid-content-td grid-content-td-' + kndex + " grid-content-td-check-column " + fst + " " + lst + '" name="check-column">';
						inHTML += '<div class="checkbox-group-container">';
						inHTML += '<div class="widget-wrap">';
						inHTML += '<label class="checkbox-label">';
						inHTML += '<input class="checkbox-checkbox" type="checkbox" value="' + key + '"/>';
						inHTML += '<span class="icon"></span>';
						inHTML += "</label>";
						inHTML += "</div>";
						inHTML += "</div>";
						inHTML += '<span class="content">--</span>';
						inHTML += "</td>";
						break;
					case "statuscolumn":
						var res = "",
							cls = "",
							title = "",
							val = "",
							trueValue = column.trueValue || "on",
							falseValue = column.falseValue || "off";
						if (data[column.dataIndex] === trueValue) {
							res = $.su.CHAR.GRID.IS_ENABLED;
							cls = "disabled";
							title = $.su.CHAR.GRID.DISABLE;
							val = trueValue
						} else {
							res = $.su.CHAR.GRID.IS_DISABLED;
							cls = "enabled";
							title = $.su.CHAR.GRID.ENABLE;
							val = falseValue
						}
						inHTML += '<td class="grid-content-td grid-content-td-' + kndex + " grid-content-td-status-column " + fst + " " + lst + '" name="check-column">';
						inHTML += '<a href="javascript:void(0);" data-index="' + jndex + '" data-name="' + column.dataIndex + '" data-value="' + val + '" data-key="' + key + '" data-on="' + trueValue + '" data-off="' + falseValue + '" title="' + title + '" class="grid-content-btn grid-content-btn-status btn-status ' + cls + '">';
						inHTML += '<span class="text">' + res + "</span>";
						inHTML += '<span class="icon"></span>';
						inHTML += "</a>";
						inHTML += "</td>";
						break;
				case "dropcolumn":
						var res = "",
							cls = "",
							title = "",
							val = "",
							trueValue = column.trueValue || "on",
							falseValue = column.falseValue || "off";
						if (data[column.dataIndex] === trueValue) {
							res = "报警";
							cls = "disabled";
							title = $.su.CHAR.GRID.DISABLE;
							val = trueValue
						} else {
							res = "阻断";
							cls = "enabled";
							title = $.su.CHAR.GRID.ENABLE;
							val = falseValue
						}
						inHTML += '<td class="grid-content-td grid-content-td-' + kndex + " grid-content-td-status-column " + fst + " " + lst + '" name="check-column">';
						inHTML += '<a href="javascript:void(0);" data-index="' + jndex + '" data-name="' + column.dataIndex + '" data-value="' + val + '" data-key="' + key + '" data-on="' + trueValue + '" data-off="' + falseValue + '" title="' + title + '" class="grid-content-btn grid-content-btn-status btn-status ' + cls + '">';
						inHTML += '<span class="text">' + res + "</span>";
						inHTML += '<span class="icon"></span>';
						inHTML += "</a>";
						inHTML += "</td>";
						break;		
					case "learningcolumn":
						var res = "",
							cls = "",
							title = "",
							val = "",
							trueValue = column.trueValue || "on",
							falseValue = column.falseValue || "off";
						if (data[column.dataIndex] === trueValue) {
							res = "学习中";
							cls = "disabled";
							title = $.su.CHAR.GRID.DISABLE;
							val = trueValue
						} else {
							res = "已完成";
							cls = "enabled";
							title = $.su.CHAR.GRID.ENABLE;
							val = falseValue
						}
						inHTML += '<td class="grid-content-td grid-content-td-' + kndex + " grid-content-td-status-column " + fst + " " + lst + '" name="check-column">';
						inHTML += '<a href="javascript:void(0);" data-index="' + jndex + '" data-name="' + column.dataIndex + '" data-value="' + val + '" data-key="' + key + '" data-on="' + trueValue + '" data-off="' + falseValue + '" title="' + title + '" class="grid-content-btn grid-content-btn-status btn-status ' + cls + '">';
						inHTML += '<span class="text">' + res + "</span>";
						inHTML += '<span class="icon"></span>';
						inHTML += "</a>";
						inHTML += "</td>";
						break;	
						case "onlydelete":
						inHTML += '<td class="grid-content-td grid-content-td-' + kndex + " grid-content-td-settings-column " + fst + " " + lst + '" name="settings-column">';
						if (column.renderer.call(me, "delete", dd, jndex, data)) {
							inHTML += '<a href="javascript:void(0);" data-index="' + jndex + '" data-key="' + key + '" title="' + $.su.CHAR.OPERATION.DELETE + '" class="grid-content-btn grid-content-btn-delete btn-delete">';
							inHTML += '<span class="icon"></span>';
							inHTML += '<span class="text">' + $.su.CHAR.OPERATION.DELETE + "</span>";
							inHTML += "</a>"
						}
						inHTML += '<span class="content">---</span>';
						inHTML += "</td>";
						break;	
					case "settings":
						inHTML += '<td class="grid-content-td grid-content-td-' + kndex + " grid-content-td-settings-column " + fst + " " + lst + '" name="settings-column">';
						if (column.renderer.call(me, "edit", dd, jndex, data)) {
							inHTML += '<a href="javascript:void(0);" data-index="' + jndex + '" data-key="' + key + '" title="' + $.su.CHAR.OPERATION.EDIT + '" class="grid-content-btn grid-content-btn-edit btn-edit">';
							inHTML += '<span class="icon"></span>';
							inHTML += '<span class="text">' + $.su.CHAR.OPERATION.EDIT + "</span>";
							inHTML += "</a>"
						}
						if (column.renderer.call(me, "delete", dd, jndex, data)) {
							inHTML += '<a href="javascript:void(0);" data-index="' + jndex + '" data-key="' + key + '" title="' + $.su.CHAR.OPERATION.DELETE + '" class="grid-content-btn grid-content-btn-delete btn-delete">';
							inHTML += '<span class="icon"></span>';
							inHTML += '<span class="text">' + $.su.CHAR.OPERATION.DELETE + "</span>";
							inHTML += "</a>"
						}
						inHTML += '<span class="content">---</span>';
						inHTML += "</td>";
						break;
					case "actioncolumn":
						var items = column.items;
						inHTML += '<td class="grid-content-td grid-content-td-' + kndex + " grid-content-td-action-column " + fst + " " + lst + '" name="action-column">';
						inHTML += '<div class="grid-content-td-wrap">';
						for (var index = 0; index < items.length; index++) {
							var item = items[0];
							inHTML += '<input class="actioncolumn-input" data-index="' + jndex + '" data-type="' + item.xtype + '" data-property="' + column.dataIndex + '" data="' + column.renderer.call(me, dd, jndex) + '" />'
						}
						inHTML += "</div>";
						inHTML += "</td>";
						actionFlag.push(kndex);
						break;
					case "comment":
						inHTML += '<td class="grid-content-td grid-content-td-' + kndex + " grid-content-td-comment " + fst + " " + lst + '" name="action-column">';
						inHTML += '<div class="grid-content-td-wrap">';
						if (column.custom) {
							inHTML += '<span class="content">' + column.renderer.call(me, dd, jndex, data) + "</span>"
						} else {
							inHTML += '<span class="content">' + $.su.func.escapeHtml(dd); + "</span>"
						}
						inHTML += "</div>";
						inHTML += "</td>";
						break;
					default:
						inHTML += '<td class="grid-content-td grid-content-td-' + kndex + " grid-content-td-" + column.name + " " + fst + " " + lst + " " + column.cls + '" name="' + column.name + '">';
						inHTML += '<span class="content">' + column.renderer.call(me, dd, jndex, data) + "</span>";
						inHTML += "</td>";
						break
				}
			}
			inHTML += "</tr>";
			var row = $(inHTML);
			if (actionFlag.length > 0) {
				for (var index = 0; index < actionFlag.length; index++) {
					var num = actionFlag[index],
						items = columns[num].items,
						cellObj = row.find("td.grid-content-td-" + num);
					var inputs = cellObj.find("input.actioncolumn-input"),
						dIndex = inputs.attr("data-index"),
						dataIndex = inputs.attr("data-property"),
						dd = me.grid("getStore").data[dIndex] || {};
					for (var lndex = 0; lndex < items.length; lndex++) {
						var propertyObj = {}, item = items[lndex],
							dIndex = item.dIndex;
						if (item.properties) {
							var properties = item.properties;
							for (var mndex = 0; mndex < properties.length; mndex++) {
								var property = properties[mndex];
								if (property.value === undefined || property.value === null) {
									propertyObj[property.property] = property.index
								} else {
									propertyObj[property.property] = (data[property.index] === property.value) ? true : false
								}
							}
						}
						var input = inputs.eq(lndex),
							item = items[lndex],
							xtype = item.xtype,
							dIndex = item.dIndex,
							daIndex = item.dataIndex || dataIndex,
							di = input.attr("data-index");
						if (xtype == "html") {
							var renderer = item.renderer || function(d, dd) {
									return "<span>" + d + "</span>"
								}, inHTML = "";
							if (!dIndex || dIndex == "") {
								inHTML = renderer(dd[daIndex], dd, di)
							} else {
								var d = "";
								if (dd[dataIndex]) {
									d = dd[dataIndex][dIndex] || ""
								}
								inHTML = renderer(d, dd)
							}
							input.replaceWith($(inHTML))
						} else {
							input[xtype]($.extend({}, item, propertyObj));
							if (!dIndex || dIndex == "") {
								input[xtype]("setValue", dd[daIndex])
							} else {
								if (dd[dataIndex]) {
									var d = "";
									if (dd[dataIndex]) {
										d = dd[dataIndex][dIndex] || ""
									}
									input[xtype]("setValue", d)
								}
							}
						}
					}
				}
			}
			me.trigger("ev_rowinited", [data, jndex, key]);
			return row
		},
		initEmptyRow: function(me) {
			var me = me || this,
				columns = me.grid("getColumns");
			for (var lastVisibleIndex = columns.length - 1; lastVisibleIndex >= 0; lastVisibleIndex--) {
				if (!columns[lastVisibleIndex].hidden) {
					break
				}
			}
			var inHTML = '<tr class="grid-content-tr empty">';
			for (var index = 0, len = columns.length; index < len; index++) {
				if ( !! columns[index].hidden) {
					continue
				}
				var lst = (index == lastVisibleIndex) ? "lst" : "";
				inHTML += '<td class="grid-content-td grid-content-td-' + index + " " + lst + '">--</td>'
			}
			inHTML += "</tr>";
			var row = $(inHTML);
			return row
		},
		initTBar: function(me, params) {
			var me = me || this,
				tar = me.get(0);
			if (!tar) {
				return null
			}
			var type = $.type(tar.operation);
			var operations = null;
			if (type === "string") {
				operations = tar.operation.split("|")
			} else {
				if (type === "array") {
					operations = tar.operation
				} else {
					return null
				}
			}
			tar.operation = operations;
			var inHTML = '<div class="operation-container">';
			for (var index = 0, len = operations.length; index < len; index++) {
				var fst = (index === 0) ? "fst" : "",
					lst = (index === len - 1) ? "lst" : "";
				switch (operations[index]) {
					case "add":
						inHTML += '<a href="javascript:void(0);" class="operation-btn btn-add ' + fst + " " + lst + '">';
						inHTML += '<span class="icon"></span>';
						inHTML += '<span class="text">' + $.su.CHAR.OPERATION.ADD + "</span>";
						inHTML += "</a>";
						var msgInHTML = '<div class="grid-warning-msg warning">';
						msgInHTML += '<h4 class="title">';
						msgInHTML += '<span class="icon"></span>';
						msgInHTML += '<span class="text">' + tar.maxRulesMsgText + "</span>";
						msgInHTML += "</h4>";
						msgInHTML += "</div>";
						var maxRulesMsg = $('<div class="grid-max-rules-msg"></div>').msg({
							type: "alert",
							cls: "grid-popup-msg",
							innerHTML: msgInHTML
						});
						tar.maxRulesMsg = maxRulesMsg;
						break;
					case "edit":
						inHTML += '<a href="javascript:void(0);" class="operation-btn btn-edit ' + fst + " " + lst + '">';
						inHTML += '<span class="icon"></span>';
						inHTML += '<span class="text">' + $.su.CHAR.OPERATION.EDIT + "</span>";
						inHTML += "</a>";
						break;
					case "prompt":
						inHTML += '<div class="grid-prompt hidden widget-container successed inline-block left">';
						inHTML += '<div class="content">';
						inHTML += '<span class="icon"></span>';
						inHTML += '<span class="text text-successed">' + tar.promptTextSuccessed + "</span>";
						inHTML += '<span class="text text-failed">' + tar.promptTextFailed + "</span>";
						inHTML += "</div>";
						inHTML += "</div>";
						tar.showPrompt = true;
						break;
					case "delete":
						inHTML += '<a href="javascript:void(0);" class="operation-btn btn-delete ' + fst + " " + lst + '">';
						inHTML += '<span class="icon"></span>';
						inHTML += '<span class="text">' + $.su.CHAR.OPERATION.DELETE + "</span>";
						inHTML += "</a>";
						var msgInHTML = '<div class="grid-warning-msg warning">';
						msgInHTML += '<h4 class="title">';
						msgInHTML += '<span class="icon"></span>';
						msgInHTML += '<span class="text">' + tar.noneSelectedMsgText + "</span>";
						msgInHTML += "</h4>";
						msgInHTML += "</div>";
						var noneSelectMsg = $('<div class="grid-none-selected-msg"></div>').msg({
							type: "alert",
							cls: "grid-popup-msg",
							innerHTML: msgInHTML
						});
						msgInHTML = '<div class="grid-warning-msg warning">';
						msgInHTML += '<h4 class="title">';
						msgInHTML += '<span class="icon"></span>';
						msgInHTML += '<span class="text">' + tar.deleteConfirmMsgText + "</span>";
						msgInHTML += "</h4>";
						msgInHTML += "</div>";
						var deleteConfirmMsg = $('<div class="grid-delete-comfirm-msg"></div>').msg({
							type: "prompt",
							cls: "grid-popup-msg",
							innerHTML: msgInHTML,
							okHandler: function(e) {
								me.trigger("ev_startDelete");
								var selectedKeys = me.grid("getSelected"),
									store = me.grid("getStore");
								if (selectedKeys.length > 0) {
									me.grid("runProgress");
									store.remove(selectedKeys, {}, function() {
										me.grid("prompt", true)
									}, function() {
										me.trigger("ev_deleteError");
										me.grid("prompt", false)
									}, function() {
										me.trigger("ev_deleteError");
										me.grid("prompt", false)
									})
								}
							}
						});
						tar.noneSelectMsg = noneSelectMsg;
						tar.deleteConfirmMsg = deleteConfirmMsg;
						break;
					case "deleteAll":
						inHTML += '<a href="javascript:void(0);" class="operation-btn btn-delete-all ' + fst + " " + lst + '">';
						inHTML += '<span class="icon"></span>';
						inHTML += '<span class="text">' + $.su.CHAR.OPERATION.DELETE_ALL + "</span>";
						inHTML += "</a>";
						var msgInHTML = '<div class="grid-warning-msg warning">';
						msgInHTML += '<h4 class="title">';
						msgInHTML += '<span class="icon"></span>';
						msgInHTML += '<span class="text">' + tar.noneSelectedMsgText + "</span>";
						msgInHTML += "</h4>";
						msgInHTML += "</div>";
						var noneSelectMsg = $('<div class="grid-none-selected-msg"></div>').msg({
							type: "alert",
							cls: "grid-popup-msg",
							innerHTML: msgInHTML
						});
						var msgInHTML = '<div class="grid-warning-msg warning">';
						msgInHTML += '<h4 class="title">';
						msgInHTML += '<span class="icon"></span>';
						msgInHTML += '<span class="text">' + tar.deleteAllConfirmMsgText + "</span>";
						msgInHTML += "</h4>";
						msgInHTML += "</div>";
						var deleteConfirmMsg = $('<div class="grid-delete-comfirm-msg"></div>').msg({
							type: "prompt",
							cls: "grid-popup-msg",
							innerHTML: msgInHTML,
							okHandler: function(e) {
								var store = me.grid("getStore"),
									keyProperty = store.keyProperty,
									selectedKeys = [],
									data = store.data;
								for (var index = 0, len = data.length; index < len; index++) {
									selectedKeys.push(data[index][keyProperty])
								}
								if (selectedKeys.length > 0) {
									store.remove(selectedKeys, {}, null, function() {
										me.grid("prompt", false)
									}, function() {
										me.grid("prompt", false)
									})
								}
							}
						});
						tar.noneSelectMsg = noneSelectMsg;
						tar.deleteConfirmMsg = deleteConfirmMsg;
						break;
					case "enable":
						inHTML += '<a href="javascript:void(0);" class="operation-btn btn-enable ' + fst + " " + lst + '">';
						inHTML += '<span class="icon"></span>';
						inHTML += '<span class="text">' + $.su.CHAR.OPERATION.ENABLE + "</span>";
						inHTML += "</a>";
						break;
					case "disable":
						inHTML += '<a href="javascript:void(0);" class="operation-btn btn-disable ' + fst + " " + lst + '">';
						inHTML += '<span class="icon"></span>';
						inHTML += '<span class="text">' + $.su.CHAR.OPERATION.DISABLE + "</span>";
						inHTML += "</a>";
						break;
					case "search":
						/*inHTML += '<div class="container widget-container text-container search-container inline">';
						inHTML += '<span class="widget-wrap text-wrap search-wrap">';
						inHTML += '<input type="text" class="text-text search-text" value="' + $.su.CHAR.OPERATION.SEARCH + '" />';
						inHTML += '<span class="pos"></span>';
						inHTML += '<a href="javascript:void(0);" class="search-switch"></a>';
						inHTML += "</span>";
						inHTML += "</div>";
						break;*/
						
						inHTML += '<a href="javascript:void(0);" class="operation-btn btn-add ' + fst + " " + lst + '">';
						inHTML += '<span class="icon"></span>';
						inHTML += '<span class="text">' + $.su.CHAR.OPERATION.SEARCH + "</span>";
						inHTML += "</a>";
						var msgInHTML = '<div class="grid-warning-msg warning">';
						msgInHTML += '<h4 class="title">';
						msgInHTML += '<span class="icon"></span>';
						msgInHTML += '<span class="text">' + tar.maxRulesMsgText + "</span>";
						msgInHTML += "</h4>";
						msgInHTML += "</div>";
						var maxRulesMsg = $('<div class="grid-max-rules-msg"></div>').msg({
							type: "alert",
							cls: "grid-popup-msg",
							innerHTML: msgInHTML
						});
						tar.maxRulesMsg = maxRulesMsg;
						break;
						
					case "refresh":
						inHTML += '<a href="javascript:void(0);" id="refresh" class="operation-btn btn-refresh ' + fst + " " + lst + '">';
						inHTML += '<span class="icon"></span>';
						inHTML += '<span class="text">' + $.su.CHAR.OPERATION.REFRESH + "</span>";
						inHTML += "</a>";
						break;
					case "autoRefresh":
						inHTML += '<input class="operation-auto-refresh ' + fst + " " + lst + '"/>';
						break;
					case "bind":
						inHTML += '<a href="javascript:void(0);" id="bind" class="operation-btn btn-link ' + fst + " " + lst + '">';
						inHTML += '<span class="icon"></span>';
						inHTML += '<span class="text">' + $.su.CHAR.OPERATION.BIND + "</span>";
						inHTML += "</a>";
						break;
					default:
						var xtype = operations[index].xtype;
						if (xtype) {
							inHTML += '<input operation-index="' + index + '" class="operation-user-defined operation-' + index + " " + fst + " " + lst + " " + xtype + '"/>'
						}
						break
				}
			}
			inHTML += "</div>";
			var toolbar = $(inHTML);
			if (tar.isPanel) {
				me.panel("getContainer").find("div.panel-tbar-container").append(toolbar);
				toolbar.find("input.operation-auto-refresh").checkbox({
					fieldLabel: null,
					items: [{
						boxlabel: $.su.CHAR.GRID.AUTO_REFRESH,
						inputValue: true,
						name: "auto-refesh"
					}],
					cls: "inline"
				}).on("ev_change", function(e, vOld, vNew) {
					clearTimeout(tar.autoRefreshTime);
					if (vNew.length > 0 && vNew[0] === "auto-refesh") {
						tar.autoRefreshTime = setTimeout(function() {
							me.grid("getStore").load()
						}, tar.refreshDuration)
					}
				});
				toolbar.find("input.operation-auto-refresh").checkbox("setValue", tar.autoRefresh);
				if (tar.autoRefresh) {
					tar.autoRefreshTime = setInterval(function() {
						if (me.grid("isEditing")) {
							return
						}
						me.grid("getStore").load()
					}, tar.refreshDuration)
				}
				toolbar.find("input.operation-user-defined").each(function(e) {
					var input = $(this),
						index = input.attr("operation-index"),
						options = operations[index],
						xtype = options.xtype;
					switch (xtype) {
						case "totalCount":
							options = $.extend({
								fieldLabel: "",
								labelCls: "s",
								readOnly: true,
								inputCls: "xl",
								value: 0,
								cls: "inline-block"
							}, options);
							input.textbox(options);
							break;
						case "display":
							options = $.extend({
								cls: "grid-display",
								fieldLabel: null,
								labelCls: "s",
								readOnly: true,
								inputCls: "xl grid-display",
								cls: "inline-block"
							}, options);
							input.textbox(options);
							break;
						default:
							options = $.extend(options, {
								"cls": "inline-block"
							});
							input[xtype](options)
					}
				});
				toolbar.delegate("a.btn-add", "click", function(e) {
					e.stopPropagation();
					e.preventDefault();
					var obj = me.get(0),
						editor = me.grid("getEditor"),
						isEditing = me.grid("isEditing");
					if ($.type(obj.beforeStartAdd) == "function") {
						if (!obj.beforeStartAdd()) {
							return
						}
					}
					if (isEditing === true) {
						$(editor).editor("shake")
					} else {
						if (isEditing === false) {
							var paging = obj.paging,
								store = me.grid("getStore");
							if (obj.maxRules && obj.maxRules <= store.data.length) {
								obj.maxRulesMsg.msg("show");
								return
							}
							if (paging && paging.isPaging) {
								$(paging).paging("goToPage", 0)
							}
							$(editor).editor("startEdit", "add")
						}
					}
				}).delegate("a.btn-delete", "click", function(e) {
					e.stopPropagation();
					e.preventDefault();
					var editor = me.grid("getEditor"),
						obj = me.get(0),
						isEditing = me.grid("isEditing");
					if (isEditing === true) {
						$(editor).editor("shake")
					} else {
						var selectedKeys = me.grid("getSelected");
						if (selectedKeys.length == 0) {
							obj.noneSelectMsg.msg("show")
						} else {
							obj.deleteConfirmMsg.msg("show")
						}
					}
				}).delegate("a.btn-delete-all", "click", function(e) {
					e.stopPropagation();
					e.preventDefault();
					var editor = me.grid("getEditor"),
						obj = me.get(0),
						isEditing = me.grid("isEditing");
					if (isEditing === true) {
						$(editor).editor("shake")
					} else {
						var selectedKeys = me.grid("getStore").data.length;
						if (selectedKeys == 0) {
							obj.noneSelectMsg.msg("show")
						} else {
							obj.deleteConfirmMsg.msg("show")
						}
					}
				}).delegate("a.btn-refresh", "click", function(e) {
					e.stopPropagation();
					e.preventDefault();
					me.grid("runProgress");
					me.grid("getStore").load({}, function() {
						me.grid("prompt", true)
					}, function() {
						me.grid("prompt", false)
					}, function() {
						me.grid("prompt", false)
					})
				}).delegate("a.btn-enable", "click", function(e) {
					e.stopPropagation();
					e.preventDefault();
					var editor = me.grid("getEditor"),
						obj = me.get(0),
						isEditing = me.grid("isEditing");
					var store = me.grid("getStore");
					var proxy = store.proxy;
					if (isEditing === true) {
						$(editor).editor("shake");
						return
					} else {
						var selectedKeys = me.grid("getSelected");
						if (selectedKeys.length == 0) {
							obj.noneSelectMsg.msg("show")
						} else {
							var params = {
								keys: selectedKeys
							};
							me.grid("runProgress");
							$.su.loading.show();
							proxy.write({
								"method": "multiEnable",
								"params": params
							}, function(data) {
								store.load();
								$.su.loading.hide();
								me.grid("prompt", true)
							}, function(error) {
								$.su.loading.hide();
								me.grid("prompt", false)
							}, function(fail) {
								$.su.loading.hide();
								me.grid("prompt", false)
							})
						}
					}
				}).delegate("a.btn-disable", "click", function(e) {
					e.stopPropagation();
					e.preventDefault();
					var editor = me.grid("getEditor"),
						obj = me.get(0),
						isEditing = me.grid("isEditing");
					var store = me.grid("getStore");
					var proxy = store.proxy;
					if (isEditing === true) {
						$(editor).editor("shake")
					} else {
						var selectedKeys = me.grid("getSelected");
						if (selectedKeys.length == 0) {
							obj.noneSelectMsg.msg("show")
						} else {
							var params = {
								keys: selectedKeys
							};
							me.grid("runProgress");
							$.su.loading.show();
							proxy.write({
								"method": "multiDisable",
								"params": params
							}, function(data) {
								store.load();
								$.su.loading.hide();
								me.grid("prompt", true)
							}, function(error) {
								$.su.loading.hide();
								me.grid("prompt", false)
							}, function(fail) {
								$.su.loading.hide();
								me.grid("prompt", false)
							})
						}
					}
				});
				toolbar.delegate("input.search-text", "focus", function(e) {
					e.stopPropagation();
					$(this).closest("div.search-container").addClass("focus")
				}).delegate("input.search-text", "blur", function(e) {
					e.stopPropagation();
					$("div.search-container").removeClass("focus")
				}).delegate("button.operation-btn", "mousedown", function(e) {
					e.stopPropagation();
					$(this).closest("div.button-container").addClass("clicked")
				}).delegate("a.search-switch", "click", function(e) {
					e.stopPropagation();
					var gridContainer = $(this).closest("div.grid-container"),
						content = $(this).prevAll("input.search-text").val();
					gridContainer.grid("search", content)
				});
				var store = tar.store;
				$(store).on("ev_datachanged", function(e, store, data) {
					toolbar.find("input.totalCount").textbox("setValue", data.length)
				})
			}
			if (tar.showPrompt) {
				inHTML = '<div class="container widget-container progressbar-container progressbar-horizontal gird-prompt-progressbar ">';
				inHTML += '<div class="widget-wrap progressbar-wrap">';
				inHTML += '<div class="widget-wrap progressbar-content">';
				inHTML += '<div class="progressbar-value">';
				inHTML += "</div>";
				inHTML += "</div>";
				inHTML += "</div>";
				toolbar.append($(inHTML))
			}
			tar.operation = toolbar.get(0)
		},
		initPaging: function(me, params) {
			var me = me || this,
				obj = me.get(0),
				options = {};
			if (!obj || !obj.paging) {
				return null
			}
			options = $.extend({
				grid: me
			}, obj.paging);
			var panelContainer = me.panel("getContainer"),
				fbarContainer = panelContainer.find("div.panel-fbar-container");
			var paging = $('<input type="hidden" class="hidden paging-input">').paging(options);
			fbarContainer.append(paging.paging("getContainer"));
			obj.paging = paging.get(0);
			return me
		},
		initEditor: function(me, params) {
			var me = me || this,
				obj = me.get(0),
				settings;
			if (!obj) {
				return null
			}
			var editor = obj.editor;
			if (!editor || !editor.isEditor) {
				var type = $.type(editor),
					settings = {
						columns: obj.columns,
						grid: me
					};
				if (type == "string" && editor !== "default") {
					settings = $.extend(settings, {
						content: editor
					})
				} else {
					settings = $.extend(settings, editor)
				}
				var editorObj = $('<tr class="editor-container"></tr>').editor(settings)
			}
			obj.editor = editorObj.get(0);
			return me
		},
		load: function(me, params) {
			var me = me || this,
				obj = me.get(0),
				data = params[1] || obj.store.data,
				others = params[2],
				wrap = me.grid("getContainer").find("tbody.grid-content-data");
			obj.rows = [];
			wrap.empty();
			for (var index = 0, len = data.length; index < len; index++) {
				if (!data[index]) {
					break
				}
				var rowNew = me.grid("initRow", index, data[index]);
				obj.rows.push(rowNew);
				wrap.append(rowNew)
			}
			me.grid("updateRowNumber");
			me.trigger("ev_load", [data, others]);
			return me
		},
		insert: function(me, params) {
			var me = me || this,
				obj = me.get(0),
				index = parseInt(params[1], 10) || -1,
				data = params[2] || [{}],
				wrap = me.find("tbody.grid-content-data");
			if (!$.isArray(data)) {
				data = [data]
			}
			data.reverse();
			for (var jndex = 0, len = data.length; jndex < len; jndex++) {
				if (-1 == index) {
					if (0 == obj.rows.length) {
						var newRow = me.grid("initRow", jndex, data[jndex]);
						wrap.prepend(newRow)
					} else {
						var newRow = me.grid("initRow", obj.rows.length + jndex - 1, data[jndex]);
						wrap.append(newRow)
					}
				} else {
					if (obj.rows.length <= index) {
						var newRow = me.grid("initRow", obj.rows.length + jndex, data[jndex]);
						wrap.append(newRow)
					} else {
						var newRow = me.grid("initRow", index + jndex, data[jndex]);
						newRow.insertBefore(obj.rows[index - 1])
					}
				}
				obj.rows.splice(obj.rows.length, 0, newRow)
			}
			me.grid("updateRowNumber");
			me.trigger("ev_insert", [index, data]);
			if ($.isArray(data)) {
				data = data[0]
			}
			me.trigger("ev_complete", [index, data]);
			return me
		},
		update: function(me, params) {
			var me = me || this,
				obj = me.get(0),
				rows = obj.rows,
				wrap = me.find("tbody.grid-content-data"),
				key = params[1],
				index = params[2] || 0,
				data = params[3];
			if ($.isArray(data)) {
				data = data[0]
			}
			var trNew = me.grid("initRow", index, data),
				trOld = rows[index];
			if (key == trOld.attr("data-key")) {
				trOld.replaceWith(trNew);
				rows[index] = trNew
			}
			me.trigger("ev_update", [key, index, data]);
			me.trigger("ev_complete", [index, data]);
			return me
		},
		remove: function(me, params) {
			var me = me || this,
				obj = me.get(0),
				rows = obj.rows,
				keys = params[1],
				keyObj = {};
			if (!(keys === undefined) && !(keys === null)) {
				if ($.type(keys) === "number") {
					keys = [keys]
				}
				for (var index = 0, len = keys.length; index < len; index++) {
					keyObj[keys[index]] = true
				}
			}
			for (var index = 0; index < rows.length; index++) {
				var rowOld = obj.rows[index];
				if (rowOld.attr("data-key") in keyObj) {
					rowOld.remove();
					obj.rows.splice(index, 1);
					index--
				}
			}
			me.grid("updateRowNumber");
			me.trigger("ev_remove", [keys]);
			$(obj).find("th.grid-header div.checkcolumn label.checkbox-label").removeClass("checked");
			$(obj).find("th.grid-header div.checkcolumn label.checkbox-label").find("input[type=checkbox]").prop("checked", false);
			return me
		},
		removeAllData: function(me, params) {
			var me = me || this,
				obj = me.get(0);
			obj.rows = [];
			me.grid("updateRowNumber");
			me.trigger("ev_remove", ["all"]);
			return me
		},
		updateRowNumber: function(me, start) {
			var me = me || this,
				obj = me.get(0),
				rows = obj.rows,
				len = rows.length,
				wrap = me.find("tbody.grid-content-data");
			if (len == 0) {
				var rowEmpty = me.grid("initEmptyRow");
				wrap.empty();
				wrap.append(rowEmpty);
				rowEmpty.css("display", "table-row");
				return me
			}
			for (var index = 0; index < len; index++) {
				var row = rows[index];
				if (row) {
					$(row).find("span.grid-row-numberer").html(index + 1)
				}
			}
			return me
		},
		getColumns: function(me) {
			var me = me || this;
			return me.get(0).columns
		},
		getSelected: function(me, allFlag) {
			var me = me || this;
			var allFlag = allFlag[1];
			var selectedTrs = me.find("tr.grid-content-tr.selected");
			var result = [];
			selectedTrs.each(function(i, obj) {
				var tr = $(obj);
				var rules = allFlag ? !tr.hasClass("empty") : (!tr.hasClass("empty") && (!tr.hasClass("disabled")) && (!tr.hasClass("unavailable")) && (obj.style.display != "none"));
				if (rules) {
					var key = tr.attr("data-key");
					result.push(key)
				}
			});
			return result
		},
		getStore: function(me) {
			var me = me || this;
			return me.get(0).store || null
		},
		getEditor: function(me) {
			var me = me || this,
				editor = me.get(0).editor;
			if (editor && $.type(editor) === "object" && editor.isEditor === true) {
				return editor
			} else {
				return undefined
			}
		},
		getDisplay: function(me) {
			var me = me || this,
				container = me.closest("div.grid-panel");
			var display = me.find("input.grid-display");
			if (display.length > 0) {
				return display
			} else {
				return null
			}
		},
		search: function(me, content) {
			var me = me || this,
				content = content[1];
			if (!content) {
				return null
			}
			return me
		},
		isEditing: function(me) {
			var me = me || this,
				editor = me.grid("getEditor"),
				store = me.get(0).store;
			if (editor && editor.isEditor) {
				if (editor.editing === true) {
					return true
				}
			} else {
				return null
			}
			return false
		},
		runProgress: function(me) {
			var me = me || this,
				obj = me.get(0),
				toolbar = $(obj.operation),
				progressbar = toolbar.find("div.gird-prompt-progressbar"),
				bar = progressbar.find("div.progressbar-value");
			bar.stop();
			bar.css("width", "0px");
			progressbar.clearQueue().fadeIn(100, function() {
				bar.animate({
					width: "50%"
				}, 5 * 1000)
			});
			return me
		},
		prompt: function(me, params) {
			var me = me || this,
				obj = me.get(0),
				successed = params[1],
				text = params[2],
				toolbar = $(obj.operation),
				progressbar = toolbar.find("div.gird-prompt-progressbar"),
				editing = me.find("tr.grid-content-tr.editing"),
				editor = $(me.grid("getEditor")),
				formPrompt = toolbar.find("div.grid-prompt");
			var btn_container = me.find("div.editor-buttons-container");
			if (btn_container.length) {
				var btn_submit = btn_container.find("button.btn-submit");
				if (btn_submit.length) {
					btn_submit.attr("disabled", false)
				}
			}
			progressbar.find("div.progressbar-value").clearQueue().animate({
				width: "100%"
			}, 150, function() {
				progressbar.fadeOut(100, function() {
					if (successed) {
						formPrompt.find("span.text-successed").html((text || obj.promptTextSuccessed));
						formPrompt.removeClass("failed").addClass("successed")
					} else {
						formPrompt.find("span.text-failed").html((text || obj.promptTextFailed));
						formPrompt.removeClass("successed").addClass("failed");
						editing.addClass("error");
						editor.addClass("error")
					}
					formPrompt.fadeIn(50, function() {
						setTimeout(function() {
							formPrompt.css("display", "none");
							editor.removeClass("error");
							editing.removeClass("error")
						}, 3 * 1000)
					})
				})
			});
			return me
		},
		disableRow: function(me, index) {
			var me = me || this,
				obj = me.get(0),
				columns = obj.columns,
				index = index[1],
				row = null;
			if (!isNaN(index)) {
				row = obj.rows[index]
			}
			if (row) {
				row = $(row);
				row.addClass("disabled");
				for (var index = 0, len = columns.length; index < len; index++) {
					var column = columns[index],
						items = column.items;
					if (column.xtype === "actioncolumn") {
						for (var jndex = 0, jen = items.length; jndex < jen; jndex++) {
							var item = items[jndex],
								xtype = item.xtype,
								dataIndex = column.dataIndex,
								act = row.find("input[data-property=" + dataIndex + "][data-type=" + xtype + "]");
							if (act && $.type(act[xtype]) == "function") {
								act[xtype]("disable")
							}
						}
					}
				}
			}
			return me
		},
		enableRow: function(me, index) {
			var me = me || this;
			obj = me.get(0), columns = obj.columns, index = index[1], row = null;
			if (!isNaN(index)) {
				row = obj.rows[index]
			}
			if (row) {
				row = $(row);
				row.removeClass("disabled");
				for (var index = 0, len = columns.length; index < len; index++) {
					var column = columns[index],
						items = column.items;
					if (column.xtype === "actioncolumn") {
						for (var jndex = 0, jen = items.length; jndex < jen; jndex++) {
							var item = items[jndex],
								xtype = item.xtype,
								dataIndex = column.dataIndex,
								act = row.find("input[data-property=" + dataIndex + "][data-type=" + xtype + "]");
							if (act && $.type(act[xtype]) == "function") {
								act[xtype]("enable")
							}
						}
					}
				}
			}
			return me
		}
	});
	$.su.Widget("editor", {
		defaults: {
			columns: null,
			grid: null,
			editing: false,
			pluginId: "",
			editingId: null,
			form: null,
			beforeSubmit: null,
			items: null,
			content: null,
			fields: null
		},
		create: function(defaults, options) {
			var me = this;
			me.each(function(i, obj) {
				$.extend(this, defaults, options);
				var tar = $(obj),
					columns = obj.columns;
				var columnLen = 0;
				for (var i = 0; i < columns.length; i++) {
					if (!columns[i].hidden) {
						columnLen++
					}
				}
				var inHTML = '<td class="editor-container" colspan="' + columnLen + '">';
				inHTML += '<div class="container editor-content-container"></div>';
				inHTML += '<div class="container editor-buttons-container">';
				inHTML += '<div class="button-container submit">';
				inHTML += '<button type="button" class="editor-btn btn-submit button-button">';
				inHTML += '<span class="button-text text">' + $.su.CHAR.OPERATION.OK + "</span>";
				inHTML += "</button>";
				inHTML += "</div>";
				inHTML += '<div class="button-container submit">';
				inHTML += '<button type="button" class="editor-btn btn-cancel button-button">';
				inHTML += '<span class="button-text text">' + $.su.CHAR.OPERATION.CANCEL + "</span>";
				inHTML += "</button>";
				inHTML += "</div>";
				inHTML += '<span class="form-error-tips"></span>';
				inHTML += "</div>";
				inHTML += "</td>";
				var form = $(inHTML);
				tar.append(form).addClass("container widget-container editor-container");
				var editorContentContainer = tar.find("div.editor-content-container");
				var fields = [];
				for (var index = 0; index < columns.length; index++) {
					var column = columns[index],
						editorType = columns[index]["editor"];
					if (editorType) {
						var editor = $("<input />");
						if (editorType.xtype == "textarea") {
							editor = $("<textarea />")
						}
						editorContentContainer.append(editor);
						if ($.type(editorType) === "string") {
							editor[editorType]({
								fieldLabel: column.text || "",
								name: column.name || column.dataIndex || ""
							})
						} else {
							if (editorType.xtype) {
								var opt = $.extend({}, editorType, {
									fieldLabel: editorType.text || column.text || "",
									name: column.name || column.dataIndex || ""
								});
								editor[editorType.xtype](opt);
								if (editorType.areaTitle) {
									editor.closest(".widget-container").before('<div class="widget-container editor-area-title">' + editorType.areaTitle + "</div>")
								}
							} else {
								return null
							}
						}
						fields.push({
							name: column.name || column.dataIndex || ""
						})
					}
				}
				if (obj.items) {
					for (var index = 0, len = obj.items.length; index < len; index++) {
						var item = obj.items[index],
							editor = $("<input />");
						editorContentContainer.append(editor);
						editor[item.xtype]($.extend({}, item));
						fields.push({
							name: item.name
						})
					}
				}
				if (obj.content && obj.content != "default") {
					if (!obj.fields) {
						return
					}
					editorContentContainer.append($(obj.content).detach())
				}
				$.extend(fields, obj.fields);
				$.extend(options, {
					fields: fields
				});
				form.form(options);
				obj.pluginId = $.su.randomId("editor");
				obj.isEditor = true
			});
			me.delegate("button.btn-submit", "click", function(e) {
				e.stopPropagation();
				$("button.btn-submit").attr("disabled", true);
				var obj = me.get(0);
				if (obj.beforeSubmit) {
					var t = obj.beforeSubmit();
					if (!t) {
						$("button.btn-submit").attr("disabled", false);
						return
					}
				}
				var comboboxList = me.find("div.combobox-container");
				comboboxList.each(function(i, obj) {
					var switchBtn = $(obj);
					var wrap = switchBtn.find("div.combobox-list-wrap");
					wrap.fadeOut(500);
					wrap.attr("toggleflag", "hidden")
				});
				me.trigger("ev_submit");
				me.editor("completeEdit")
			});
			me.delegate("button.btn-cancel", "click", function(e) {
				e.stopPropagation();
				var comboboxList = me.find("div.combobox-container");
				comboboxList.each(function(i, obj) {
					var switchBtn = $(obj);
					var wrap = switchBtn.find("div.combobox-list-wrap");
					wrap.fadeOut(500);
					wrap.attr("toggleflag", "hidden")
				});
				me.editor("cancelEdit")
			});
			var grid = me.get(0).grid;
			if (!grid || grid.length == 0 || !grid.get(0).isGrid) {
				return null
			}
			grid.delegate("a.grid-content-btn.grid-content-btn-edit", "click", function(e) {
				e.preventDefault();
				e.stopPropagation();
				var btn = $(this),
					tr = btn.closest("tr.grid-content-tr");
				if (tr.hasClass("disabled") || $(this).hasClass("disabled")) {
					return
				}
				var key = btn.attr("data-key"),
					index = btn.attr("data-index"),
					editor = me;
				if (editor) {
					var editorObj = editor.get(0);
					if (editorObj && editorObj.isEditor) {
						if (editorObj.editing === false) {
							editor.editor("startEdit", key)
						} else {
							editor.editor("shake")
						}
					}
				}
			});
			me.css("display", "none");
			return me
		},
		hide: function(me) {
			var me = me || this;
			me.detach().css("display", "none");
			return me
		},
		shake: function(me) {
			var me = me || this;
			me.queue(function() {
				$(this).addClass("shaking");
				$(this).dequeue()
			});
			me.delay(80);
			me.queue(function() {
				$(this).removeClass("shaking");
				$(this).dequeue()
			});
			me.delay(80);
			me.queue(function() {
				$(this).addClass("shaking");
				$(this).dequeue()
			});
			me.delay(80);
			me.queue(function() {
				$(this).removeClass("shaking");
				$(this).dequeue()
			});
			return me
		},
		startEdit: function(me, params) {
			var me = me || this,
				obj = me.get(0),
				editingId = params[1] || "add",
				grid = me.get(0).grid,
				gridObj = grid.get(0),
				store = grid.get(0).store,
				targetTr = null,
				form = me.find("td.editor-container");
			me.editor("hide");
			form.form("setNormal");
			obj.editing = true;
			obj.editingId = editingId;
			obj.editingIndex = "add";
			if (editingId != "add") {
				var data = store.getData(editingId),
					editingIndex = store.getIndex(editingId);
				obj.editingIndex = editingIndex;
				obj.adding = false;
				form.form("reset");
				if (data) {
					form.form("loadData", data)
				} else {
					form.form("reset")
				}
				targetTr = gridObj.rows[editingIndex];
				if (targetTr) {
					targetTr.addClass("editing");
					grid.grid("disableRow", editingIndex)
				}
			} else {
				me.get(0).adding = true;
				form.form("reset");
				var dataContainer = grid.find("tbody.grid-content-data"),
					fistTr = dataContainer.find("tr.grid-content-tr").eq(0);
				if (fistTr.hasClass("empty")) {
					targetTr = fistTr
				} else {
					targetTr = me.grid("initEmptyRow");
					dataContainer.prepend(targetTr)
				}
				targetTr.addClass("editing add disabled")
			}
			me.insertAfter(targetTr);
			me.slideDown(300);
			me.trigger("ev_startEdit", [obj.editingIndex, obj.editingId]);
			return me
		},
		completeEdit: function(me, params) {
			var me = me || this,
				form = me.find("td.editor-container"),
				obj = me.get(0),
				grid = obj.grid,
				rows = grid.get(0).rows,
				listIndex = obj.editingIndex,
				store = grid.get(0).store,
				editingId = obj.editingId,
				len = rows.length,
				param = params[1] || {}, callback = params[2] || null,
				callback_failed = params[3] || null,
				callback_error = params[4] || null;
			if (form.form("validate")) {
				var dNew = form.form("serialize"),
					dOld = null;
				grid.grid("runProgress");
				if (editingId != "add") {
					dOld = $.extend({}, store.getData(editingId));
					delete dOld[store.keyProperty];
					store.update(editingId, {
						"old": dOld,
						"new": dNew
					}, function() {
						grid.grid("prompt", true);
						me.editor("cancelEdit");
						me.trigger("ev_editSuccess", [dNew]);
						if (callback) {
							callback.call(me)
						}
					}, function(errorcode, others, data) {
						if (callback_failed) {
							callback_failed.call(me, errorcode, others)
						}
						grid.grid("prompt", false)
					}, function() {
						grid.grid("prompt", false)
					})
				} else {
					store.insert(len, {
						"old": "add",
						"new": dNew
					}, function() {
						grid.grid("prompt", true);
						me.editor("cancelEdit");
						me.trigger("ev_editSuccess", [dNew]);
						if (callback) {
							callback.call(me)
						}
					}, function(errorcode, others, data) {
						if (callback_failed) {
							callback_failed.call(me, errorcode, others)
						}
						grid.grid("prompt", false)
					}, function() {
						grid.grid("prompt", false)
					})
					
					//add by wmk
					grid.grid("runProgress");
					grid.grid("getStore").load({}, function() {
						grid.grid("prompt", true)
					}, function() {
						grid.grid("prompt", false)
					}, function() {
						grid.grid("prompt", false)
					})
					
				}
				me.get(0).adding = false
			} else {
				$.su.loading.hide();
				setTimeout(function() {
					$("button.btn-submit").attr("disabled", false)
				}, 500)
			}
			return me
		},
		cancelEdit: function(me) {
			var me = me || this,
				obj = me.get(0),
				grid = me.get(0).grid,
				gridObj = grid.get(0),
				editingIndex = obj.editingIndex;
			var tr = null;
			if (editingIndex !== "add") {
				gridObj.rows[editingIndex].removeClass("editing");
				grid.grid("enableRow", editingIndex)
			} else {
				grid.find("tr.grid-content-tr.add").remove()
			}
			me.editor("hide");
			obj.editing = false;
			obj.editingIndex = "";
			grid.grid("updateRowNumber");
			return me
		},
		isEditing: function(me) {
			var me = me || this;
			if (me.get(0).editing) {
				return true
			} else {
				return false
			}
		},
		getEditingId: function(me) {
			var me = me || this;
			if (me.get(0).editing) {
				return me.get(0).editingId
			} else {
				return undefined
			}
		}
	});
	$.su.Widget("paging", {
		defaults: {
			numPerPage: 25
		},
		create: function(defaults, options) {
			var me = this;
			me.each(function(i, obj) {
				var tar = $(obj);
				$.extend(obj, defaults, options);
				var inHTML = '<div class="container widget-container paging-container disabled">';
				inHTML += '<div class="paging-wrap">';
				inHTML += '<a href="javascript:void(0);" class="paging-btn pageing-btn-prev" data-index="prev">';
				inHTML += '<span class="icon"></span>';
				inHTML += '<span class="text">' + $.su.CHAR.OPERATION.PREV + "</span>";
				inHTML += "</a>";
				inHTML += '<div class="num-buttons-container">';
				inHTML += "</div>";
				inHTML += '<a href="javascript:void(0);" class="paging-btn pageing-btn-next" data-index="next">';
				inHTML += '<span class="icon"></span>';
				inHTML += '<span class="text">' + $.su.CHAR.OPERATION.NEXT + "</span>";
				inHTML += "</a>";
				inHTML += "</div>";
				inHTML += "</div>";
				var bar = $(inHTML);
				bar.append(tar.addClass("hidden"));
				obj.isPaging = true
			});
			var obj = me.get(0),
				grid = obj.grid,
				editor = grid.get(0).editor;
			grid.on("ev_load ev_insert ev_remove", function(e) {
				var obj = me.get(0),
					currentPage = obj.currentPage;
				me.paging("updateBtns");
				me.paging("goToPage", currentPage)
			});
			var container = me.closest("div.paging-container");
			container.delegate("a.paging-btn-num", "click", function(e) {
				e.stopPropagation();
				e.preventDefault();
				var btn = $(this),
					pageNum = parseInt(btn.attr("data-index"), 10);
				if (btn.hasClass("disabled")) {
					return
				} else {
					if (editor && editor.editing) {
						$(editor).editor("cancelEdit")
					}
				}
				me.paging("goToPage", pageNum)
			}).delegate("a.pageing-btn-prev", "click", function(e) {
				e.stopPropagation();
				e.preventDefault();
				var btn = $(this);
				if (btn.hasClass("disabled")) {
					return
				} else {
					if (editor && editor.editing) {
						$(editor).editor("cancelEdit")
					}
					btn.addClass("disabled");
					me.paging("goPrev")
				}
			}).delegate("a.pageing-btn-next", "click", function(e) {
				e.stopPropagation();
				e.preventDefault();
				var btn = $(this);
				if ($(this).hasClass("disabled")) {
					return
				} else {
					if (editor && editor.editing) {
						$(editor).editor("cancelEdit")
					}
					btn.addClass("disabled");
					me.paging("goNext")
				}
			});
			return me
		},
		updateBtns: function(me) {
			var me = me || this,
				container = me.closest("div.paging-container"),
				btnsContainer = container.find("div.num-buttons-container"),
				obj = me.get(0),
				numPerPage = obj.numPerPage,
				currentPage = obj.currentPage,
				grid = obj.grid,
				rows = grid.get(0).rows,
				len = rows.length;
			var totalPage = Math.ceil(len / numPerPage);
			obj.totalPage = totalPage;
			if (totalPage == 0 || totalPage == 1) {
				container.addClass("disabled")
			} else {
				container.removeClass("disabled");
				var inHTML = "";
				for (var index = 0; index < totalPage; index++) {
					inHTML += '<a href="javascript:void(0);" class="paging-btn paging-btn-num pageing-btn-' + index + '" data-index="' + index + '">';
					inHTML += '<span class="icon"></span>';
					inHTML += '<span class="text">' + (index + 1) + "</span>";
					inHTML += "</a>";
					inHTML += '<span class="dots">...</span>'
				}
				btnsContainer.empty().append($(inHTML))
			}
			return me
		},
		goToPage: function(me, pageNum) {
			var me = me || this,
				container = me.closest("div.paging-container"),
				obj = me.get(0),
				grid = obj.grid,
				rows = grid.get(0).rows,
				currentPage = isNaN(pageNum[1]) ? 0 : pageNum[1],
				numPerPage = obj.numPerPage,
				totalPage = obj.totalPage;
			if (currentPage >= totalPage) {
				currentPage = 0
			}
			var btnPrev = container.find("a.paging-btn.pageing-btn-prev"),
				btnNext = container.find("a.paging-btn.pageing-btn-next"),
				btns = container.find("a.paging-btn-num"),
				dots = container.find("span.dots");
			btns.removeClass("current");
			dots.removeClass("more");
			btns.filter("[data-index=" + currentPage + "]").addClass("current");
			if (totalPage > 7) {
				var gap1 = 0 + currentPage - 2,
					gap2 = 0 + currentPage + 3 - (totalPage - 1),
					minNum = 0,
					maxNum = 0;
				if (gap1 > 0) {
					if (gap2 > 0) {
						minNum = 0 + currentPage - 2 - gap2;
						maxNum = 0 + totalPage
					} else {
						minNum = 0 + currentPage - 2;
						maxNum = 0 + currentPage + 3
					}
				} else {
					if (gap2 > 0) {
						minNum = 0;
						maxNum = 0 + totalPage
					} else {
						minNum = 0;
						maxNum = 0 + currentPage + 3 - gap1
					}
				}
				btns.addClass("hidden");
				for (var index = minNum; index < maxNum; index++) {
					btns.eq(index).removeClass("hidden")
				}
				if (gap1 > 1) {
					btns.eq(minNum).prev("span.dots").addClass("more")
				}
				if (gap2 < 0) {
					btns.eq(maxNum).next("span.dots").addClass("more")
				}
				btns.filter(":first").removeClass("hidden");
				btns.filter(":last").removeClass("hidden")
			}
			var minNum = numPerPage * currentPage,
				maxNum = minNum + numPerPage;
			grid.find("tr.grid-content-tr").css("display", "none");
			grid.find("tr.grid-content-tr.empty").css("display", "table-row");
			for (var index = minNum; index < maxNum; index++) {
				var row = rows[index];
				if (row) {
					row.fadeIn(150, function() {
						$(this).css("display", "table-row")
					})
				}
			}
			setTimeout(function() {
				if (currentPage == 0) {
					btnPrev.addClass("disabled");
					btnNext.removeClass("disabled")
				} else {
					if (currentPage >= (totalPage - 1)) {
						btnPrev.removeClass("disabled");
						btnNext.addClass("disabled")
					} else {
						btnPrev.removeClass("disabled");
						btnNext.removeClass("disabled")
					}
				}
			}, 180);
			obj.currentPage = currentPage;
			return me
		},
		goPrev: function(me) {
			var me = me || this,
				obj = me.get(0),
				currentPage = obj.currentPage;
			currentPage--;
			if (currentPage < 0) {
				return me
			} else {
				me.paging("goToPage", currentPage)
			}
			return me
		},
		goNext: function(me) {
			var me = me || this,
				obj = me.get(0),
				currentPage = obj.currentPage,
				totalPage = obj.totalPage;
			currentPage++;
			if (currentPage >= totalPage) {
				return me
			} else {
				me.paging("goToPage", currentPage)
			}
			return me
		}
	});
	$.su.Widget("form", {
		defaults: {
			fields: [],
			proxy: null,
			formEnctype: "application/x-www-form-urlencoded",
			traditional: false,
			hiddenFrame: false,
			submitBtn: null,
			autoLoad: true,
			showPrompt: true,
			showPromptSuccess: true,
			showPromptFail: true,
			promptTextSuccessed: $.su.CHAR.OPERATION.FORM_SAVED,
			promptTextFailed: $.su.CHAR.OPERATION.FORM_FAILED,
			cls: ""
		},
		create: function(defaults, options) {
			var me = this;
			me.each(function(i, obj) {
				var tar = $(obj).addClass("form-panel");
				$.extend(obj, defaults, options);
				obj.id = obj.id || $.su.randomId("form");
				var proxy = obj.proxy;
				if (proxy) {
					if (!proxy.isProxy) {
						proxy = new $.su.Proxy(proxy)
					}
					obj.proxy = proxy
				}
				var method = "POST",
					action = "",
					target = obj.hiddenFrame ? "_" + obj.id + "_iframe" : "_self";
				if (obj.proxy) {
					method = obj.proxy.writer.type;
					action = obj.proxy.writer.url
				}
				if (!tar.is("form")) {
					var form = $('<form enctype="' + obj.formEnctype + '" method="' + method + '" action="' + action + '" target="' + target + '"></form>');
					form.append(tar.children().detach());
					tar.append(form)
				} else {
					tar.attr("enctype", obj.formEnctype);
					tar.attr("method", method);
					tar.attr("action", action);
					tar.attr("target", target)
				}
				tar.addClass(obj.cls);
				if (obj.hiddenFrame) {
					var iframe = $('<iframe id="' + target + '" name="' + target + '" class="hidden"></iframe>');
					iframe.insertAfter(tar)
				}
				var inHTML = "";
				if (obj.submitBtn) {
					inHTML += '<div class="form-submit button-container submit">';
					inHTML += '<div class="form-submit-wrap"></div>';
					inHTML += '<span class="form-error-tips error"></span>';
					inHTML += '<span class="loading"></span>';
					inHTML += "</div>"
				}
				inHTML += '<div class="form-prompt successed">';
				inHTML += '<div class="bg"></div>';
				inHTML += '<div class="content">';
				inHTML += '<span class="icon"></span>';
				inHTML += '<span class="text text-successed">' + obj.promptTextSuccessed + "</span>";
				inHTML += '<span class="text text-failed">' + obj.promptTextFailed + "</span>";
				inHTML += "</div>";
				inHTML += "</div>";
				var formPrompt = $(inHTML);
				tar.append(formPrompt);
				obj.isForm = true;
				if (obj.isPanel) {
					obj.isFormPanel = true
				}
				if (obj.autoLoad) {
					tar.form("load")
				}
				if (obj.submitBtn) {
					var type = $.type(obj.submitBtn),
						submitBtn = null;
					if (type === "string") {
						if (obj.submitBtn === "default") {
							submitBtn = $('<button type="button"></button>').button({
								text: $.su.CHAR.OPERATION.SAVE,
								cls: "submit",
								handler: function(e) {
									if (!me.form("validate")) {
										return false
									}
									$.su.loading.show();
									me.form("submit", {}, function() {
										$.su.loading.hide();
										if (obj.callback) {
											obj.callback()
										}
									}, function() {
										$.su.loading.hide()
									}, function() {
										$.su.loading.hide()
									})
								}
							})
						} else {
							if (obj.submitBtn.charAt(0) === "#" || obj.submitBtn.charAt(0) === ".") {
								submitBtn = $(obj.submitBtn);
								if (submitBtn.length == 0) {}
							} else {
								submitBtn = $('<button type="button"></button>').button({
									text: obj.submitBtn,
									cls: "submit",
									handler: function(e) {
										me.form("submit", {}, obj.callback)
									}
								})
							}
						}
					} else {
						if (obj.submitBtn.isButton) {
							submitBtn = $(obj.submitBtn)
						} else {}
					}
					obj.submitBtn = submitBtn.get(0);
					if (obj.submitBtn && obj.submitBtn.isButton) {
						tar.find("div.form-submit-wrap").append(submitBtn.button("getContainer"))
					} else {
						tar.find("div.form-submit-wrap").append(submitBtn)
					}
				}
			});
			var proxy = null;
			if (me.get(0) && $(me.get(0).proxy)) {
				proxy = $(me.get(0).proxy)
			}
			if (!proxy) {
				return me
			}
			proxy.on("ev_read", function(e, result, status, xhr) {
				me.form("loadData", result)
			}).on("ev_write", function(e, result, status, xhr) {
				me.form("loadData", result)
			}).on("ev_failed", function(e, errorcode, others, data) {
				me.form("hideLoading");
				me.trigger("ev_failed", [me, errorcode, others, data])
			});
			me.on("ev_validatechange", function(e, result, fg) {
				e.stopPropagation();
				if (result == true) {
					me.form("setNormal")
				}
			});
			return me
		},
		validate: function(me) {
			var me = me || this,
				obj = me.get(0),
				fields = obj.fields,
				result = true,
				fg = null;
			me.form("setNormal");
			$("div.widget-error-tips").css("display", "none");
			for (var index = 0; index < fields.length; index++) {
				var field = fields[index];
				if (field) {
					var name = field.name,
						mapping = field.mapping || name;
					if (name) {
						var input = me.find("[name=" + name + "]");
						if (input.length != 0) {
							var xtype = input.get(0).xtype;
							if (xtype) {
								if (!input[xtype]("getContainer").hasClass("disabled") && (!input.prop("disabled") || xtype == "combobox")) {
									if (input[xtype]("validate")) {
										var inputObj = input.get(0);
										var v = input[xtype]("getValue");
										if (inputObj.textFormat) {
											input[xtype]("setValue", inputObj.textFormat(v))
										}
										continue
									} else {
										result = false;
										fg = input.attr("id");
										break
									}
								}
							}
						}
					}
				}
			}
			if (result) {
				if (obj.validator && $.type(obj.validator) === "function") {
					result = obj.validator.call(me);
					if (!result) {
						me.find("div.error input.text-text").each(function(i, errorObj) {
							var errorContainer = $(errorObj).closest("div");
							errorContainer.delegate("input.text-text", "click", function(e) {
								e.stopPropagation();
								me.find(".form-error-tips").css("display", "none")
							})
						})
					}
					fg = "validator"
				}
			}
			me.trigger("ev_validatechange", [result, fg]);
			return result
		},
		doSubmit: function(me, params) {
			var me = me || this,
				obj = me.get(0),
				form = me.is("form") ? me : me.find("form");
			var traditional = obj.traditional,
				proxy = me.form("getProxy"),
				param = params[1] || {}, callback = params[2] || function() {}, callback_failed = params[3] || function() {}, callback_error = params[4] || function() {}, showPrompt = (params[5] !== undefined) ? params[5] : obj.showPrompt;
			if (traditional) {
				var input = null;
				for (var index in param) {
					input = form.find("[name=" + index + "]");
					if (input.length) {
						input.val(param[index])
					} else {
						input = $('<input type="hidden" class="hidden" name="' + index + '" value="' + param[index] + '"/>');
						form.append(input)
					}
				}
				form.submit();
				var iframe = $("#" + $(form).attr("target"));
				var form_id = $(form).attr("target");
				iframe.one("load", function() {
					var doc;
					doc = document.getElementById(form_id).contentDocument;
					doc = $($(doc).find("body")).text();
					if (proxy) {
						var data = doc == "" ? "" : $.su.json.parseJSON(doc);
						if (typeof(data) == "object") {
							if ("0" == data.error_code || 0 == data.error_code) {
								callback.call(me, data)
							} else {
								if ($.su.app && $.su.app.errorOperation && $.su.app.errorOperation.denied) {
									$.su.app.errorOperation.denied(parseInt(data.error_code))
								}
								callback_failed.call(me, data.error_code)
							}
						} else {
							callback_error.call(me, data.error_code)
						}
					}
				});
				return
			}
			me.form("showLoading");
			var data = me.form("serialize");
			if (proxy) {
				proxy.write($.extend({
					"params": data
				}, param), function(data, others, status, xhr) {
					me.form("hideLoading");
					if (showPrompt) {
						me.form("prompt", true)
					}
					if (callback) {
						callback.call(me, data, others, status, xhr)
					}
				}, function(errorcode, others, data) {
					me.form("hideLoading");
					if (callback_failed) {
						callback_failed.call(me, errorcode, others, data)
					}
				}, function(xhr, status, type) {
					me.form("hideLoading");
					if (showPrompt) {
						me.form("prompt", false, $.su.CHAR.OPERATION.FORM_AJAX_FAILED)
					}
					if (callback_error) {
						callback_error.call(me, xhr, status, type)
					}
				})
			}
		},
		submit: function(me, params) {
			var me = me || this,
				obj = me.get(0),
				form = me.is("form") ? me : me.find("form"),
				traditional = obj.traditional,
				proxy = me.form("getProxy"),
				param = params[1] || {}, callback = params[2] || null,
				callback_failed = params[3] || null,
				callback_error = params[4] || null,
				showPrompt = (params[5] !== undefined) ? params[5] : obj.showPrompt,
				doValidate = params[6] === false ? false : true;
			if (doValidate !== false) {
				if (!me.form("validate")) {
					return false
				}
			}
			me.form("doSubmit", param, callback, callback_failed, callback_error, showPrompt, doValidate)
		},
		load: function(me, params) {
			var me = me || this;
			var proxy = me.get(0).proxy;
			if (proxy) {
				proxy.read()
			}
		},
		loadData: function(me, params) {
			var me = me || this,
				data = params[1] || [],
				fields = me.get(0).fields;
			me.trigger("ev_beforeLoadData", data);
			me.data("data", data);
			for (var index = 0; index < fields.length; index++) {
				var field = fields[index];
				if (field) {
					var name = field.name,
						mapping = field.mapping || name;
					if (name) {
						var obj = me.find("[name=" + name + "]");
						if (obj.length != 0) {
							var xtype = obj.get(0).xtype;
							if (xtype) {
								var dd = data[mapping];
								if (dd !== undefined) {
									obj[xtype]("setValue", dd)
								} else {
									continue
								}
							}
						}
					}
				}
			}
			me.trigger("ev_loadData", data)
		},
		getProxy: function(me) {
			var me = me || this,
				proxy = me.get(0).proxy;
			if (proxy && proxy.isProxy) {
				return proxy
			} else {
				return null
			}
		},
		serialize: function(me) {
			var me = me || this,
				form = me.is("form") ? me : me.find("form");
			var serializeArray = form.serializeArray(),
				params = {};
			for (var index = 0; index < serializeArray.length; index++) {
				var serializeObj = serializeArray[index],
					name = serializeObj.name,
					value = serializeObj.value;
				if($.su.ISIE8 && (typeof value == "string")){
					value = value.replace(/\"/g, "\\\"");
				}
				if (!params[name]) {
					params[name] = value
				} else {
					if ($.isArray(params[name])) {
						params[name].push(value)
					} else {
						params[name] = [params[name]];
						params[name].push(value)
					}
				}
			}
			return params
		},
		reset: function(me) {
			var me = me || this,
				obj = me.get(0),
				fields = obj.fields;
			for (var index = 0; index < fields.length; index++) {
				var field = fields[index];
				if (field) {
					var name = field.name,
						mapping = field.mapping || name;
					if (name) {
						var input = me.find("[name=" + name + "]");
						if (input.length != 0) {
							var xtype = input.get(0).xtype;
							if (xtype) {
								input[xtype]("reset")
							}
						}
					}
				}
			}
			me.trigger("ev_reset");
			return me
		},
		prompt: function(me, params) {
			var me = me || this,
				obj = me.get(0),
				buttonContainer = me.find("div.form-submit"),
				showPrompt = me.get(0).showPrompt,
				showPromptSuccess = me.get(0).showPromptSuccess,
				showPromptFail = me.get(0).showPromptFail,
				successed = params[1],
				text = params[2],
				time = params[3] || 900,
				formPrompt = me.find("div.form-prompt");
			var pH = formPrompt.outerHeight(),
				pW = formPrompt.outerWidth(),
				fH = me.innerHeight() - buttonContainer.height(),
				fW = me.innerWidth() - buttonContainer.height();
			var l = parseInt((fW - pW) / 2, 10);
			var t = parseInt((fH - pH) / 2, 10);
			formPrompt.css({
				left: l,
				top: t
			});
			if (successed) {
				if (showPromptSuccess) {
					formPrompt.removeClass("failed").addClass("successed");
					text = text || obj.promptTextSuccessed;
					formPrompt.find("span.text-successed").html(text);
					formPrompt.fadeIn("150", function() {
						setTimeout(function() {
							formPrompt.fadeOut("150")
						}, time)
					})
				}
			} else {
				if (showPromptFail) {
					formPrompt.removeClass("successed").addClass("failed");
					text = text || obj.promptTextFailed;
					formPrompt.find("span.text-failed").html(text);
					formPrompt.fadeIn("150", function() {
						setTimeout(function() {
							formPrompt.fadeOut("150")
						}, time)
					})
				}
			}
			return me
		},
		setPrompt: function(me, params) {
			var me = me || this,
				obj = me.get(0);
			obj.showPrompt = params[1];
			return me
		},
		getContainer: function(me) {
			var me = me || this;
			return me
		},
		setError: function(me, tips) {
			var me = me || this;
			var tips = tips[1];
			if (tips) {
				var tipContaienr = me.find("span.form-error-tips");
				tipContaienr.html(tips).fadeIn(150)
			}
			return me
		},
		setNormal: function(me) {
			var me = me || this,
				obj = me.get(0),
				fields = obj.fields;
			for (var index = 0; index < fields.length; index++) {
				var field = fields[index];
				if (field) {
					var name = field.name,
						mapping = field.mapping || name;
					if (name) {
						var input = me.find("[name=" + name + "]");
						if (input.length != 0) {
							var xtype = input.get(0).xtype;
							if (xtype) {
								input[xtype]("setNormal")
							}
						}
					}
				}
			}
			var tipContaienr = me.find("span.form-error-tips");
			tipContaienr.css("display", "none");
			return me
		},
		showLoading: function(me) {
			var me = me || this,
				obj = me.get(0),
				submitBtn = $(obj.submitBtn);
			submitBtn.button("disable");
			return me
		},
		hideLoading: function(me) {
			var me = me || this,
				obj = me.get(0),
				submitBtn = $(obj.submitBtn);
			submitBtn.button("enable");
			return me
		},
		enable: function(me, callback) {
			var me = me || this,
				obj = me.get(0),
				submitBtn = $(obj.submitBtn),
				fields = obj.fields,
				callback = callback[1];
			for (var index = 0, len = fields.length; index < len; index++) {
				var field = fields[index];
				if (field) {
					var name = field["name"];
					var tar = me.find('[name="' + name + '"]');
					if (tar.length > 0) {
						var xtype = tar.get(0).xtype;
						if (xtype && (tar.prop("inFront") != "no")) {
							tar[xtype]("enable")
						}
					}
				}
			}
			if (submitBtn.length > 0) {
				submitBtn.button("enable")
			}
			if (callback) {
				callback.call(me)
			}
			return me
		},
		disable: function(me, callback) {
			var me = me || this,
				obj = me.get(0),
				submitBtn = $(obj.submitBtn),
				fields = obj.fields,
				callback = callback[1];
			for (var index = 0, len = fields.length; index < len; index++) {
				var field = fields[index];
				if (field) {
					var name = field["name"];
					var tar = me.find('[name="' + name + '"]');
					if (tar.length > 0) {
						var xtype = tar.get(0).xtype;
						if (xtype && (tar.prop("inFront") != "no")) {
							tar[xtype]("disable")
						}
					}
				}
			}
			if (submitBtn.length > 0) {
				submitBtn.button("disable")
			}
			if (callback) {
				callback.call(me)
			}
			return me
		}
	});
	$.su.Widget("fieldset", {
		defaults: {
			_title: "",
			fields: null
		},
		create: function(defaults, options) {
			var me = this;
			me.each(function(i, obj) {
				var tar = $(obj);
				$.extend(obj, defaults, options);
				tar.addClass("container widget-container filedset-container")
			});
			return me
		},
		hide: function(me, callback) {
			var me = me || this,
				obj = me.get(0),
				fields = obj.fields,
				callback = callback[1];
			for (var index = 0, len = fields.length; index < len; index++) {
				var field = fields[index];
				if (field) {
					var name = field["name"];
					var tar = me.find('[name="' + name + '"]');
					tar.prop("inFront", "no")
				}
			}
			me.fieldset("disable");
			me.css("display", "none");
			if (callback) {
				callback.call(me)
			}
			return me
		},
		show: function(me, callback) {
			var me = me || this,
				obj = me.get(0),
				fields = obj.fields,
				callback = callback[1];
			for (var index = 0, len = fields.length; index < len; index++) {
				var field = fields[index],
					name = field.name;
				var tar = me.find('[name="' + name + '"]');
				tar.prop("inFront", "yes")
			}
			me.fieldset("enable");
			me.fadeIn(200, callback);
			return me
		},
		disable: function(me, callback) {
			var me = me || this,
				obj = me.get(0),
				fields = obj.fields,
				callback = callback[1];
			for (var index = 0, len = fields.length; index < len; index++) {
				var field = fields[index];
				if (field) {
					var name = field["name"];
					var tar = me.find('[name="' + name + '"]');
					if (tar.length > 0) {
						var xtype = tar.get(0).xtype;
						if (xtype) {
							tar[xtype]("disable")
						}
					}
				}
			}
			if (callback) {
				callback.call(me)
			}
			return me
		},
		enable: function(me, callback) {
			var me = me || this,
				obj = me.get(0),
				fields = obj.fields,
				callback = callback[1];
			for (var index = 0, len = fields.length; index < len; index++) {
				var field = fields[index];
				if (field) {
					var name = field["name"];
					var tar = me.find('[name="' + name + '"]');
					if (tar.length > 0) {
						var xtype = tar.get(0).xtype;
						if (xtype) {
							tar[xtype]("enable")
						}
					}
				}
			}
			if (callback) {
				callback.call(me)
			}
			return me
		}
	});
	$.su.Widget("combobox", {
		defaults: {
			fieldLabel: "",
			tips: "",
			cls: "",
			readOnly: true,
			noneSelectedText: $.su.CHAR.OPERATION.NOSELECTEDTEXT,
			noneSelectedRemind: false,
			multiSelect: false,
			displayField: "name",
			valueField: "value",
			items: null,
			store: null,
			isCombobox: true,
			allowBlank: true,
			alwaysTrigger: false,
			widgetName: "combobox",
			tabindex: 0
		},
		create: function(defaults, options) {
			var me = this;
			me.each(function(i, obj) {
				var target = $(obj);
				$.extend(obj, defaults, options);
				if (target.is("select")) {
					var optionObjs = target.find("option");
					obj.items = obj.items || [];
					for (var index = 0, len = optionObjs.length; index < len; index++) {
						obj.items.push({
							value: optionObjs[index].value,
							name: optionObjs[index].innerHTML,
							selected: optionObjs[index].selected ? "selected" : false
						})
					}
				}
				var inHTML = '<div class="container widget-container combobox-container ' + (obj.multiSelect ? "multiple" : "single") + " " + obj.cls + " " + (obj.className || "") + '">';
				if (this.fieldLabel !== null) {
					inHTML += '<div class="widget-fieldlabel-wrap ' + this.labelCls + '">';
					inHTML += '<label class="widget-fieldlabel combobox-fieldlabel">' + this.fieldLabel + "</label>";
					if (this.fieldLabel !== "") {
						inHTML += '<span class="widget-separator">' + this.separator + "</span>"
					}
					inHTML += "</div>"
				}
				inHTML += '<div class="widget-wrap-outer combobox-wrap-outer">';
				inHTML += '<div class="widget-wrap combobox-wrap">';
				inHTML += '<input class="combobox-text ' + obj.inputCls + '" type="text"  UNSELECTABLE ="on" tabindex="-1" ' + (this.readOnly ? 'readonly="true"' : "") + ' value="' + (this.noneSelectedRemind ? obj.noneSelectedText + '"' : '"') + " />";
				inHTML += '<input class="combobox-hidden hidden" name="' + obj.name + '" UNSELECTABLE ="on" type="checkbox" checked="true" disabled="disabled"/>';
				inHTML += '<a class="combobox-switch" href="javascript:void(0);" tabindex="' + this.tabindex + '">';
				inHTML += '<span class="icon"></span>';
				inHTML += "</a>";
				inHTML += '<div class="combobox-list-wrap auto-width">';
				inHTML += '<div class="position-top-left"></div><div class="position-top-center"></div>';
				inHTML += '<div class="position-center-left"><div class="position-center-right">';
				inHTML += '<div class="combobox-list-content-wrap">';
				inHTML += '<ul class="combobox-list">';
				inHTML += "</ul>";
				inHTML += "</div>";
				inHTML += "</div></div>";
				inHTML += '<div class="position-bottom-left"></div><div class="position-bottom-center"></div>';
				inHTML += "</div>";
				inHTML += "</div>";
				if (this.tips != null && this.tips != undefined) {
					inHTML += '<div class="widget-tips combobox-tips ' + obj.tipsCls + '">';
					inHTML += '<div class="content tips-content"></div>';
					inHTML += "</div>"
				}
				inHTML += '<div class="widget-error-tips combobox-error-tips ' + obj.errorTipsCls + '">';
				inHTML += '<span class="widget-error-tips-delta"></span>';
				inHTML += '<div class="widget-error-tips-wrap">';
				inHTML += '<div class="content error-tips-content"></div>';
				inHTML += "</div>";
				inHTML += "</div>";
				inHTML == "</div>";
				inHTML == "</div>";
				var container = $(inHTML);
				target.replaceWith(container);
				container.prepend(target.addClass("hidden combobox-value").prop("disabled", true));
				me.combobox("setText")
			});
			var container = null;
			if (me.hasClass("div.combobox-container")) {
				container = me
			} else {
				container = me.closest("div.combobox-container")
			}
			container.delegate("a.combobox-switch", "click", function(e) {
				e.stopPropagation();
				var switchBtn = $(this),
					wrap = switchBtn.next("div.combobox-list-wrap"),
					container = switchBtn.closest("div.combobox-container"),
					toggleFlag = wrap.attr("toggleflag") || "hidden";
				if (container.hasClass("disabled") || container.hasClass("none-items")) {
					return false
				}
				container.removeClass("error");
				$("div.combobox-list-wrap").hide().attr("toggleflag", "hidden");
				if (toggleFlag === "hidden") {
					container.addClass("focus");
					wrap.slideDown(150);
					wrap.attr("toggleflag", "shown")
				} else {
					container.removeClass("focus");
					wrap.hide();
					wrap.attr("toggleflag", "hidden")
				}
				$("div.widget-error-tips.show").css("display", "none")
			}).delegate("label.combobox-label", "click", function(e) {
				e.stopPropagation();
				e.preventDefault();
				var label = $(this),
					li = label.closest("li.combobox-list"),
					container = label.closest("div.combobox-container"),
					selectType = label.attr("type"),
					input = label.find("input.combobox-checkbox"),
					value = input.val(),
					vOld = me.combobox("getValue"),
					vNew = [];
				if (li.hasClass("disabled")) {
					return
				}
				switch (selectType) {
					case "multiple":
						var checked = input.prop("checked");
						if (checked) {
							for (var index = vOld.length - 1; index >= 0; index--) {
								if (vOld[index] == value) {
									vOld.splice(index, 1);
									break
								}
							}
						} else {
							vOld.push(value)
						}
						me.combobox("select", vOld);
						break;
					case "single":
						vNew.push(value);
						me.combobox("select", vNew);
						var listWrap = label.parents("div.combobox-list-wrap");
						listWrap.hide().attr("toggleflag", "hidden");
						break
				}
				container.addClass("selected");
				container.removeClass("focus");
				$(this).combobox("validate");
				me.trigger("ev_click", [vOld, vNew])
			});
			container.delegate("input.combobox-text", "click", function(e) {
				e.stopPropagation();
				e.preventDefault();
				container.find("a.combobox-switch").trigger("click")
			}).delegate("input.combobox-text", "focus", function(e) {
				if (container.hasClass("disabled") || container.hasClass("none-items")) {
					return
				}
				$(this).combobox("setFocus")
			}).delegate("input.combobox-text", "keydown", function() {
				var value = container.find("input.combobox-text").val();
				var checkboxs = container.find("input.combobox-checkbox");
				var selectFlag = false;
				checkboxs.each(function(i, obj) {
					if ($(obj).attr("display") == value) {
						selectFlag = true;
						return false
					}
				});
				if (!selectFlag) {
					container.find("input.combobox-hidden").prop("disabled", false);
					container.find("li").removeClass("selected");
					checkboxs.prop("checked", false)
				} else {
					container.find("input.combobox-hidden").prop("disabled", true)
				}
			}).delegate("input.combobox-text", "keyup blur", function(e) {
				if (container.hasClass("disabled") || container.hasClass("none-items")) {
					return
				}
			}).delegate("input.combobox-value", "ev_validatechange", function(e, isvalid) {
				e.stopPropagation();
				if (isvalid) {
					$(this).combobox("setNormal")
				} else {
					$(this).combobox("setError")
				}
			});
			var items = me.get(0).items;
			me.combobox("loadData", items);
			me.combobox("setTips", options.tips);
			me.combobox("setErrorTips", "");
			return me
		},
		getSelectedIndex: function(me) {
			var items = me.get(0).items;
			var value = me.combobox("getValue");
			var len = items.length;
			for (var index = 0; index < len; index++) {
				if (value[0] === items[index].value) {
					return index
				}
			}
			return -1
		},
		loadData: function(me, items) {
			var me = me || this,
				obj = me.get(0),
				container = me.combobox("getContainer"),
				items = items[1];
			container.find("ul.combobox-list").empty();
			if (!$.isArray(items)) {
				items = []
			}
			obj.items = items;
			for (var index = 0, len = items.length; index < len; index++) {
				if (items[index]) {
					me.combobox("initItem", items[index])
				}
			}
			if (items.length == 0) {
				container.addClass("none-items")
			} else {
				container.removeClass("none-items")
			}
			return me
		},
		initItem: function(me, itemProperty) {
			var me = me || this,
				container = me.closest("div.combobox-container"),
				obj = me.get(0),
				item = itemProperty[1];
			var _selectType = obj.multiSelect == true ? "multiple" : "single",
				_inputId = obj.id + "-" + $.su.randomId("option"),
				_display = item[obj.displayField],
				_value = item[obj.valueField],
				_disabled = item["disabled"] ? true : false,
				_checked = item.selected ? true : false,
				_cls = item.cls || "";
			if (!item.isLine) {
				item.isLine = false
			}
			var lists = "";
			if (item.isLine) {
				lists += '<li class="combobox-list disabled">';
				lists += "<div>--------------------------</div>";
				lists += "</li>"
			} else {
				lists += '<li class="combobox-list ' + _cls + " " + (_disabled ? "disabled" : "") + " " + (_checked ? "selected" : "") + '">';
				lists += '<label for="' + _inputId + '" type="' + _selectType + '" class="combobox-label ' + _selectType + '">';
				lists += '<input id="' + _inputId + '" name="' + obj.name + '" display="' + _display + '" class="combobox-checkbox" type="checkbox" value="' + _value + '"' + (_checked ? ' checked="checked"' : "") + " " + (_disabled ? 'disabled="disabled"' : "") + " />";
				lists += '<span class="icon"></span>';
				lists += '<span class="text">' + _display + "</span>";
				lists += "</label>";
				lists += "</li>"
			}
			container.find("ul.combobox-list").append($(lists));
			if (me.is("select")) {
				me.append('<option value="' + _value + '">' + _display + "</option>")
			}
			if ( !! _checked) {
				this.get(0).defaultValue = item.value
			}
			me.combobox("setText")
		},
		getItem: function(me, value) {
			var me = me || this,
				obj = me.get(0),
				value = value[1];
			var items = obj.items;
			var item = null;
			if (typeof value == "undefined") {
				return items
			}
			for (var index = 0, len = items.length; index < len; index++) {
				if (items[index]["value"] == value) {
					item = items[index];
					break
				}
			}
			return item
		},
		setText: function(me, arguments) {
			var me = me || this,
				container = me.combobox("getContainer"),
				optionItems = container.find("input.combobox-checkbox"),
				textBox = container.find("input.combobox-text");
			var _value = me.combobox("getValue"),
				_valueType = $.type(_value),
				text = "";
			if (_valueType === "array") {
				for (var index = 0; index < _value.length; index++) {
					var _name = optionItems.filter("[value='" + _value[index] + "']").attr("display");
					text = text + _name + ",\x20"
				}
				text = text.slice(0, text.length - 2)
			} else {
				if (_valueType === "string") {
					var _name = optionItems.filter("[value='" + _value[index] + "']").attr("display");
					text = _name
				}
			} if (text == "") {
				textBox.val(me.get(0).noneSelectedText)
			} else {
				textBox.val(text)
			}
			return me
		},
		getSelectedText: function(me) {
			var me = me || this,
				container = me.closest("div.combobox-container"),
				textBox = container.find("input.combobox-text");
			return textBox.val()
		},
		setValue: function(me, value) {
			var me = me || this,
				container = me.combobox("getContainer"),
				checkboxs = container.find("input.combobox-checkbox"),
				value = value[1];
			if (!$.isArray(value)) {
				value = [value]
			}
			var valueObj = {};
			for (var index = 0; index < value.length; index++) {
				valueObj[value[index]] = true
			}
			var noSelectflag = true;
			checkboxs.each(function(i, obj) {
				var checkbox = $(obj);
				if (checkbox.val() in valueObj) {
					noSelectflag = false;
					return false
				}
			});
			if (noSelectflag) {
				var input = container.find("input.combobox-text");
				me.get(0).noneSelectedRemind ? input.val(me.get(0).noneSelectedText) : input.val(value);
				me.combobox("select", value)
			} else {
				me.combobox("select", value)
			}
			return me
		},
		getValue: function(me) {
			var me = me || this,
				container = me.combobox("getContainer"),
				checkboxs = container.find("input.combobox-checkbox");
			var result = [];
			checkboxs.each(function(i, obj) {
				if (obj.checked) {
					result.push($(obj).val())
				}
			});
			if (result.length == 0 && me.get(0).readOnly == false) {
				var input = container.find("input.combobox-text");
				result = [input.val()]
			}
			return result
		},
		disable: function(me) {
			var me = me || this,
				container = me.combobox("getContainer");
			container.addClass("disabled");
			container.find("div.widget-wrap.combobox-wrap").addClass("disabled");
			container.find("input.combobox-text").attr("disabled", true);
			container.find("input.combobox-checkbox").prop("disabled", true);
			return me
		},
		enable: function(me) {
			var me = me || this,
				container = me.combobox("getContainer");
			container.removeClass("disabled");
			container.find("div.widget-wrap.combobox-wrap").removeClass("disabled");
			container.find("input.combobox-text").removeAttr("disabled");
			container.find("input.combobox-checkbox").prop("disabled", false);
			return me
		},
		disableStyle: function(me) {
			var me = me || this,
				container = me.combobox("getContainer");
			if (container) {
				container.addClass("disabled");
				container.find("div.widget-wrap.combobox-wrap").addClass("disabled")
			}
			return me
		},
		enableStyle: function(me) {
			var me = me || this,
				container = me.combobox("getContainer");
			if (container) {
				container.removeClass("disabled");
				container.find("div.widget-wrap.combobox-wrap").removeClass("disabled")
			}
			return me
		},
		autoWidth: function(me){
			var me = me || this,
				container = me.combobox("getContainer");
			container.find("div.combobox-list-wrap").addClass("auto-width");
		},
		disableAutoWidth: function(me){
			var me = me || this,
				container = me.combobox("getContainer");
			container.find("div.combobox-list-wrap").removeClass("auto-width");
		},
		disableItem: function(me, valueArray) {
			var me = me || this,
				container = me.combobox("getContainer"),
				checkboxs = container.find("input.combobox-checkbox"),
				valueArray = valueArray[1];
			if ($.type(valueArray) === "string") {
				valueArray = [valueArray]
			}
			var valueObj = (function() {
				var valueObj = {};
				for (var index = 0; index < valueArray.length; index++) {
					valueObj[valueArray[index]] = true
				}
				return valueObj
			})();
			checkboxs.each(function(i, obj) {
				var tar = $(obj);
				if (tar.val() in valueObj) {
					tar.closest("li.combobox-list").addClass("disabled");
					tar.attr("disabled", true)
				}
			});
			me.combobox("setText");
			return me
		},
		hideItem: function(me, valueArray) {
			var me = me || this,
				container = me.combobox("getContainer"),
				checkboxs = container.find("input.combobox-checkbox"),
				valueArray = valueArray[1];
			if ($.type(valueArray) === "string") {
				valueArray = [valueArray]
			}
			var valueObj = (function() {
				var valueObj = {};
				for (var index = 0; index < valueArray.length; index++) {
					valueObj[valueArray[index]] = true
				}
				return valueObj
			})();
			checkboxs.each(function(i, obj) {
				var tar = $(obj);
				if (tar.val() in valueObj) {
					tar.closest("li.combobox-list").addClass("hidden")
				}
			});
			me.combobox("setText");
			return me
		},
		showItem: function(me, valueArray) {
			var me = me || this,
				container = me.combobox("getContainer"),
				checkboxs = container.find("input.combobox-checkbox"),
				valueArray = valueArray[1];
			if ($.type(valueArray) === "string") {
				valueArray = [valueArray]
			}
			var valueObj = (function() {
				var valueObj = {};
				for (var index = 0; index < valueArray.length; index++) {
					valueObj[valueArray[index]] = true
				}
				return valueObj
			})();
			checkboxs.each(function(i, obj) {
				var tar = $(obj);
				if (tar.val() in valueObj) {
					tar.closest("li.combobox-list").removeClass("hidden")
				}
			});
			me.combobox("setText");
			return me
		},
		enableItem: function(me, valueArray) {
			var me = me || this,
				container = me.combobox("getContainer"),
				checkboxs = container.find("input.combobox-checkbox"),
				valueArray = valueArray[1];
			if ($.type(valueArray) === "string") {
				valueArray = [valueArray]
			}
			var valueObj = (function() {
				var valueObj = {};
				for (var index = 0; index < valueArray.length; index++) {
					valueObj[valueArray[index]] = true
				}
				return valueObj
			})();
			checkboxs.each(function(i, obj) {
				var tar = $(obj);
				if (tar.val() in valueObj) {
					tar.closest("li.combobox-list").removeClass("disabled");
					tar.attr("disabled", false)
				}
			});
			me.combobox("setText");
			return me
		},
		select: function(me, valueArray) {
			var me = me || this,
				obj = me.get(0),
				container = me.combobox("getContainer"),
				checkboxs = container.find("input.combobox-checkbox"),
				valueArray = valueArray[1];
			var vOld = me.combobox("getValue").sort();
			if ($.type(valueArray) === "string") {
				valueArray = [valueArray]
			}
			if (obj.multiSelect) {
				var valueObj = (function() {
					var valueObj = {};
					for (var index = 0; index < valueArray.length; index++) {
						valueObj[valueArray[index]] = true
					}
					return valueObj
				})();
				checkboxs.each(function(i, obj) {
					var tar = $(obj);
					if (tar.val() in valueObj) {
						tar.closest("li.combobox-list").addClass("selected");
						obj.checked = true
					} else {
						tar.closest("li.combobox-list").removeClass("selected");
						obj.checked = false
					}
				})
			} else {
				if (valueArray.length > 0) {
					valueArray = valueArray[0]
				}
				checkboxs.each(function(i, obj) {
					var tar = $(obj);
					if (tar.val() == valueArray) {
						tar.closest("li.combobox-list").addClass("selected");
						obj.checked = true
					} else {
						tar.closest("li.combobox-list").removeClass("selected");
						obj.checked = false
					}
				})
			}
			var vNew = me.combobox("getValue").sort();
			if (obj.alwaysTrigger || vOld.toString() != vNew.toString()) {
				me.trigger("ev_change", [vOld, vNew])
			}
			me.combobox("setText").val(vNew);
			return me
		},
		validate: function(me) {
			var me = me || this,
				tar = me.get(0),
				value = me.combobox("getValue"),
				result = true;
			if (value == "") {
				if (!tar.allowBlank) {
					$(this).combobox("setError", "请选择项目");
					result = false
				}
			}
			if (tar.validator) {
				result = tar.validator(value);
				if ($.type(result) !== "boolean") {
					result = false
				}
			}
			$(tar).trigger("ev_validatechange", result);
			return result
		},
		reset: function(me) {
			var me = me || this,
				obj = me.get(0),
				container = me.combobox("getContainer"),
				checkboxs = container.find("input.combobox-checkbox"),
				defaultValue = obj.defaultValue;
			checkboxs.each(function(i, obj) {
				var tar = $(obj);
				tar.closest("li.combobox-list").removeClass("selected");
				obj.checked = false
			});
			me.combobox("setText");
			if (defaultValue !== undefined || defaultValue !== null) {
				me.combobox("setValue", defaultValue)
			} else {
				me.combobox("setValue", [])
			}
			return me
		},
		selectNoTrigger: function(me, valueArray) {
			var me = me || this,
				obj = me.get(0),
				container = me.combobox("getContainer"),
				checkboxs = container.find("input.combobox-checkbox"),
				valueArray = valueArray[1];
			var vOld = me.combobox("getValue").sort();
			if ($.type(valueArray) === "string") {
				valueArray = [valueArray]
			}
			if (obj.multiSelect) {
				var valueObj = (function() {
					var valueObj = {};
					for (var index = 0; index < valueArray.length; index++) {
						valueObj[valueArray[index]] = true
					}
					return valueObj
				})();
				checkboxs.each(function(i, obj) {
					var tar = $(obj);
					if (tar.val() in valueObj) {
						tar.closest("li.combobox-list").addClass("selected");
						obj.checked = true
					}
				})
			} else {
				if (valueArray.length > 0) {
					valueArray = valueArray[0]
				}
				checkboxs.each(function(i, obj) {
					var tar = $(obj);
					if (tar.val() == valueArray) {
						tar.closest("li.combobox-list").addClass("selected");
						obj.checked = true
					} else {
						tar.closest("li.combobox-list").removeClass("selected");
						obj.checked = false
					}
				})
			}
			me.combobox("setText").val(valueArray);
			return me
		}
	});
	$.su.Widget("checkbox", {
		defaults: {
			name: null,
			items: [],
			fieldLabel: null,
			alwaysTrigger: false,
			cls: "",
			columns: 1
		},
		create: function(defaults, options) {
			var me = this;
			me.each(function(i, obj) {
				var input = $(this),
					id = options.id || this.id || defaults.id,
					value = options.value || this.value || defaults.value,
					name = options.name || this.name || defaults.name;
				input.addClass("hidden");
				$.extend(this, defaults, options);
				input.attr({
					value: value,
					id: id,
					name: name
				}).val(value).addClass("checkbox");
				var inHTML = '<div class="container widget-container checkbox-group-container ' + this.cls + '">';
				if (this.fieldLabel !== null) {
					inHTML += '<div class="widget-fieldlabel-wrap ' + this.labelCls + '">';
					inHTML += '<label class="widget-fieldlabel checkbox-group-label">' + this.fieldLabel + "</label>";
					if (this.fieldLabel !== "") {
						inHTML += '<span class="widget-separator">' + this.separator + "</span>"
					}
					inHTML += "</div>"
				}
				inHTML += '<div class="widget-wrap-outer checkbox-group-wrap-outer">';
				inHTML += '<div class="checkbox-group-wrap">';
				var items = this.items,
					len = items.length,
					perColumnNum = Math.ceil(len / this.columns),
					_numFlag = 0;
				inHTML += '<ul class="checkbox-group-list-wrap">';
				for (var index = 0; index < items.length; index++) {
					if (!items[index]) {
						continue
					}
					var boxName = items[index].name || name || "",
						boxValue = items[index].inputValue || value || "",
						uncheckedValue = items[index].uncheckedValue || "",
						itemCls = items[index].itemCls || "",
						boxId = items[index].id || "checkbox-" + parseInt(Math.random() * 1000 * 1000 * 1000, 10).toString();
					var checked = "",
						disabled = "",
						checkedCls = "";
					if (items[index].checked === "checked" || items[index].checked === true) {
						checked = 'checked="checked"';
						disabled = 'disabled="disabled"';
						checkedCls = "checked";
						me.get(0).defaultValue = items[index].inputValue
					}
					var funcInitLi = function(boxName, boxValue, boxId, boxlabel) {
						inHTML += '<li class="checkbox-list">';
						inHTML += '<div class="widget-wrap">';
						inHTML += '<label class="checkbox-label ' + itemCls + " " + checkedCls + '" for="' + boxId + '">';
						inHTML += '<input class="hidden" type="hidden" name="' + boxName + '" value="' + uncheckedValue + '" data-checked="' + boxValue + '" data-unchecked="' + uncheckedValue + '" ' + disabled + " />";
						inHTML += '<input class="checkbox-checkbox" type="checkbox" name="' + boxName + '" value="' + boxValue + '" data-checked="' + boxValue + '" data-unchecked="' + uncheckedValue + '" id="' + boxId + '" ' + checked + " />";
						inHTML += '<span class="icon"></span>';
						inHTML += '<span class="text">' + items[index].boxlabel + "</span>";
						inHTML += "</label>";
						inHTML += "</div>";
						inHTML += "</li>"
					};
					if (_numFlag < perColumnNum) {
						funcInitLi(boxName, boxValue, boxId, items[index].boxlabel)
					} else {
						inHTML += "</ul>";
						inHTML += '<ul class="checkbox-group-list-wrap">';
						funcInitLi(boxName, boxValue, boxId, items[index].boxlabel);
						_numFlag = 0
					}
					_numFlag++
				}
				inHTML += "</ul>";
				inHTML += "</div>";
				if (this.tips != null && this.tips != undefined) {
					inHTML += '<div class="widget-tips textbox-tips ' + obj.tipsCls + '">';
					inHTML += '<div class="widget-tips-wrap">';
					inHTML += '<div class="content tips-content"></div>';
					inHTML += "</div>";
					inHTML += "</div>"
				}
				inHTML += '<div class="widget-error-tips textbox-error-tips ' + obj.errorTipsCls + '">';
				inHTML += '<span class="widget-error-tips-delta"></span>';
				inHTML += '<div class="widget-error-tips-wrap">';
				inHTML += '<div class="content error-tips-content"></div>';
				inHTML += "</div>";
				inHTML += "</div>";
				inHTML += "</div>";
				inHTML += "</div>";
				var container = $(inHTML);
				input.prop("disabled", true).val("").replaceWith(container);
				container.prepend(input)
			});
			var container = me.closest("div.checkbox-group-container");
			container.delegate("label.checkbox-label", "click", function(e) {
				e.preventDefault();
				var label = $(this),
					li = label.closest("li.checkbox-list");
				if (li.hasClass("disabled")) {
					return
				}
				var vOld = me.checkbox("getValue");
				label.toggleClass("checked");
				var checkbox = label.find("input[type=checkbox]").eq(0),
					unchecked = checkbox.prev("input[type=hidden]");
				if (checkbox.prop("checked")) {
					checkbox.prop("checked", false);
					checkbox.prop("disabled", true);
					unchecked.prop("disabled", false)
				} else {
					checkbox.prop("checked", true);
					checkbox.prop("disabled", false);
					unchecked.prop("disabled", true)
				}
				var vNew = me.checkbox("getValue");
				if ((me.get(0) && me.get(0).alwaysTrigger) || vNew.sort().toString() !== vOld.sort().toString()) {
					me.trigger("ev_change", [vOld, vNew])
				}
				//console.log("name", vNew, "value", me.checkbox("getValue1"));
				me.trigger("ev_click", [vNew, checkbox.val(), checkbox.prop("checked")])
			});
			me.checkbox("setTips", options.tips);
			return me
		},
		setValue: function(me, _value) {
			var me = me || this,
				vNew = _value[1],
				vOld = me.checkbox("getValue"),
				container = me.checkbox("getContainer");
			if ($.type(vNew) != "array") {
				vNew = [vNew]
			}
			container.find("input[type=checkbox]").each(function(i, obj) {
				obj.checked = false;
				obj.disabled = true
			});
			container.find("input[type=hidden]").each(function(i, obj) {
				obj.checked = false;
				obj.disabled = true
			});
			container.find("label.checkbox-label").removeClass("checked");
			for (var index = 0; index < vNew.length; index++) {
				var checkBox = container.find("input[value=" + vNew[index] + "][type=checkbox]");
				if (checkBox.length) {
					checkBox.closest("label.checkbox-label").addClass("checked");
					checkBox.get(0).checked = true;
					checkBox.get(0).disabled = false
				}
				var hiddenBox = container.find("input[value=" + vNew[index] + "][type=hidden]");
				if (hiddenBox.length) {
					hiddenBox.get(0).disabled = false;
					hiddenBox.get(0).checked = true
				}
			}
			if ((me.get(0) && me.get(0).alwaysTrigger) || vNew.sort().toString() !== vOld.sort().toString()) {
				me.trigger("ev_change", [vOld, vNew])
			}
			return me
		},
		getValue: function(me) {
			var me = me || this,
				container = me.checkbox("getContainer"),
				result = [];
			container.find("input[type=checkbox]").each(function(i, obj) {
				if (obj.checked) {
					result.push(obj.name)
				}
			});
			return result
		},
		getValue1: function(me) {
			var me = me || this,
				container = me.checkbox("getContainer"),
				result = [];
			container.find("input[type=checkbox]").each(function(i, obj) {
				if (obj.checked) {
					result.push(obj.value)
				}
			});
			return result
		},
		reset: function(me) {
			var me = me || this,
				obj = me.get(0),
				items = obj.items,
				val = [];
			if (obj.defaultValue) {
				val = obj.defaultValue
			} else {
				if (items) {
					$.each(items, function(i, o) {
						if (!o) {
							return
						}
						val.push(o["uncheckedValue"])
					})
				}
			}
			me.checkbox("setValue", val);
			return me
		},
		disable: function(me) {
			var me = me || this,
				obj = me.get(0),
				container = me.checkbox("getContainer").addClass("disabled"),
				checkboxs = container.find("input.checkbox-checkbox");
			checkboxs.each(function(i, obj) {
				var tar = $(obj);
				tar.closest("li.checkbox-list").addClass("disabled");
				tar.closest("label.checkbox-label").addClass("disabled");
				tar.prop("disabled", true)
			});
			return me
		},
		enable: function(me) {
			var me = me || this,
				obj = me.get(0),
				container = me.checkbox("getContainer").removeClass("disabled"),
				checkboxs = container.find("input.checkbox-checkbox");
			checkboxs.each(function(i, obj) {
				var tar = $(obj);
				tar.closest("li.checkbox-list").removeClass("disabled");
				tar.closest("label.checkbox-label").removeClass("disabled");
				tar.prop("disabled", false)
			});
			return me
		},
		disableAllItem: function(me) {
			var me = me || this,
				obj = me.get(0),
				container = me.checkbox("getContainer").addClass("disabled"),
				checkboxs = container.find("input.checkbox-checkbox"),
				hidden = container.find("input.hidden");
			checkboxs.each(function(i, obj) {
				var tar = $(obj);
				tar.closest("li.checkbox-list").addClass("disabled");
				tar.closest("label.checkbox-label").addClass("disabled");
				tar.prop("disabled", true)
			});
			hidden.each(function(i, obj) {
				var tar = $(obj);
				tar.closest("li.checkbox-list").addClass("disabled");
				tar.closest("label.checkbox-label").addClass("disabled");
				tar.prop("disabled", true)
			});
			return me
		},
		enableAllItem: function(me) {
			var me = me || this,
				obj = me.get(0),
				container = me.checkbox("getContainer").removeClass("disabled"),
				checkboxs = container.find("input.checkbox-checkbox"),
				hidden = container.find("input.hidden");
			checkboxs.each(function(i, obj) {
				var tar = $(obj);
				tar.closest("li.checkbox-list").removeClass("disabled");
				tar.closest("label.checkbox-label").removeClass("disabled");
				tar.prop("disabled", false)
			});
			hidden.each(function(i, obj) {
				var tar = $(obj);
				tar.closest("li.checkbox-list").removeClass("disabled");
				tar.closest("label.checkbox-label").removeClass("disabled");
				tar.prop("disabled", false)
			});
			return me
		},
		disableItem: function(me, valueArray) {
			var me = me || this,
				obj = me.get(0),
				container = me.checkbox("getContainer"),
				checkboxs = container.find("input.checkbox-checkbox"),
				valueArray = valueArray[1];
			if ($.type(valueArray) === "string") {
				valueArray = [valueArray]
			}
			var valueObj = (function() {
				var valueObj = {};
				for (var index = 0; index < valueArray.length; index++) {
					valueObj[valueArray[index]] = true
				}
				return valueObj
			})();
			checkboxs.each(function(i, obj) {
				var tar = $(obj);
				if (tar.val() in valueObj) {
					tar.closest("li.checkbox-list").addClass("disabled");
					tar.closest("label.checkbox-label").addClass("disabled");
					tar.prev("input[type=hidden]").prop("disabled", true);
					tar.prop("disabled", true)
				}
			});
			return me
		},
		enableItem: function(me, valueArray) {
			var me = me || this,
				obj = me.get(0),
				container = me.checkbox("getContainer"),
				checkboxs = container.find("input.checkbox-checkbox"),
				valueArray = valueArray[1];
			if ($.type(valueArray) === "string") {
				valueArray = [valueArray]
			}
			var valueObj = (function() {
				var valueObj = {};
				for (var index = 0; index < valueArray.length; index++) {
					valueObj[valueArray[index]] = true
				}
				return valueObj
			})();
			checkboxs.each(function(i, obj) {
				var tar = $(obj);
				if (tar.val() in valueObj) {
					tar.closest("li.checkbox-list").removeClass("disabled");
					tar.closest("label.checkbox-label").removeClass("disabled");
					tar.prev("input[type=hidden]").prop("disabled", false);
					tar.prop("disabled", false)
				}
			});
			return me
		},
		getContainer: function(me) {
			var me = me || this;
			return me.closest("div.checkbox-group-container")
		}
	});
	$.su.Widget("radio", {
		defaults: {
			name: null,
			items: [],
			fieldLable: null,
			cls: "",
			fieldLabel: "",
			columns: 1
		},
		create: function(defaults, options) {
			var me = this;
			me.each(function(i, obj) {
				var input = $(this);
				var id = options.id || this.id || defaults.id,
					value = options.value || input.val() || this.value || defaults.value,
					name = options.name || this.name || defaults.name;
				input.addClass("hidden");
				$.extend(this, defaults, options);
				input.attr({
					value: value,
					id: id,
					name: name
				}).val(value).addClass("radio-value");
				var inHTML = '<div class="container widget-container radio-group-container ' + this.cls + '">';
				if (this.fieldLabel !== null) {
					inHTML += '<div class="widget-fieldlabel-wrap ' + this.labelCls + '">';
					inHTML += '<label class="widget-fieldlabel radio-group-fieldlabel">' + this.fieldLabel + "</label>";
					if (this.fieldLabel !== "") {
						inHTML += '<span class="widget-separator">' + this.separator + "</span>"
					}
					inHTML += "</div>"
				}
				inHTML += '<div class="widget-wrap-outer radio-group-wrap-outer">';
				inHTML += '<div class="radio-group-wrap">';
				inHTML += "</div>";
				if (this.tips != null && this.tips != undefined) {
					inHTML += '<div class="widget-tips textbox-tips ' + obj.tipsCls + '">';
					inHTML += '<div class="widget-tips-wrap">';
					inHTML += '<div class="content tips-content"></div>';
					inHTML += "</div>";
					inHTML += "</div>"
				}
				inHTML += '<div class="widget-error-tips textbox-error-tips ' + obj.errorTipsCls + '">';
				inHTML += '<span class="widget-error-tips-delta"></span>';
				inHTML += '<div class="widget-error-tips-wrap">';
				inHTML += '<div class="content error-tips-content"></div>';
				inHTML += "</div>";
				inHTML += "</div>";
				inHTML += "</div>";
				inHTML += "</div>";
				var container = $(inHTML);
				input.attr("disabled", true).replaceWith(container);
				container.prepend(input)
			});
			var container = me.closest("div.radio-group-container");
			container.delegate("label.radio-label", "click", function(e) {
				e.preventDefault();
				var label = $(this),
					li = label.closest("li.radio-list"),
					input = label.find("input.radio-radio"),
					vOld = me.val(),
					vNew = input.val();
				if (li.hasClass("disabled")) {
					return
				} else {
					container.find("label.radio-label").removeClass("checked");
					label.addClass("checked");
					me.radio("setValue", vNew)
				}
				me.trigger("ev_click", vNew)
			});
			me.radio("setTips", options.tips);
			return me.radio("loadData", me.get(0).items)
		},
		loadData: function(me, items) {
			var me = me || this,
				obj = me.get(0),
				name = obj.name,
				value = obj.name,
				items = items[1],
				len = items.length,
				perColumnNum = Math.ceil(len / obj.columns),
				_numFlag = 0,
				_contentFlag = false;
			if (!$.isArray(items) || items.length < 0) {
				return
			}
			var inHTML = '<ul class="radio-group-list-wrap">';
			var funcInitLi = function(boxName, boxValue, boxId, boxlabel, boxCls) {
				inHTML += '<li class="radio-list">';
				inHTML += '<div class="widget-wrap">';
				inHTML += '<label class="radio-label ' + boxCls + " " + checkedCls + '" for="' + boxId + '">';
				inHTML += '<input class="radio-radio" type="radio" display="' + item.boxlabel + '" name="' + boxName + '" value="' + boxValue.toString() + '" id="' + boxId + '" ' + checked + " />";
				inHTML += '<span class="icon"></span>';
				inHTML += '<span class="text">' + item.boxlabel + "</span>";
				inHTML += "</label>";
				inHTML += "</div>";
				inHTML += '<div class="radio-content-wrap ' + (item.contentCls || "") + '"></div>';
				inHTML += "</li>"
			};
			for (var index = 0; index < items.length; index++) {
				var item = items[index];
				if (!item) {
					continue
				}
				var boxName = item.name || name || "",
					boxValue = item.inputValue || value || "",
					boxId = item.id || $.su.randomId("radio"),
					boxCls = items[index].itemCls || "";
				_contentFlag = item.content ? true : _contentFlag;
				var checked = "",
					checkedCls = "";
				if (item.checked === "checked" || item.checked === true || boxValue === value) {
					checked = 'checked="checked"';
					checkedCls = "checked";
					me.val(boxValue);
					me.get(0).defaultValue = boxValue
				}
				if (_numFlag < perColumnNum) {
					funcInitLi(boxName, boxValue, boxId, item.boxlabel, boxCls)
				} else {
					inHTML += "</ul>";
					inHTML += '<ul class="radio-group-list-wrap">';
					funcInitLi(boxName, boxValue, boxId, item.boxlabel, boxCls);
					_numFlag = 0
				}
				_numFlag++
			}
			inHTML += "</ul>";
			var container = me.radio("getContainer"),
				wrap = container.find("div.radio-group-wrap").empty();
			wrap.append($(inHTML));
			if (_contentFlag) {
				for (var index = 0; index < items.length; index++) {
					var item = items[index];
					if (item.content) {
						var content = $(item.content);
						container.find("li.radio-list").eq(index).find("div.radio-content-wrap").append(content)
					} else {
						continue
					}
				}
			}
			return me
		},
		getSelectedText: function(me) {
			var me = me || this,
				container = me.radio("getContainer"),
				value = me.val();
			var radioBox = container.find("input.radio-radio[value=" + value + "]");
			return radioBox.attr("display")
		},
		getValue: function(me) {
			var me = me || this;
			return me.val()
		},
		setValue: function(me, _value) {
			var me = me.filter("input.radio-value") || this,
				vOld = me.val(),
				vNew = _value[1],
				container = me.radio("getContainer");
			var radioBox = container.find("input.radio-radio").removeAttr("checked");
			radioBox = radioBox.filter("[value=" + vNew + "]");
			radioBox.prop("checked", true);
			container.find("label.radio-label").removeClass("checked");
			radioBox.closest("label.radio-label").addClass("checked");
			me.val(vNew);
			if (vOld.toString() !== vNew.toString()) {
				me.trigger("ev_change", [vOld, vNew])
			}
			return me
		},
		disableItem: function(me, valueArray) {
			var me = me || this,
				obj = me.get(0),
				container = me.radio("getContainer"),
				radios = container.find("input.radio-radio"),
				valueArray = valueArray[1];
			if ($.type(valueArray) === "string") {
				valueArray = [valueArray]
			}
			var valueObj = (function() {
				var valueObj = {};
				for (var index = 0; index < valueArray.length; index++) {
					valueObj[valueArray[index]] = true
				}
				return valueObj
			})();
			radios.each(function(i, obj) {
				var tar = $(obj);
				if (tar.val() in valueObj) {
					tar.closest("li.radio-list").addClass("disabled");
					tar.closest("label.radio-label").addClass("disabled");
					obj.disabled = true
				}
			});
			return me
		},
		enableItem: function(me, valueArray) {
			var me = me || this,
				obj = me.get(0),
				container = me.radio("getContainer"),
				radios = container.find("input.radio-radio"),
				valueArray = valueArray[1];
			if ($.type(valueArray) === "string") {
				valueArray = [valueArray]
			}
			var valueObj = (function() {
				var valueObj = {};
				for (var index = 0; index < valueArray.length; index++) {
					valueObj[valueArray[index]] = true
				}
				return valueObj
			})();
			radios.each(function(i, obj) {
				var tar = $(obj);
				if (tar.val() in valueObj) {
					tar.closest("li.radio-list").removeClass("disabled");
					tar.closest("label.radio-label").removeClass("disabled");
					obj.disabled = false
				}
			});
			return me
		},
		disable: function(me) {
			var me = me || this,
				obj = me.get(0),
				container = me.radio("getContainer").addClass("disabled"),
				radios = container.find("input.radio-radio");
			radios.each(function(i, obj) {
				var tar = $(obj);
				tar.closest("li.radio-list").addClass("disabled");
				tar.closest("label.radio-label").addClass("disabled");
				tar.prop("disabled", true)
			});
			return me
		},
		disableStyle: function(me) {
			var me = me || this,
				obj = me.get(0),
				container = me.radio("getContainer").addClass("disabled"),
				radios = container.find("input.radio-radio");
			radios.each(function(i, obj) {
				var tar = $(obj);
				tar.closest("li.radio-list").addClass("disabled");
				tar.closest("label.radio-label").addClass("disabled")
			});
			return me
		},
		enable: function(me) {
			var me = me || this,
				obj = me.get(0),
				container = me.radio("getContainer").removeClass("disabled"),
				radios = container.find("input.radio-radio");
			radios.each(function(i, obj) {
				var tar = $(obj);
				tar.closest("li.radio-list").removeClass("disabled");
				tar.closest("label.radio-label").removeClass("disabled");
				tar.prop("disabled", false)
			});
			return me
		},
		reset: function(me) {
			var me = me || this,
				obj = me.get(0),
				val = "";
			if (obj.defaultValue) {
				val = obj.defaultValue
			}
			me.radio("setValue", val);
			return me
		},
		getContainer: function(me) {
			var me = me || this,
				container = me.closest("div.radio-group-container");
			return container
		}
	});
	$.su.Widget("textbox", {
		defaults: {
			readOnly: false,
			isvalid: false,
			fieldLabel: "",
			tips: "",
			hint: "",
			validator: null,
			invalidText: $.su.CHAR.VTYPETEXT.INVALIDTEXT,
			vtype: null,
			vtypeText: null,
			allowBlank: true,
			blankText: $.su.CHAR.VTYPETEXT.BLANKTEXT,
			cls: "",
			validateIcon: false,
			defaultLength: 50,
			textFormat: null,
			showOnly: false,
			autoTrim: true
		},
		create: function(defaults, options) {
			var me = this;
			me.each(function(i, obj) {
				var input = $(this);
				if (!input.is("input")) {
					return null
				}
				$.extend(this, defaults, options);
				var id = options.id || this.id || $.su.randomId("textbox"),
					value = options.value || input.val() || input.attr("value") || defaults.value,
					name = options.name || input.attr("name") || this.name || defaults.name;
				$(this).attr({
					value: value,
					id: id,
					name: name
				}).val(value).addClass("text-text " + this.inputCls);
				if (this._maxLength) {
					$(this).attr("maxlength", this._maxLength)
				} else {
					$(this).attr("maxlength", this.defaultLength)
				}
				var inHTML = '<div class="container widget-container text-container ' + this.cls + '">';
				if (this.fieldLabel !== null) {
					inHTML += '<div class="widget-fieldlabel-wrap ' + this.labelCls + '">';
					inHTML += '<label class="widget-fieldlabel text-fieldlabel">' + this.fieldLabel + "</label>";
					if (this.fieldLabel !== "") {
						inHTML += '<span class="widget-separator">' + this.separator + "</span>"
					}
					inHTML += "</div>"
				}
				inHTML += '<div class="widget-wrap-outer text-wrap-outer">';
				inHTML += '<div class="widget-wrap text-wrap">';
				inHTML += '<span class="text-wrap"></span>';
				if (this.hint) {
					inHTML += '<span class="hint text-hint">';
					inHTML += '<input class="text-hint" value="' + this.hint + '" tabindex="-1" contenteditable="false" readonly="readonly"/>';
					inHTML += "</span>"
				}
				inHTML += "</div>";
				if (this.validateIcon) {
					inHTML += '<span class="widget-validate-icon"></span>'
				}
				if (this.tips != null && this.tips != undefined) {
					inHTML += '<div class="widget-tips textbox-tips ' + this.tipsCls + '">';
					inHTML += '<div class="content tips-content"></div>';
					inHTML += "</div>"
				}
				inHTML += '<div class="widget-error-tips textbox-error-tips ' + this.errorTipsCls + '">';
				inHTML += '<span class="widget-error-tips-delta"></span>';
				inHTML += '<div class="widget-error-tips-wrap">';
				inHTML += '<div class="content error-tips-content"></div>';
				inHTML += "</div>";
				inHTML += "</div>";
				inHTML += "</div>";
				inHTML += "</div>";
				var container = $(inHTML);
				input.replaceWith(container);
				container.find("span.text-wrap").append(input);
				if (this.vtype) {
					var vtype = this.vtype;
					if (this.vtypeText) {
						this.vtype.vtypeText = this.vtypeText
					}
					this.vtype = new $.su.vtype(vtype)
				}
				if (this.readOnly) {
					container.addClass("read-only");
					$(this).attr("readOnly", true)
				}
				if (this.showOnly) {
					$(this).attr("disabled", true)
				}
			});
			var container = me.closest("div.widget-container");
			container.delegate("input.text-text", "click", function(e) {
				e.stopPropagation()
			}).delegate("input.text-text", "focus", function(e) {
				var isReadOnly = container.find("input").attr("readOnly");
				if (isReadOnly != "readonly") {
					container.find("input.text-hint").fadeOut(50)
				}
				$(this).textbox("setFocus")
			}).delegate("input.text-text", "blur", function(e) {
				$(this).textbox("validate")
			}).delegate("input.text-text", "keyup", function(e) {
				if ($(this).val().length >= $(this).attr("maxlength")) {
					if ($(this).attr("overflow") == "true") {
						$(this).textbox("setError", $.su.CHAR.VTYPETEXT.MAX_LENGTH)
					} else {
						$(this).attr("overflow", "true")
					}
				} else {
					$(this).attr("overflow", false)
				}
				$(this).trigger("ev_change", [$(this).val()])
			}).delegate("input.text-text", "setValue", function(e) {
				$(this).textbox("validate")
			}).delegate("input.text-text", "blur", function(e) {
				var o = $(this);
				var value = this.autoTrim ? $.trim(o.val()) : o.val();
				o.val(value);
				o.textbox("removeFocus");
				if (!value) {
					container.find("input.text-hint").css({
						"display": "inline"
					})
				}
			}).delegate("input.text-text", "ev_validatechange", function(e, isvalid, tips) {
				e.stopPropagation();
				if (isvalid) {
					$(this).textbox("setValid")
				} else {
					$(this).textbox("setError", tips)
				}
			}).delegate("input.text-hint", "focus click", function(e) {
				e.preventDefault();
				var isReadOnly = container.find("input").attr("readOnly");
				if (isReadOnly != "readonly") {
					$(this).fadeOut(50, function(e) {
						me.focus()
					})
				}
			});
			setTimeout(function() {
				if (me.val() !== "") {
					container.find("input.text-hint").css("display", "none")
				}
			}, 100);
			me.textbox("setTips", options.tips);
			return me
		},
		validate: function(me, flag) {
			var me = me || this,
				tar = me.get(0),
				flag = (flag[1] === false) ? false : true;
			var result = false,
				value = tar.autoTrim ? $.trim(tar.value) : tar.value;
			if ($.type(tar.textFormat) == "function") {
				value = tar.textFormat(value);
				$(tar).val(value)
			}
			var returnResult = function(tar, resultText, val) {
				if (resultText === true) {
					if (flag) {
						$(tar).trigger("ev_validatechange", [true, tar.tips])
					}
					return true
				} else {
					if (!resultText) {
						resultText = tar.tips
					}
					if (flag) {
						$(tar).trigger("ev_validatechange", [false, resultText])
					}
					return false
				}
			};
			if (tar) {
				if (value === "") {
					if (tar.allowBlank !== true) {
						result = false;
						return returnResult(tar, tar.blankText)
					} else {
						result = true;
						return returnResult(tar, true)
					}
				} else {
					var vtype = tar.vtype;
					if (vtype && vtype.isVtype === true) {
						result = vtype.validate(value);
						if (result !== true) {
							if (result === false) {
								return returnResult(tar, vtype.vtypeText)
							} else {
								return returnResult(tar, result)
							}
						}
					}
					if (tar.validator) {
						result = tar.validator(tar.value);
						if ($.type(result) !== "boolean") {
							return returnResult(tar, result)
						}
						if (result !== true) {
							return returnResult(tar, tar.invalidText)
						}
					}
				}
				return returnResult(tar, true)
			}
			return result
		},
		disable: function(me) {
			var me = me || this,
				container = me.textbox("getContainer");
			container.addClass("disabled");
			me.prop("disabled", true);
			return me
		},
		enable: function(me) {
			var me = me || this,
				container = me.textbox("getContainer");
			container.removeClass("disabled");
			me.prop("disabled", false);
			return me
		},
		disableStyle: function(me) {
			var me = me || this,
				container = me.textbox("getContainer");
			container.addClass("disabled");
			container.find("input").attr("readOnly", true);
			return me
		},
		enableStyle: function(me) {
			var me = me || this,
				container = me.textbox("getContainer");
			container.removeClass("disabled");
			container.find("input").attr("readOnly", false);
			return me
		},
		setReadonly: function(me) {
			var me = me || this,
				container = me.textbox("getContainer");
			container.addClass("read-only");
			me.attr("readonly", "readonly");
			return me
		},
		removeReadonly: function(me) {
			var me = me || this,
				container = me.textbox("getContainer");
			container.removeClass("read-only");
			me.removeAttr("readonly");
			return me
		},
		setShowonly: function(me) {
			var me = me || this,
				container = me.textbox("getContainer");
			me.attr("disabled", true);
			return me
		},
		removeShowonly: function(me) {
			var me = me || this,
				container = me.textbox("getContainer");
			me.attr("disabled", false);
			return me
		},
		setTitle: function(me, _value) {
			var me = me || this,
				obj = me.get(0),
				value = _value[1];
			if (value) {
				obj.title = value
			}
			return me
		},
		setValue: function(me, _value) {
			var me = me || this,
				obj = me.get(0),
				value = _value[1],
				hint = me.closest("div.text-container").find("span.hint");
			me.attr("snapshot", value);
			me.trigger("ev_setValue", [value]);
			if (value === "" || value === undefined || value === null) {
				me.val("");
				if (obj && obj.hint) {
					hint.css("display", "block")
				}
			} else {
				me.val(value);
				if (obj && obj.hint) {
					hint.css("display", "none")
				}
			}
			return me
		},
		getValue: function(me) {
			var me = me || this;
			return me.val()
		},
		getContainer: function(me) {
			var me = me || this;
			return me.closest("div.text-container")
		}
	});
	$.su.Widget("subnet", {
		defaults: {
			readOnly: false,
			isvalid: false,
			fieldLabel: "",
			tips: "",
			validator: null,
			invalidText: $.su.CHAR.VTYPETEXT.INVALIDTEXT,
			allowBlank: false,
			blankText: $.su.CHAR.VTYPETEXT.BLANKTEXT,
			cls: "",
			validateIcon: false,
			textFormat: null,
			autoTrim: true
		},
		create: function(defaults, options) {
			var me = this;
			me.each(function(i, obj) {
				var input = $(this),
					inputIp = $("<input />"),
					inputMask = $("<input />");
				if (!input.is("input")) {
					return null
				}
				$.extend(this, defaults, options);
				var id = options.id || this.id || $.su.randomId("subnet"),
					value = options.value || input.val() || input.attr("value") || defaults.value,
					name = options.name || input.attr("name") || this.name || defaults.name;
				input.attr({
					name: name,
					id: id,
					value: value
				}).val(value).addClass("subnet-value hidden");
				inputIp.addClass("text-text text-subnet-ip " + this.inputCls);
				inputMask.addClass("text-text text-subnet-mask " + this.inputCls);
				if (this._maxLength) {
					input.attr("maxlength", this._maxLength)
				}
				inputMask.attr("maxlength", 2);
				var inHTML = '<div class="container widget-container text-container ' + this.cls + '">';
				if (this.fieldLabel !== null) {
					inHTML += '<div class="widget-fieldlabel-wrap ' + this.labelCls + '">';
					inHTML += '<label class="widget-fieldlabel text-fieldlabel">' + this.fieldLabel + "</label>";
					if (this.fieldLabel !== "") {
						inHTML += '<span class="widget-separator">' + this.separator + "</span>"
					}
					inHTML += "</div>"
				}
				inHTML += '<div class="widget-wrap-outer text-wrap-outer">';
				inHTML += '<div class="widget-wrap text-wrap">';
				inHTML += '<span class="text-wrap"></span>';
				inHTML += "</div>";
				inHTML += "<span>&nbsp;/&nbsp;</span>";
				inHTML += '<div class="widget-wrap text-wrap">';
				inHTML += '<span class="text-wrap"></span>';
				inHTML += "</div>";
				if (this.validateIcon) {
					inHTML += '<span class="widget-validate-icon"></span>'
				}
				if (this.tips != null && this.tips != undefined) {
					inHTML += '<div class="widget-tips textbox-tips ' + this.tipsCls + '">';
					inHTML += '<div class="content tips-content"></div>';
					inHTML += "</div>"
				}
				inHTML += '<div class="widget-error-tips textbox-error-tips ' + this.errorTipsCls + '">';
				inHTML += '<span class="widget-error-tips-delta"></span>';
				inHTML += '<div class="widget-error-tips-wrap">';
				inHTML += '<div class="content error-tips-content"></div>';
				inHTML += "</div>";
				inHTML += "</div>";
				inHTML += "</div>";
				inHTML += "</div>";
				var container = $(inHTML);
				input.replaceWith(container);
				container.find("span.text-wrap:eq(0)").append(inputIp);
				container.find("span.text-wrap:eq(1)").append(inputMask);
				container.append(input);
				if (this.readOnly) {
					container.addClass("read-only");
					inputIp.prop("readOnly", true);
					inputMask.prop("readOnly", true)
				}
			});
			var container = me.closest("div.widget-container");
			container.delegate("input.text-text", "click", function(e) {
				e.stopPropagation()
			}).delegate("input.text-text", "focus", function(e) {
				me.subnet("setFocus")
			}).delegate("input.text-text", "blur", function(e) {
				me.subnet("removeFocus").subnet("validate")
			}).delegate("input.text-text", "keyup", function(e) {
				me.trigger("ev_change", [me.subnet("getValue")])
			}).delegate("input.text-text", "setValue", function(e) {
				me.subnet("validate")
			}).delegate("input.text-text", "ev_validatechange", function(e, isvalid, tips) {
				e.stopPropagation();
				if (isvalid) {
					me.subnet("setValid")
				} else {
					me.subnet("setError", tips)
				}
			});
			me.subnet("setTips", options.tips);
			return me
		},
		validate: function(me, flag) {
			var me = me || this,
				$ip = me.subnet("getContainer").find(".text-subnet-ip"),
				$mask = me.subnet("getContainer").find(".text-subnet-mask"),
				tar = me.get(0),
				tarIp = $ip.get(0),
				tarMask = $mask.get(0),
				flag = (flag[1] === false) ? false : true;
			var result = false,
				valueIp = tar.autoTrim ? $.trim(tarIp.value) : tarIp.value,
				valueMask = tar.autoTrim ? $.trim(tarMask.value) : tarMask.value;
			var returnResult = function(resultText, val) {
				if (resultText === true) {
					if (flag) {
						$ip.trigger("ev_validatechange", [true, tar.tips])
					}
					return true
				} else {
					if (!resultText) {
						resultText = tar.tips
					}
					if (flag) {
						$ip.trigger("ev_validatechange", [false, resultText])
					}
					return false
				}
			};
			if (tarIp && tarMask) {
				if (valueIp === "" || valueMask === "") {
					if (tar.allowBlank !== true) {
						result = false;
						return returnResult(tar.blankText)
					}
				} else {
					if (tar.validator) {
						result = tar.validator(me.subnet("getValue"));
						if ($.type(result) !== "boolean") {
							return returnResult(result)
						}
						if (result !== true) {
							return returnResult(tar.invalidText)
						}
					} else {
						result = new $.su.vtype({
							vtype: "ip"
						}).validate(valueIp);
						if (valueIp === "0.0.0.0") {
							result = true
						}
						if (result === true) {
							result = new $.su.vtype({
								vtype: "number",
								min: 0,
								max: 32
							}).validate(valueMask)
						}
						if (result !== true) {
							return returnResult(tar.invalidText)
						}
					}
				}
				return returnResult(true)
			}
			return result
		},
		disable: function(me) {
			var me = me || this,
				$mask = me.subnet("getContainer").find(".text-subnet-mask"),
				$ip = me.subnet("getContainer").find(".text-subnet-ip"),
				container = me.closest(".widget-container");
			container.addClass("disabled");
			me.prop("disabled", true);
			$ip.prop("disabled", true);
			$mask.prop("disabled", true);
			return me
		},
		enable: function(me) {
			var me = me || this,
				$mask = me.subnet("getContainer").find(".text-subnet-mask"),
				$ip = me.subnet("getContainer").find(".text-subnet-ip"),
				container = me.closest(".widget-container");
			container.removeClass("disabled");
			me.prop("disabled", false);
			$ip.prop("disabled", false);
			$mask.prop("disabled", false);
			return me
		},
		setReadonly: function(me) {
			var me = me || this,
				$mask = me.subnet("getContainer").find(".text-subnet-mask"),
				$ip = me.subnet("getContainer").find(".text-subnet-ip"),
				container = me.subnet("getContainer");
			container.addClass("read-only");
			me.attr("readonly", "readonly");
			$ip.attr("readonly", "readonly");
			$mask.attr("readonly", "readonly");
			return me
		},
		removeReadonly: function(me) {
			var me = me || this,
				$mask = me.subnet("getContainer").find(".text-subnet-mask"),
				$ip = me.subnet("getContainer").find(".text-subnet-ip"),
				container = me.subnet("getContainer");
			container.removeClass("read-only");
			me.removeAttr("readonly");
			$ip.removeAttr("readonly");
			$mask.removeAttr("readonly");
			return me
		},
		setTitle: function(me, _value) {
			var me = me || this,
				$mask = me.subnet("getContainer").find(".text-subnet-mask"),
				$ip = me.subnet("getContainer").find(".text-subnet-ip");
			if (_value) {
				$ip.get(0).title = _value[1];
				$mask.get(0).title = _value[2]
			}
			return me
		},
		setValue: function(me, _value) {
			var me = me || this,
				$mask = me.subnet("getContainer").find(".text-subnet-mask"),
				$ip = me.subnet("getContainer").find(".text-subnet-ip"),
				value = _value[1];
			me.attr("snapshot", value);
			if (value === "" || value === undefined || value === null || value.indexOf("/") == -1) {
				me.val("");
				$mask.val("");
				$ip.val("")
			} else {
				var subnet = value.split("/");
				$ip.val(subnet[0]);
				$mask.val(subnet[1]);
				me.val(value)
			}
			return me
		},
		getValue: function(me) {
			var me = me || this,
				$mask = me.subnet("getContainer").find(".text-subnet-mask"),
				$ip = me.subnet("getContainer").find(".text-subnet-ip");
			me.val($ip.val() + "/" + $mask.val());
			return me.val()
		},
		reset: function(me) {
			var me = me || this,
				$mask = me.subnet("getContainer").find(".text-subnet-mask"),
				$ip = me.subnet("getContainer").find(".text-subnet-ip");
			me.val("");
			$mask.val("");
			$ip.val("")
		},
		getContainer: function(me) {
			var me = me || this;
			return me.closest("div.text-container")
		}
	});
	$.su.Widget("portrange", {
		defaults: {
			readOnly: false,
			isvalid: false,
			fieldLabel: "",
			tips: "",
			validator: null,
			invalidText: $.su.CHAR.VTYPETEXT.INVALIDTEXT,
			allowBlank: false,
			blankText: $.su.CHAR.VTYPETEXT.BLANKTEXT,
			cls: "",
			validateIcon: false,
			textFormat: null,
			autoTrim: true
		},
		create: function(defaults, options) {
			var me = this;
			me.each(function(i, obj) {
				var input = $(this),
					inputStartPort = $("<input />"),
					inputEndPort = $("<input />");
				if (!input.is("input")) {
					return null
				}
				$.extend(this, defaults, options);
				var id = options.id || this.id || $.su.randomId("portrange"),
					value = options.value || input.val() || input.attr("value") || defaults.value,
					name = options.name || input.attr("name") || this.name || defaults.name;
				input.attr({
					name: name,
					id: id,
					value: value
				}).val(value).addClass("subnet-value hidden");
				inputStartPort.addClass("text-text text-sport-range " + this.inputCls);
				inputEndPort.addClass("text-text text-dport-range " + this.inputCls);
				if (this._maxLength) {
					input.attr("maxlength", this._maxLength)
				}
				inputEndPort.attr("maxlength", 5);
				var inHTML = '<div class="container widget-container text-container ' + this.cls + '">';
				if (this.fieldLabel !== null) {
					inHTML += '<div class="widget-fieldlabel-wrap ' + this.labelCls + '">';
					inHTML += '<label class="widget-fieldlabel text-fieldlabel">' + this.fieldLabel + "</label>";
					if (this.fieldLabel !== "") {
						inHTML += '<span class="widget-separator">' + this.separator + "</span>"
					}
					inHTML += "</div>"
				}
				inHTML += '<div class="widget-wrap-outer text-wrap-outer">';
				inHTML += '<div class="widget-wrap text-wrap">';
				inHTML += '<span class="text-wrap"></span>';
				inHTML += "</div>";
				inHTML += "<span>&nbsp;—&nbsp;</span>";
				inHTML += '<div class="widget-wrap text-wrap">';
				inHTML += '<span class="text-wrap"></span>';
				inHTML += "</div>";
				if (this.validateIcon) {
					inHTML += '<span class="widget-validate-icon"></span>'
				}
				if (this.tips != null && this.tips != undefined) {
					inHTML += '<div class="widget-tips textbox-tips ' + this.tipsCls + '">';
					inHTML += '<div class="content tips-content"></div>';
					inHTML += "</div>"
				}
				inHTML += '<div class="widget-error-tips textbox-error-tips ' + this.errorTipsCls + '">';
				inHTML += '<span class="widget-error-tips-delta"></span>';
				inHTML += '<div class="widget-error-tips-wrap">';
				inHTML += '<div class="content error-tips-content"></div>';
				inHTML += "</div>";
				inHTML += "</div>";
				inHTML += "</div>";
				inHTML += "</div>";
				var container = $(inHTML);
				input.replaceWith(container);
				container.find("span.text-wrap:eq(0)").append(inputStartPort);
				container.find("span.text-wrap:eq(1)").append(inputEndPort);
				container.append(input);
				if (this.readOnly) {
					container.addClass("read-only");
					inputStartPort.prop("readOnly", true);
					inputEndPort.prop("readOnly", true)
				}
			});
			var container = me.closest("div.widget-container");
			container.delegate("input.text-text", "click", function(e) {
				e.stopPropagation()
			}).delegate("input.text-text", "focus", function(e) {
				me.portrange("setFocus")
			}).delegate("input.text-text", "blur", function(e) {
				me.portrange("removeFocus").portrange("validate")
			}).delegate("input.text-text", "keyup", function(e) {
				me.trigger("ev_change", [me.portrange("getValue")])
			}).delegate("input.text-text", "setValue", function(e) {
				me.portrange("validate")
			}).delegate("input.text-text", "ev_validatechange", function(e, isvalid, tips) {
				e.stopPropagation();
				if (isvalid) {
					me.portrange("setValid")
				} else {
					me.portrange("setError", tips)
				}
			});
			me.portrange("setTips", options.tips);
			return me
		},
		validate: function(me, flag) {
			var me = me || this,
				$startPort = me.portrange("getContainer").find(".text-sport-range"),
				$endPort = me.portrange("getContainer").find(".text-dport-range"),
				tar = me.get(0),
				tarStartPort = $startPort.get(0),
				tarEndPort = $endPort.get(0),
				flag = (flag[1] === false) ? false : true;
			var result = false,
				valueStartPort = tar.autoTrim ? $.trim(tarStartPort.value) : tarStartPort.value,
				valueEndPort = tar.autoTrim ? $.trim(tarEndPort.value) : tarEndPort.value;
			var returnResult = function(resultText, val) {
				if (resultText === true) {
					if (flag) {
						$startPort.trigger("ev_validatechange", [true, tar.tips])
					}
					return true
				} else {
					if (!resultText) {
						resultText = tar.tips
					}
					if (flag) {
						$startPort.trigger("ev_validatechange", [false, resultText])
					}
					return false
				}
			};
			if (tarStartPort && tarEndPort) {
				if (valueStartPort === "" || valueEndPort === "") {
					if (tar.allowBlank !== true) {
						result = false;
						return returnResult(tar.blankText)
					}
				} else {
					if (tar.validator) {
						result = tar.validator(me.portrange("getValue"));
						if ($.type(result) !== "boolean") {
							return returnResult(result)
						}
						if (result !== true) {
							return returnResult(tar.invalidText)
						}
					} else {
						result = new $.su.vtype({
							vtype: "number",
							min: 0,
							max: 65535
						}).validate(valueStartPort);
						if (result === true) {
							result = new $.su.vtype({
								vtype: "number",
								min: 0,
								max: 65535
							}).validate(valueEndPort)
						}
						if (parseInt(valueStartPort) > parseInt(valueEndPort)) {
							result = false
						}
						if (result !== true) {
							return returnResult(tar.invalidText)
						}
					}
				}
				return returnResult(true)
			}
			return result
		},
		disable: function(me) {
			var me = me || this,
				$endPort = me.portrange("getContainer").find(".text-dport-range"),
				$startPort = me.portrange("getContainer").find(".text-sport-range"),
				container = me.closest(".widget-container");
			container.addClass("disabled");
			me.prop("disabled", true);
			$startPort.prop("disabled", true);
			$endPort.prop("disabled", true);
			return me
		},
		enable: function(me) {
			var me = me || this,
				$endPort = me.portrange("getContainer").find(".text-dport-range"),
				$startPort = me.portrange("getContainer").find(".text-sport-range"),
				container = me.closest(".widget-container");
			container.removeClass("disabled");
			me.prop("disabled", false);
			$startPort.prop("disabled", false);
			$endPort.prop("disabled", false);
			return me
		},
		setReadonly: function(me) {
			var me = me || this,
				$endPort = me.portrange("getContainer").find(".text-dport-range"),
				$startPort = me.portrange("getContainer").find(".text-sport-range"),
				container = me.portrange("getContainer");
			container.addClass("read-only");
			me.attr("readonly", "readonly");
			$startPort.attr("readonly", "readonly");
			$endPort.attr("readonly", "readonly");
			return me
		},
		removeReadonly: function(me) {
			var me = me || this,
				$endPort = me.portrange("getContainer").find(".text-dport-range"),
				$startPort = me.portrange("getContainer").find(".text-sport-range"),
				container = me.portrange("getContainer");
			container.removeClass("read-only");
			me.removeAttr("readonly");
			$startPort.removeAttr("readonly");
			$endPort.removeAttr("readonly");
			return me
		},
		setTitle: function(me, _value) {
			var me = me || this,
				$endPort = me.portrange("getContainer").find(".text-dport-range"),
				$startPort = me.portrange("getContainer").find(".text-sport-range");
			if (_value) {
				$startPort.get(0).title = _value[1];
				$endPort.get(0).title = _value[2]
			}
			return me
		},
		setValue: function(me, _value) {
			var me = me || this,
				$endPort = me.portrange("getContainer").find(".text-dport-range"),
				$startPort = me.portrange("getContainer").find(".text-sport-range"),
				value = _value[1];
			me.attr("snapshot", value);
			if (value === "" || value === undefined || value === null || value.indexOf("-") == -1) {
				me.val("");
				$endPort.val("");
				$startPort.val("")
			} else {
				var portrange = value.split("-");
				$startPort.val(portrange[0]);
				$endPort.val(portrange[1]);
				me.val(value)
			}
			return me
		},
		getValue: function(me) {
			var me = me || this,
				$endPort = me.portrange("getContainer").find(".text-dport-range"),
				$startPort = me.portrange("getContainer").find(".text-sport-range");
			me.val($startPort.val() + "-" + $endPort.val());
			return me.val()
		},
		reset: function(me) {
			var me = me || this,
				$endPort = me.portrange("getContainer").find(".text-dport-range"),
				$startPort = me.portrange("getContainer").find(".text-sport-range");
			me.val("");
			$endPort.val("");
			$startPort.val("")
		},
		getContainer: function(me) {
			var me = me || this;
			return me.closest("div.text-container")
		}
	});
	$.su.Widget("textarea", {
		defaults: {
			value: "",
			name: "",
			isdisabled: false,
			isvalid: false,
			fieldLabel: "",
			tips: "",
			validator: null,
			invalidText: $.su.CHAR.INVALIDTEXT,
			vtype: null,
			vtypeText: null,
			allowBlank: true,
			blankText: $.su.CHAR.BLANKTEXT,
			cls: ""
		},
		create: function(defaults, options) {
			var me = this;
			me.each(function(i, obj) {
				var input = $(this);
				if (!input.is("textarea")) {
					return null
				}
				var id = options.id || this.id || "textarea-" + parseInt(Math.random() * 1000 * 1000 * 1000, 10).toString(),
					value = options.value || this.value || defaults.value,
					name = options.name || this.name || defaults.name;
				$.extend(this, defaults, options);
				$(this).attr({
					value: value,
					id: id,
					name: name
				}).val(value).addClass("textarea-text" + " " + this.inputCls);
				if (this._maxLength) {
					$(this).attr("maxlength", this._maxLength)
				}
				var inHTML = '<div class="container widget-container textarea-container ' + this.cls + '">';
				if (this.fieldLabel !== null) {
					inHTML += '<div class="widget-fieldlabel-wrap ' + this.labelCls + '">';
					inHTML += '<label class="widget-fieldlabel textarea-fieldlabel">' + this.fieldLabel + "</label>";
					if (this.fieldLabel !== "") {
						inHTML += '<span class="widget-separator">' + this.separator + "</span>"
					}
					inHTML += "</div>"
				}
				inHTML += '<div class="widget-wrap-outer textarea-wrap-outer">';
				inHTML += '<div class="widget-wrap textarea-wrap">';
				inHTML += '<span class="text-wrap"></span>';
				inHTML += "</div>";
				if (this.tips != null && this.tips != undefined) {
					inHTML += '<div class="widget-tips textbox-tips ' + this.tipsCls + '">';
					inHTML += '<div class="content tips-content"></div>';
					inHTML += "</div>"
				}
				inHTML += '<div class="widget-error-tips textbox-error-tips ' + this.errorTipsCls + '">';
				inHTML += '<span class="widget-error-tips-delta"></span>';
				inHTML += '<div class="widget-error-tips-wrap">';
				inHTML += '<div class="content error-tips-content"></div>';
				inHTML += "</div>";
				inHTML += "</div>";
				inHTML += "</div>";
				inHTML += "</div>";
				var container = $(inHTML);
				input.replaceWith(container);
				container.find("div.textarea-wrap span.text-wrap").append(input.detach());
				if (obj.readOnly) {
					container.addClass("read-only");
					input.attr("readOnly", true)
				}
				if (this.vtype) {
					var vtype = this.vtype;
					if ($.type(vtype) === "string") {
						this.vtype = new $.su.vtype(vtype);
						if (this.vtypeText) {
							this.vtype.vtypeText = this.vtypeText
						}
					}
				}
			});
			var container = $(me.parents("div.widget-container").get(0));
			container.delegate("textarea.textarea-text", "focus", function(e) {
				$(this).textarea("setFocus")
			}).delegate("textarea.textarea-text", "keyup blur", function(e) {
				var t = $(this);
				if (document.all) {
					var m = t.attr("maxlength");
					if (m) {
						var v = t.val();
						v = v.substring(0, m);
						t.val(v)
					}
				}
				t.textarea("validate")
			}).delegate("textarea.textarea-text", "ev_validatechange", function(e, isValid, tips) {
				e.stopPropagation();
				if (isValid) {
					$(this).textarea("setNormal")
				} else {
					$(this).textarea("setError", tips)
				}
			});
			return me
		},
		validate: function(me, flag) {
			var me = me || this,
				tar = me.get(0),
				result = false,
				value = $.trim(me.val()),
				flag = (flag[1] === false) ? false : true;
			var returnResult = function(me, resultText, val) {
				if (resultText === true) {
					if (flag) {
						$(tar).trigger("ev_validatechange", [true, tar.tips])
					}
					return true
				} else {
					if (!resultText) {
						resultText = tar.tips
					}
					if (flag) {
						$(tar).trigger("ev_validatechange", [false, resultText])
					}
					return false
				}
				me.isValid = result;
				return result
			};
			if (tar) {
				if (value === "") {
					if (tar.allowBlank !== true) {
						result = false;
						return returnResult(tar, tar.blankText)
					} else {
						result = true;
						return returnResult(tar, true)
					}
				} else {
					var vtype = tar.vtype;
					if (vtype && vtype.isVtype === true) {
						result = vtype.validate(value);
						if (result !== true) {
							if (result.result === false) {
								return returnResult(tar, vtype.vtypeText)
							} else {
								return returnResult(tar, result)
							}
						}
					}
					if (tar.validator) {
						result = tar.validator(tar.value);
						if ($.type(result) !== "boolean") {
							return returnResult(tar, result)
						}
						if (result !== true) {
							return returnResult(tar, tar.invalidText)
						}
					}
				}
				return returnResult(tar, true)
			}
			return result
		},
		setValue: function(me, params) {
			var me = me || this,
				value = params[1] || "";
			me.val(value)
		}
	});
	$.su.Widget("button", {
		defaults: {
			text: "",
			iconCls: "",
			enableToggle: false,
			toggleHander: null,
			pressedCls: "pressed",
			pressed: false,
			cls: "",
			btnCls: "",
			fieldLabel: null
		},
		create: function(defaults, options) {
			var me = this;
			me.each(function(i, obj) {
				var tar = $(this);
				$.extend(obj, defaults, options);
				var name = tar.attr("name") || "",
					id = tar.attr("id") || $.su.randomId("button"),
					value = tar.val() || "",
					cls = tar.attr("class") || "";
				var input = null;
				if (tar.is("input")) {
					var btn = $('<button id="button-' + id + '" name="button-' + name + '" class="' + cls + '" type="button">' + value + "</button>");
					tar.replaceWith(btn);
					input = tar;
					tar = btn;
					$.extend(btn.get(0), defaults, options)
				}
				var _text = tar.html();
				var text = obj.text || _text || "";
				var inHTML = "";
				if (obj.iconCls !== "") {
					inHTML += '<span class="icon button-icon ' + obj.iconCls + '"></span>'
				}
				inHTML += '<span class="text button-text">' + text + "</span>";
				tar.empty().addClass("button-button " + obj.btnCls).append($(inHTML));
				inHTML = '<div class="container widget-container button-container ' + obj.cls + '">';
				if (obj.fieldLabel !== null) {
					inHTML += '<div class="widget-fieldlabel-wrap ' + obj.labelCls + '">';
					inHTML += '<label class="widget-fieldlabel text-fieldlabel">' + obj.fieldLabel + "</label>";
					if (obj.fieldLabel !== "") {
						inHTML += '<span class="widget-separator">' + obj.separator + "</span>"
					}
					inHTML += "</div>"
				}
				inHTML += '<div class="widget-wrap-outer button-wrap-outer">';
				inHTML += '<div class="widget-wrap button-wrap">';
				inHTML += "</div>";
				if (this.tips != null && this.tips != undefined) {
					inHTML += '<div class="widget-tips textbox-tips ' + obj.tipsCls + '">';
					inHTML += '<div class="content tips-content"></div>';
					inHTML += "</div>"
				}
				inHTML += '<div class="widget-error-tips textbox-error-tips ' + obj.errorTipsCls + '">';
				inHTML += '<span class="widget-error-tips-delta"></span>';
				inHTML += '<div class="widget-error-tips-wrap">';
				inHTML += '<div class="content error-tips-content"></div>';
				inHTML += "</div>";
				inHTML += "</div>";
				inHTML += "</div>";
				inHTML += "</div>";
				var container = $(inHTML);
				tar.replaceWith(container);
				var wrap = container.find("div.button-wrap");
				wrap.append(tar);
				if (input) {
					wrap.append(input.addClass("hidden"))
				}
				if ($.type(obj.handler) === "function") {
					tar.bind("click", obj.handler)
				}
				if (obj.enableToggle === true) {
					var prs = obj.pressed;
					tar.attr("pressed", prs);
					if (prs.toString() === "true") {
						tar.addClass(obj.pressedCls)
					}
					tar.bind("click", function(e) {
						var btn = $(this),
							_prs = this.pressed;
						if (_prs.toString() === "false") {
							btn.addClass(this.pressedCls);
							_prs = true
						} else {
							btn.removeClass(this.pressedCls);
							_prs = false
						}
						btn.attr("pressed", _prs);
						this.pressed = _prs;
						if ($.type(this.toggleHander) === "function") {
							this.toggleHander.call(this, _prs)
						}
					})
				}
				obj.isButton = true
			});
			var container = me.closest("div.button-container");
			container.delegate("button.button-button", "mousedown", function(e) {
				container.addClass("clicked")
			}).delegate("button.button-button", "click", function(e) {
				e.preventDefault()
			});
			me.button("setTips", options.tips);
			return me
		},
		setText: function(me, text) {
			var me = me || this,
				container = me.closest("div.button-container"),
				btnText = container.find("button.button-button span.button-text"),
				text = text[1];
			if (text) {
				me.text = text;
				btnText.html(text)
			}
			return me
		},
		setValue: function(me, value) {
			var me = me || this,
				value = value[1] || "";
			me.val(value);
			return me
		},
		disable: function(me) {
			var me = me || this,
				container = me.closest("div.button-container");
			container.addClass("disabled");
			container.find("button.button-button").prop("disabled", true);
			return me
		},
		enable: function(me) {
			var me = me || this,
				container = me.closest("div.button-container");
			container.removeClass("disabled");
			container.find("button.button-button").prop("disabled", false);
			return me
		},
		getContainer: function(me) {
			var me = me || this,
				container = me.closest("div.button-container");
			return container
		}
	});
	$.su.Widget("time", {
		defaults: {
			fieldLabel: "",
			tips: "",
			cls: "",
			value: "24:00:00",
			maxValue: "24:00:00",
			minValue: "00:00:00",
			format: "h:m:s",
			allowBlank: true,
			widgetName: "time"
		},
		create: function(defaults, options) {
			var me = this;
			me.each(function(i, obj) {
				var tar = $(this);
				if (!tar.is("input")) {
					return null
				}
				$.extend(this, defaults, options);
				var id = options.id || this.id || "textbox-" + parseInt(Math.random() * 1000 * 1000 * 1000, 10).toString();
				tar.attr({
					id: id
				});
				var inHTML = '<div class="container widget-container combobox-container time-container ' + this.cls + '">';
				if (this.fieldLabel !== null) {
					inHTML += '<div class="widget-fieldlabel-wrap ' + this.labelCls + '">';
					inHTML += '<label class="widget-fieldlabel time-fieldlabel">' + this.fieldLabel + "</label>";
					if (this.fieldLabel !== "") {
						inHTML += '<span class="widget-separator">' + this.separator + "</span>"
					}
					inHTML += "</div>"
				}
				var _format = this.format,
					_sepMark = this.format.charAt(1),
					_pattern = /^[A-Za-z0-9]+$/;
				if (_pattern.test(_sepMark)) {}
				inHTML += '<div class="widget-wrap-outer time-wrap-outer">';
				var params = _format.split(_sepMark),
					len = params.length;
				obj.separator = _sepMark;
				for (var index = 0; index < len; index++) {
					var param = params[index],
						_param = "",
						_len = 24,
						_lst = (index === len - 1) ? "lst" : "";
					switch (param) {
						case "h":
							_param = "hour";
							_len = 24;
							_sepMark = $.su.CHAR.TIME_OBJ.HOUR;
							break;
						case "m":
							_param = "min";
							_sepMark = $.su.CHAR.TIME_OBJ.MINUTE;
							_len = 60;
							break;
						case "s":
							_param = "sec";
							_len = 60;
							_sepMark = $.su.CHAR.TIME_OBJ.SECOND;
							break
					}
					inHTML += '<div class="combobox-container widget-wrap time-wrap ' + _param + "-container " + _lst + '">';
					inHTML += '<div class="combobox-wrap time-wrap ' + _param + '-wrap">';
					inHTML += '<input readonly="readonly" class="combobox-text time-text s ' + _param + '-text" maxlength="2" value="' + _param + '" data-type="' + param + '" />';
					inHTML += '<a class="combobox-switch time-switch ' + _param + '-switch" href="javascript:void(0);">';
					inHTML += '<span class="icon"></span>';
					inHTML += "</a>";
					inHTML += '<div class="combobox-list-wrap time-list-wrap ' + _param + '-list-wrap" toggleflag="hidden" >';
					inHTML += '<div class="position-top-left"></div><div class="position-top-center"></div>';
					inHTML += '<div class="position-center-left"><div class="position-center-right">';
					inHTML += '<div class="combobox-list-content-wrap">';
					inHTML += '<ul class="combobox-list time-list ' + _param + '-list">';
					for (var jndex = 0; jndex < _len; jndex++) {
						var text = jndex.toString().charAt(1) == "" ? "0" + jndex : jndex;
						inHTML += '<li class="combobox-list time-list" data-index="' + text + '">';
						inHTML += '<label class="combobox-label time-label" >' + text + "</label>";
						inHTML += "</li>"
					}
					inHTML += "</ul>";
					inHTML += "</div>";
					inHTML += "</div></div>";
					inHTML += '<div class="position-bottom-left"></div><div class="position-bottom-center"></div>';
					inHTML += "</div>";
					inHTML += "</div>";
					inHTML += "</div>";
					inHTML += '<span class="time-separator">' + _sepMark + "</span>"
				}
				if (this.tips != null && this.tips != undefined) {
					inHTML += '<div class="widget-tips textbox-tips ' + obj.tipsCls + '">';
					inHTML += '<div class="content tips-content"></div>';
					inHTML += "</div>"
				}
				inHTML += '<div class="widget-error-tips textbox-error-tips ' + obj.errorTipsCls + '">';
				inHTML += '<span class="widget-error-tips-delta"></span>';
				inHTML += '<div class="widget-error-tips-wrap">';
				inHTML += '<div class="content error-tips-content"></div>';
				inHTML += "</div>";
				inHTML += "</div>";
				inHTML += "</div>";
				inHTML += "</div>";
				var container = $(inHTML);
				tar.replaceWith(container);
				container.append(tar.addClass("time-value hidden"))
			});
			var container = $(me.parents("div.time-container").get(0));
			container.delegate("a.time-switch", "click", function(e) {
				e.stopPropagation();
				var swicth = $(this),
					wrap = swicth.parent("div.time-wrap").find("div.time-list-wrap"),
					toggleFlag = wrap.attr("toggleflag") || "hidden";
				$("div.combobox-list-wrap").hide().attr("toggleflag", "hidden");
				if (toggleFlag != "shown") {
					wrap.slideDown(150, function(e) {
						$(this).css({
							display: "block"
						})
					}).attr("toggleflag", "shown")
				} else {
					wrap.hide().attr("toggleflag", "hidden")
				}
			});
			container.delegate("label.time-label", "click", function(e) {
				e.stopPropagation();
				var tar = $(this),
					type = tar.attr("data-type"),
					wrap = tar.parents("div.time-list-wrap"),
					container = me.closest("div.time-container"),
					obj = me.get(0),
					format = obj.format,
					separator = obj.separator;
				wrap.find("li.time-list").removeClass("selected");
				tar.parent("li.time-list").addClass("selected");
				wrap.hide().attr("toggleflag", "hidden");
				tar.closest("div.time-wrap").find("input.time-text").val(tar.html());
				var h = container.find("input.hour-text").val() || "00",
					m = container.find("input.min-text").val() || "00",
					s = container.find("input.sec-text").val() || "00";
				var formats = format.split(separator),
					value = "";
				for (var index = 0, len = formats.length; index < len; index++) {
					var param = formats[index];
					switch (param) {
						case "h":
							value = value + h + separator;
							break;
						case "m":
							value = value + m + separator;
							break;
						case "s":
							value = value + s + separator;
							break
					}
				}
				value = value.slice(0, value.length - 1);
				me.val(value)
			});
			container.delegate("div.time-wrap.lst label.time-label", "click", function(e) {
				me.time("validate")
			});
			me.on("ev_validatechange", function(e) {
				e.stopPropagation()
			});
			if (me.val()) {
				me.time("setValue", me.val())
			}
			me.time("setTips", options.tips);
			return me
		},
		getHour: function(me) {
			var me = me || this,
				container = me.closest("div.time-container");
			var hourText = container.find("input.hour-text");
			return hourText.val()
		},
		getMin: function(me) {
			var me = me || this,
				container = me.closest("div.time-container");
			var minText = container.find("input.min-text");
			return minText.val()
		},
		getSec: function(me) {
			var me = me || this,
				container = me.closest("div.time-container");
			var secText = container.find("input.sec-text");
			return secText.val()
		},
		setValue: function(me, value) {
			var me = me || this,
				container = me.closest("div.time-container"),
				obj = me.get(0),
				format = obj.format,
				separator = obj.separator,
				value = value[1];
			var values = value.split(separator),
				formats = format.split(separator);
			for (var index = 0, len = formats.length; index < len; index++) {
				var fmt = formats[index],
					val = values[index];
				switch (fmt) {
					case "h":
						container.find("input.hour-text").val(val);
						var lis = container.find("div.hour-container li.time-list").removeClass("selected");
						lis.filter("[data-index=" + val + "]").addClass("selected");
						break;
					case "m":
						container.find("input.min-text").val(val);
						var lis = container.find("div.min-container li.time-list").removeClass("selected");
						lis.filter("[data-index=" + val + "]").addClass("selected");
						break;
					case "s":
						container.find("input.sec-text").val(val);
						var lis = container.find("div.sec-container li.time-list").removeClass("selected");
						lis.filter("[data-index=" + val + "]").addClass("selected");
						break
				}
			}
			me.val(value);
			return me
		},
		getValue: function(me) {
			var me = me || this;
			return me.val()
		},
		validate: function(me) {
			var me = me || this,
				obj = me.get(0),
				validator = obj.validator,
				value = me.val(),
				result = true;
			if (validator) {
				return validator.call(me, value)
			}
			me.trigger("ev_validatechange", result);
			return result
		},
		getContainer: function(me) {
			var me = me || this;
			return me.closest("div.time-container")
		}
	});
	$.su.Widget("file", {
		defaults: {
			fieldLabel: "",
			tips: "",
			cls: "",
			inputCls: "l",
			buttonText: $.su.CHAR.OPERATION.FILEBUTTONTEXT,
			blankText: $.su.CHAR.OPERATION.FILEBLANKTEXT,
			extension: "txt, ai, docx",
			extensionErrorText: $.su.CHAR.ERROR["00000074"]
		},
		create: function(defaults, options) {
			var me = this;
			me.each(function(i, obj) {
				var tar = $(this);
				if (!tar.is("input[type=file]")) {
					return null
				}
				$.extend(this, defaults, options);
				var inHTML = '<div class="container widget-container text-container file-container ' + this.cls + '">';
				if (this.fieldLabel !== null) {
					inHTML += '<div class="widget-fieldlabel-wrap ' + this.labelCls + '">';
					inHTML += '<label class="widget-fieldlabel text-fieldlabel">' + this.fieldLabel + "</label>";
					if (this.fieldLabel !== "") {
						inHTML += '<span class="widget-separator">' + this.separator + "</span>"
					}
					inHTML += "</div>"
				}
				inHTML += '<div class="file-wrap-outer widget-wrap-outer">';
				inHTML += '<div class="file-wrap widget-wrap">';
				inHTML += '<div class="widget-wrap text-wrap">';
				inHTML += '<span class="text-wrap">';
				inHTML += '<label class="file-text text-text ' + obj.inputCls + '"></label>';
				inHTML += "</span>";
				inHTML += "</div>";
				inHTML += '<div class="button-container file-button-container inline-block">';
				inHTML += '<button class="file-button button-button" type="button">';
				inHTML += '<span class="text button-text">' + this.buttonText + "</span>";
				inHTML += "</button>";
				inHTML += "</div>";
				inHTML += "</div>";
				if (this.tips) {
					inHTML += '<div class="widget-tips textbox-tips ' + obj.tipsCls + '">';
					inHTML += '<div class="content tips-content"></div>';
					inHTML += "</div>"
				}
				inHTML += '<div class="widget-error-tips textbox-error-tips ' + obj.errorTipsCls + '">';
				inHTML += '<span class="widget-error-tips-delta"></span>';
				inHTML += '<div class="widget-error-tips-wrap">';
				inHTML += '<div class="content error-tips-content"></div>';
				inHTML += "</div>";
				inHTML += "</div>";
				inHTML += "</div>";
				inHTML += "</div>";
				var container = $(inHTML);
				tar.replaceWith(container);
				container.find("div.file-wrap").append(tar.addClass("file-input").prop("single", true))
			});
			var contaienr = $(me.parents("div.file-container").get(0));
			contaienr.delegate("button.file-button", "click", function(e) {
				contaienr.find("input.file-input").click();
				contaienr.find("input.file-input").trigger("change")
			});
			contaienr.delegate("label.file-text", "click", function(e) {
				contaienr.find("button.file-button").click()
			});
			contaienr.delegate("input.file-input", "change", function(e) {
				var tar = $(this),
					value = tar.val();
				var p = /.+(?=\\)/g;
				var v = value.toString().match(p);
				if (v && v[0] && v[0].length) {
					v = value.substring(v[0].length + 1)
				} else {
					v = value
				}
				contaienr.find("label.file-text").html(v);
				contaienr.find("label.file-text").attr("title", v);
				if (value) {
					me.file("validate")
				}
			});
			me.file("setTips", options.tips);
			return me
		},
		validate: function(me) {
			var me = me || this,
				obj = me.get(0),
				value = me.val(),
				extension = obj.extension.replace(/\s/g, "");
			var extensions = extension.split(","),
				fileExtension = "",
				extensionPass = false;
			if (value == "") {
				me.file("setError", obj.blankText);
				extensionPass = false
			} else {
				var tmp = value.split("."),
					fileExtension = tmp[tmp.length - 1];
				for (var index = 0, len = extensions.length; index < len; index++) {
					if (fileExtension === extensions[index]) {
						extensionPass = true;
						break
					}
				}
				if (!extensionPass) {
					me.file("setError", obj.extensionErrorText)
				} else {
					me.file("setNormal")
				}
			}
			me.trigger("ev_validatechange", extensionPass);
			return extensionPass
		},
		reset: function(me) {
			var me = me || this,
				container = me.file("getContainer"),
				labels = container.find(".file-text"),
				inputs = container.find(".file-input");
			labels.html("").removeAttr("title");
			inputs.val("");
			return me
		}
	});
	$.su.Widget("timepicker", {
		defaults: {
			fieldLabel: "",
			viewOnly: false,
			legendText: $.su.CHAR.TIME_SETTING.TIME || "Time",
			inputCls: "",
			cls: ""
		},
		create: function(defaults, options) {
			var me = this;
			me.each(function(i, obj) {
				var tar = $(obj);
				$.extend(obj, defaults, options);
				var viewOnlyCls = "",
					viewOnly = false;
				if (obj.viewOnly) {
					viewOnlyCls = "view-only";
					viewOnly = true
				}
				var inHTML = '<div class="container widget-container timepicker-container ' + obj.cls + '">';
				if (this.fieldLabel !== null) {
					inHTML += '<div class="widget-fieldlabel-wrap ' + this.labelCls + '">';
					inHTML += '<label class="widget-fieldlabel timepicker-fieldlabel">' + this.fieldLabel + "</label>";
					if (this.fieldLabel !== "") {
						inHTML += '<span class="widget-separator">' + this.separator + "</span>"
					}
					inHTML += "</div>"
				}
				inHTML += '<div class="widget-wrap timepicker-wrap inline">';
				inHTML += '<a class="timepicker-switch" href="javascript:void(0);">';
				inHTML += '<span class="icon"></span>';
				inHTML += '<span class="text"></span>';
				inHTML += "</a>";
				inHTML += "</div>";
				inHTML += '<div class="timepicker-msg-container ' + viewOnlyCls + '">';
				inHTML += '<div class="canvas">';
				inHTML += '<div class="timepicker-msg-container-wrap">';
				inHTML += '<table class="timepicker">';
				inHTML += "<thead>";
				inHTML += "<tr>";
				inHTML += '<th class="fst"></th>';
				inHTML += '<th class="week-picker" data-week="mon">' + $.su.CHAR.DATE.MONDAY + "</th>";
				inHTML += '<th class="week-picker" data-week="tue">' + $.su.CHAR.DATE.TUESDAY + "</th>";
				inHTML += '<th class="week-picker" data-week="wed">' + $.su.CHAR.DATE.WEDNESDAY + "</th>";
				inHTML += '<th class="week-picker" data-week="thu">' + $.su.CHAR.DATE.THURSDAY + "</th>";
				inHTML += '<th class="week-picker" data-week="fri">' + $.su.CHAR.DATE.FRIDAY + "</th>";
				inHTML += '<th class="week-picker" data-week="sat">' + $.su.CHAR.DATE.SATURDAY + "</th>";
				inHTML += '<th class="week-picker" data-week="sun">' + $.su.CHAR.DATE.SUNDAY + "</th>";
				inHTML += "</tr>";
				inHTML += "</thead>";
				inHTML += "<tbody>";
				for (var index = 0; index < 24; index++) {
					inHTML += "<tr>";
					inHTML += '<td class="fst"><div data-time="' + index + "-" + (index + 1) + '" class="row-picker"></div></td>';
					inHTML += '<td><div data-time-start="' + index + '" data-time-end="' + (index + 1) + '" data-week="mon" class="timepicker-picker"></div></td>';
					inHTML += '<td><div data-time-start="' + index + '" data-time-end="' + (index + 1) + '" data-week="tue" class="timepicker-picker"></div></td>';
					inHTML += '<td><div data-time-start="' + index + '" data-time-end="' + (index + 1) + '" data-week="wed" class="timepicker-picker"></div></td>';
					inHTML += '<td><div data-time-start="' + index + '" data-time-end="' + (index + 1) + '" data-week="thu" class="timepicker-picker"></div></td>';
					inHTML += '<td><div data-time-start="' + index + '" data-time-end="' + (index + 1) + '" data-week="fri" class="timepicker-picker"></div></td>';
					inHTML += '<td><div data-time-start="' + index + '" data-time-end="' + (index + 1) + '" data-week="sat" class="timepicker-picker"></div></td>';
					inHTML += '<td><div data-time-start="' + index + '" data-time-end="' + (index + 1) + '" data-week="sun" class="timepicker-picker"></div></td>';
					inHTML += "</tr>"
				}
				inHTML += "</tbody>";
				inHTML += "</table>";
				if (viewOnly) {
					inHTML += '<div class="timepicker-view-only timepicker-view-only-cover"></div>'
				}
				inHTML += "</div>";
				inHTML += '<div class="x-axis">';
				inHTML += '<div class="x-axis-wrap">';
				for (var index = 0; index <= 24; index++) {
					var time = (index.toString().length == 1) ? ("0" + index) : index.toString();
					inHTML += "<span>" + time + ":00" + "</span>"
				}
				inHTML += "</div>";
				inHTML += "</div>";
				inHTML += '<div class="legend-container">';
				inHTML += '<span class="icon"></span>';
				inHTML += '<span class="text">' + obj.legendText + "</span>";
				inHTML += "</div>";
				inHTML += "</div>";
				inHTML += '<div class="msg-btn-container">';
				inHTML += '<div class="msg-btn-wrap">';
				inHTML += '<div class="button-container inline">';
				inHTML += '<button type="button" class="button-button btn-msg btn-msg-ok"><span class="text button-text">' + $.su.CHAR.OPERATION.OK + "</span></button>";
				inHTML += "</div>";
				if (!viewOnly) {
					inHTML += '<div class="button-container inline">';
					inHTML += '<button type="button" class="button-button btn-msg btn-msg-reset"><span class="text button-text">' + $.su.CHAR.OPERATION.RESET + "</span></button>";
					inHTML += "</div>";
					inHTML += '<div class="button-container inline">';
					inHTML += '<button type="button" class="button-button btn-msg btn-msg-cancel"><span class="text button-text">' + $.su.CHAR.OPERATION.CANCEL + "</span></button>";
					inHTML += "</div>"
				}
				inHTML += "</div>";
				inHTML += "</div>";
				inHTML += "</div>";
				inHTML += "</div>";
				var container = $(inHTML);
				tar.addClass(obj.inputCls).replaceWith(container);
				container.append(tar.addClass("hidden"));
				var msgContaienr = container.find("div.timepicker-msg-container");
				msgContaienr.msg({
					cls: "timepicker-container " + obj.cls,
					type: "window"
				});
				obj.msg = msgContaienr
			});
			var container = me.closest("div.timepicker-container");
			var obj = me.get(0);
			var msg = obj.msg;
			container.delegate("a.timepicker-switch", "click", function(e) {
				if ($(this).hasClass("disabled")) {
					return
				} else {
					var snapshot = me.attr("data") || obj.snapshot || "[]";
					me.timepicker("setValue", snapshot);
					me.trigger("ev_beforeshow", [me, msg]);
					msg.msg("show")
				}
			});
			msg.on("ev_close", function(e, msg) {
				me.trigger("ev_close", [me, msg])
			});
			msg.delegate("div.timepicker-picker", "click", function(e) {
				e.stopPropagation();
				e.preventDefault()
			}).delegate("button.btn-msg-cancel", "click", function(e) {
				me.timepicker("restore")
			}).delegate("button.btn-msg-ok", "click", function(e) {
				var v = me.timepicker("getValue");
				me.timepicker("setValue", v)
			}).delegate("button.btn-msg-reset", "click", function(e) {
				me.timepicker("clear")
			});
			var obj = me.get(0);
			msg.delegate("div.timepicker-msg-container-wrap", "mousedown", function(e) {
				e.stopPropagation();
				e.preventDefault();
				if (obj.viewOnly) {
					return
				}
				var posX = e.pageX || e.screenX,
					posY = e.pageY || e.screenY;
				var canvas = $(this);
				posX = posX - canvas.offset().left;
				posY = posY - canvas.offset().top;
				var wrap = canvas.find("div.timepicker-select-wrap");
				if (wrap.length == 0) {
					wrap = $('<div class="timepicker-select-wrap"></div>');
					canvas.append(wrap)
				}
				wrap.attr("fl", posX);
				wrap.attr("ft", posY);
				wrap.css({
					"left": posX,
					"top": posY,
					"display": "block"
				});
				msg.attr("dragFlag", true)
			}).delegate("div.timepicker-msg-container-wrap", "mouseup", function(e) {
				e.stopPropagation();
				e.preventDefault();
				if (obj.viewOnly) {
					return
				}
				var wrap = msg.find("div.timepicker-select-wrap");
				if (wrap.length > 0) {
					var l = wrap.offset().left;
					var t = wrap.offset().top;
					var r = l + wrap.width();
					var b = t + wrap.height();
					var canvas = $(this);
					var pickers = canvas.find("div.timepicker-picker");
					var hasEmptyPicker = false;
					if (l == 0 && t == 0 && r == 0 && b == 0) {
						return
					}
					pickers.each(function(i, obj) {
						var p = $(obj);
						var pl = p.offset().left;
						var pt = p.offset().top;
						var pr = pl + p.width();
						var pb = pt + p.height();
						var c1 = (pl <= l && l <= pr) || (l <= pl && pr <= r) || (pl <= r && r <= pr);
						var c2 = (pt <= t && t <= pb) || (t <= pt && pb <= b) || (pt <= b && b <= pb);
						if (c1 && c2) {
							if (p.hasClass("selected")) {
								return
							} else {
								hasEmptyPicker = true;
								return false
							}
						}
					});
					pickers.each(function(i, obj) {
						var p = $(obj);
						var pl = p.offset().left;
						var pt = p.offset().top;
						var pr = pl + p.width();
						var pb = pt + p.height();
						var c1 = (pl <= l && l <= pr) || (l <= pl && pr <= r) || (pl <= r && r <= pr);
						var c2 = (pt <= t && t <= pb) || (t <= pt && pb <= b) || (pt <= b && b <= pb);
						if (c1 && c2) {
							if (hasEmptyPicker) {
								p.addClass("selected")
							} else {
								p.toggleClass("selected")
							}
						}
					});
					wrap.css({
						"display": "none",
						"width": 0,
						"height": 0
					});
					msg.removeAttr("dragFlag")
				}
			}).delegate("div.msg-wrap", "mousemove", function(e) {
				var wrap = msg.find("div.timepicker-select-wrap");
				if (obj.viewOnly) {
					return
				}
				if (wrap.length > 0) {
					wrap.css({
						"display": "none",
						"width": 0,
						"height": 0
					})
				}
				msg.removeAttr("dragFlag")
			}).delegate("div.timepicker-msg-container-wrap", "mousemove", function(e) {
				e.stopPropagation();
				e.preventDefault();
				if (obj.viewOnly) {
					return
				}
				var posX = e.pageX || e.screenX,
					posY = e.pageY || e.screenY;
				var canvas = $(this);
				posX = posX - canvas.offset().left;
				posY = posY - canvas.offset().top;
				if (msg.attr("dragFlag")) {
					var wrap = msg.find("div.timepicker-select-wrap");
					var fl = parseInt(wrap.attr("fl"), 10);
					var ft = parseInt(wrap.attr("ft"), 10);
					var w = posX - fl;
					if (w > 0) {
						wrap.css({
							"width": w
						})
					} else {
						w = Math.abs(w);
						wrap.css({
							"width": w,
							"left": posX
						})
					}
					var h = posY - ft;
					if (h > 0) {
						wrap.css({
							"height": h
						})
					} else {
						h = Math.abs(h);
						wrap.css({
							"height": h,
							"top": posY
						})
					}
				}
			});
			return me
		},
		enable: function(me) {
			var me = me || this,
				container = me.closest("div.timepicker-container"),
				aSwitch = container.find("a.timepicker-switch");
			container.removeClass("disabled");
			aSwitch.removeClass("disabled");
			return me
		},
		disable: function(me) {
			var me = me || this,
				container = me.closest("div.timepicker-container"),
				aSwitch = container.find("a.timepicker-switch");
			container.addClass("disabled");
			aSwitch.addClass("disabled");
			return me
		},
		setValue: function(me, value) {
			var me = me || this,
				value = value[1] || "{}",
				result = {};
			var msg = me.get(0).msg,
				pickers = msg.find("div.timepicker-picker").removeClass("selected");
			me.val(value);
			me.get(0).snapshot = value;
			var value = $.su.json.parseJSON(value);
			for (var week in value) {
				var dataWeek = week.toLowerCase(),
					timeArray = value[week];
				var col = pickers.filter("[data-week=" + dataWeek + "]");
				for (var index = 0, len = timeArray.length; index < len; index++) {
					var time = timeArray[index],
						dataTimeStart = time[0],
						dataTimeEnd = time[1];
					for (var jndex = dataTimeStart; jndex < dataTimeEnd; jndex++) {
						col.filter('[data-time-start="' + jndex + '"]').addClass("selected")
					}
				}
			}
			return me
		},
		getValue: function(me) {
			var me = me || this,
				msg = me.get(0).msg;
			var pickers = msg.find("div.timepicker-picker");
			var result = {};
			for (var index = 0, len = pickers.length; index < len; index++) {
				var tar = $(pickers[index]),
					dataWeek = tar.attr("data-week"),
					dataTimeStart = parseInt(tar.attr("data-time-start"), 10),
					dataTimeEnd = parseInt(tar.attr("data-time-end"), 10);
				if (tar.hasClass("selected")) {
					result[dataWeek] = result[dataWeek] || [];
					result[dataWeek].push([dataTimeStart, dataTimeEnd])
				} else {
					continue
				}
			}
			for (var week in result) {
				var timeArray = result[week],
					dArray = [],
					tmpArray = [],
					tmp = -1;
				timeArray.sort(function(a, b) {
					return a[0] - b[0]
				});
				for (var index = 0, len = timeArray.length; index < len; index++) {
					var d = timeArray[index];
					if (len == 1) {
						dArray.push(d);
						tmp = -1;
						tmpArray = [];
						continue
					}
					if (tmp == -1) {
						tmp = d;
						tmpArray = [tmp[0]];
						continue
					}
					if (tmp[1] == d[0]) {
						tmp = d
					} else {
						tmpArray.push(tmp[1]);
						dArray.push(tmpArray);
						tmp = d;
						tmpArray = [tmp[0]]
					} if (index == len - 1) {
						tmpArray.push(d[1]);
						dArray.push(tmpArray);
						tmp = -1;
						tmpArray = [];
						continue
					}
				}
				result[week] = dArray
			}
			var val = $.su.json.toJSONString(result);
			me.val(val);
			return val
		},
		restore: function(me) {
			var me = me || this,
				obj = me.get(0),
				msg = obj.msg,
				snapshot = obj.snapshot;
			if (!snapshot) {
				snapshot = "[]"
			}
			me.timepicker("setValue", snapshot);
			return me
		},
		reset: function(me) {
			var me = me || this,
				obj = me.get(0),
				msg = obj.msg;
			var pickers = msg.find("div.timepicker-picker");
			pickers.removeClass("selected");
			obj.snapshot = null;
			me.val("");
			return me
		},
		clear: function(me) {
			var me = me || this,
				obj = me.get(0),
				msg = obj.msg;
			var pickers = msg.find("div.timepicker-picker");
			pickers.removeClass("selected");
			me.val("");
			return me
		}
	});
	$.su.Widget("progressbar", {
		defaults: {
			text: "",
			fieldLabel: "",
			tips: "",
			unit: "%",
			_timeout: 0,
			value: 0,
			url: null,
			isProgressbar: true,
			showPercentage: true,
			width: 18,
			height: 6,
			fn: null,
			widgetName: "progressbar",
			expression: "percentage*1",
			ptype: "horizontal"
		},
		create: function(defaults, options) {
			var me = this;
			me.each(function(i, obj) {
				var tar = $(obj);
				$.extend(obj, defaults, options);
				var type = obj.ptype,
					_value = options.value || defaults.value,
					_width = options.width || defaults.width,
					_height = options.height || defaults.height,
					_style = type === "horizontal" ? "width:" + _width * _value + "px" : "height:" + _height * _value + "px";
				var inHTML = '<div class="container widget-container progressbar-container progressbar-' + type + " " + obj.cls + '">';
				if (obj.fieldLabel !== null) {
					inHTML += '<div class="widget-fieldlabel-wrap ' + obj.labelCls + '">';
					inHTML += '<label class="widget-fieldlabel processbar-fieldlabel">' + obj.fieldLabel + "</label>";
					if (obj.fieldLabel !== "") {
						inHTML += '<span class="widget-separator">' + obj.separator + "</span>"
					}
					inHTML += "</div>"
				}
				inHTML += '<div class="widget-wrap-outer progressbar-wrap-outer">';
				inHTML += '<div class="widget-wrap progressbar-wrap">';
				inHTML += '<div class="widget-wrap progressbar-content">';
				inHTML += '<div class="progressbar-value" style="' + _style + '"></div>';
				inHTML += "</div>";
				inHTML += '<div class="progressbar-text">';
				if (obj.text != "") {
					inHTML += '<span class="progressbar-text">' + obj.text + "</span>"
				}
				if (obj.showPercentage) {
					inHTML += '<span class="progressbar-percentage">' + _value * 100 + obj.unit + "</span>"
				}
				inHTML += "</div>";
				inHTML += "</div>";
				if (this.tips != null && this.tips != undefined) {
					inHTML += '<div class="widget-tips textbox-tips ' + obj.tipsCls + '">';
					inHTML += '<div class="content tips-content"></div>';
					inHTML += "</div>"
				}
				inHTML += '<div class="widget-error-tips textbox-error-tips ' + obj.errorTipsCls + '">';
				inHTML += '<span class="widget-error-tips-delta"></span>';
				inHTML += '<div class="widget-error-tips-wrap">';
				inHTML += '<div class="content error-tips-content"></div>';
				inHTML += "</div>";
				inHTML += "</div>";
				inHTML += "</div>";
				inHTML += "</div>";
				var container = $(inHTML);
				tar.replaceWith(container);
				container.append(tar.addClass("hidden"));
				var bar = container.find("div.progressbar-content").css("width", _width);
				bar.css("height", _height)
			});
			me.password("setTips", options.tips);
			return me
		},
		animate: function(me, args) {
			var me = me || this,
				obj = me.get(0),
				container = me.closest("div.progressbar-container"),
				type = obj.ptype,
				unit = obj.unit,
				expression = obj.expression,
				property = type === "horizontal" ? "width" : "height";
			args[1] = (args[1] === null) ? (me.percentageCurrent || 0) : args[1];
			var percentageStart = parseInt(args[1] * 100, 10),
				percentageEnd = parseInt(args[2] * 100, 10),
				duration = $.type(parseInt(args[3], 10)) === "number" ? parseInt(args[3], 10) : 500,
				callback = args[4] || null,
				percentageCurrent = percentageStart || 0;
			var progressbarBox = container.find("div.progressbar-content"),
				progressbarBar = progressbarBox.children("div.progressbar-value"),
				percentageBox = container.find("span.progressbar-percentage");
			var num = progressbarBox[property]();
			progressbarBar.css(property, parseInt(num * percentageStart / 100, 10));
			var p = Math.round(eval(expression.replace("percentage", percentageStart)) * 100) / 100;
			percentageBox.html(p + unit);
			var t = parseInt(duration / Math.abs(percentageEnd - percentageStart), 10);
			me.get(0)._timeout = setInterval(function() {
				if (percentageCurrent != percentageEnd) {
					if (percentageCurrent > percentageEnd) {
						percentageCurrent--
					} else {
						percentageCurrent++
					}
					me.percentageCurrent = percentageCurrent.toFixed(1) / 100;
					var animateObj = property === "width" ? {
						"width": parseInt(num * percentageCurrent / 100, 10)
					} : {
						"height": parseInt(num * percentageCurrent / 100, 10)
					};
					progressbarBar.clearQueue().animate(animateObj, t, function() {
						var p = Math.round(eval(expression.replace("percentage", percentageCurrent)) * 100) / 100;
						percentageBox.html(p + unit);
						me.val(percentageCurrent / 100)
					})
				} else {
					clearInterval(me.get(0)._timeout);
					me.get(0)._timeout = 0;
					var animateObj = property === "width" ? {
						"width": parseInt(num * percentageEnd / 100, 10)
					} : {
						"height": parseInt(num * percentageEnd / 100, 10)
					};
					progressbarBar.css(animateObj);
					var p = Math.round(eval(expression.replace("percentage", percentageEnd)) * 100) / 100;
					percentageBox.html(p + unit);
					if (callback) {
						callback.call(me)
					}
				}
			}, t);
			me.val(percentageEnd / 100);
			return me
		},
		reset: function(me) {
			var me = me || this,
				obj = me.get(0),
				container = me.closest("div.progressbar-container"),
				type = obj.ptype,
				unit = obj.unit,
				expression = obj.expression,
				property = type === "horizontal" ? "width" : "height";
			me.progressbar("stop");
			var progressbarBox = container.find("div.progressbar-content"),
				progressbarBar = progressbarBox.children("div.progressbar-value"),
				percentageBox = container.find("span.progressbar-percentage");
			var animateObj = (property === "width") ? {
				"width": 0
			} : {
				"height": 0
			};
			progressbarBar.stop();
			progressbarBar.css(animateObj);
			var p = Math.round(eval(expression.replace("percentage", 0)) * 100) / 100;
			percentageBox.html(+unit);
			return me
		},
		stop: function(me) {
			var me = me || this,
				container = me.closest("div.progressbar-container"),
				_timeout = me.get(0)._timeout;
			clearInterval(_timeout);
			return me
		},
		setText: function(me, arguments) {
			var me = me || this,
				container = me.closest("div.progressbar-container"),
				text = arguments[0];
			var textBox = container.find("span.progressbar-text");
			textBox.html(text)
		},
		setValue: function(me, arguments) {
			var me = me || this,
				obj = me.get(0),
				container = me.closest("div.progressbar-container"),
				type = obj.ptype,
				unit = obj.unit,
				expression = obj.expression,
				property = type === "horizontal" ? "width" : "height";
			var value = arguments[1] || 0,
				text = arguments[2] || me.get(0).text,
				animateFlag = arguments[3] || false;
			var progressbarBox = container.find("div.progressbar-content"),
				progressbarBar = progressbarBox.children("div.progressbar-value"),
				percentageBox = container.find("span.progressbar-percentage"),
				textBox = container.find("span.progressbar-text");
			var num = progressbarBox[property]();
			if (!animateFlag) {
				progressbarBar.css(property, num * value);
				var p = Math.round(eval(expression.replace("percentage", value)) * 100) / 100;
				percentageBox.html(p + unit);
				textBox.html(text)
			} else {
				me.progressbar("animate", me.val(), value, 500, function() {
					textBox.html(text)
				})
			}
			me.val(parseInt(value, 10));
			return me
		},
		update: function(me, arguments) {
			var me = me || this,
				type = me.get(0).ptype,
				property = type === "horizontal" ? "width" : "height",
				dataName = dataName || "percentage";
			var url = arguments[1] || me.get(0).url,
				data = arguments[2],
				callback = arguments[3] || null;
			$.ajax({
				url: url,
				type: "POST",
				data: data,
				dataType: "json",
				tradidional: true,
				cache: false,
				success: callback || function(data) {
					var percentage = data[dataName];
					if (percentage) {
						me.progressbar("setValue", percentage, null, true)
					} else {
						return null
					}
				}
			})
		},
		hide: function(me) {
			var me = me || this,
				container = me.closest("div.progressbar-container");
			container.css("display", "none");
			return me
		},
		show: function(me) {
			var me = me || this,
				container = me.closest("div.progressbar-container");
			container.fadeIn(150);
			return me
		}
	});
	$.su.Widget("waitingbar", {
		defaults: {
			text: "",
			fieldLabel: "请稍后",
			timeout: 0,
			url: "",
			fn: null,
			widgetName: "waitingbar",
			barWidth: 370,
			barHeight: 8,
			innerWidth: 50,
			innerHeight: 8,
			isRunning: false,
			interval: 0
		},
		create: function(defaults, options) {
			var me = this;
			me.each(function(i, obj) {
				var tar = $(obj);
				$.extend(obj, defaults, options);
				var inHTML = '<div class="container widget-container progressbar-container progressbar ' + obj.cls + '">';
				if (obj.fieldLabel !== null) {
					inHTML += '<div class="widget-fieldlabel-wrap ' + obj.labelCls + '">';
					inHTML += '<label class="widget-fieldlabel processbar-fieldlabel">' + obj.fieldLabel + "</label>";
					if (obj.fieldLabel !== "") {
						inHTML += '<span class="widget-separator">' + obj.separator + "</span>"
					}
					inHTML += "</div>"
				}
				inHTML += '<div class="widget-wrap-outer progressbar-wrap-outer" >';
				inHTML += '<div class="widget-wrap progressbar-wrap">';
				inHTML += '<div class="widget-wrap progressbar-content" style="width:' + obj.barWidth + "px;height:" + obj.barHeight + 'px;">';
				inHTML += '<div class="progressbar-value" style="width:' + obj.innerWidth + "px;height:" + obj.innerHeight + 'px;left:0;"></div>';
				inHTML += "</div>";
				inHTML += "</div>";
				if (this.tips != null && this.tips != undefined) {
					inHTML += '<div class="widget-tips textbox-tips ' + obj.tipsCls + '">';
					inHTML += '<div class="content tips-content"></div>';
					inHTML += "</div>"
				}
				inHTML += "</div>";
				inHTML += "</div>";
				var container = $(inHTML);
				tar.replaceWith(container);
				container.append(tar.addClass("hidden"))
			});
			me.password("setTips", options.tips);
			return me
		},
		run: function(me) {
			var me = me || this,
				obj = me.get(0),
				container = me.closest("div.progressbar-container");
			var progressbarBox = container.find("div.progressbar-content"),
				progressbar = progressbarBox.children("div.progressbar-value"),
				percentageBox = container.find("span.progressbar-percentage");
			if (obj.isRunning) {
				return me
			}
			clearInterval(obj.interval);
			obj.interval = setInterval(function() {
				var currentLeft = progressbar.css("left").match(/\d*/);
				currentLeft = parseInt(currentLeft);
				if (currentLeft + obj.innerWidth + 1 <= obj.barWidth) {
					progressbar.css("left", currentLeft + 1)
				} else {
					progressbar.css("left", 0)
				}
			}, 10);
			obj.isRunning = true;
			if (obj.timeout != 0) {
				setTimeout(function() {
					me.waitingbar("stop");
					me.waitingbar("hide")
				}, obj.timeout)
			}
			return me
		},
		reset: function(me) {
			var me = me || this,
				obj = me.get(0),
				container = me.closest("div.progressbar-container");
			var progressbarBox = container.find("div.progressbar-content"),
				progressbar = progressbarBox.children("div.progressbar-value"),
				percentageBox = container.find("span.progressbar-percentage");
			progressbar.css("left", 0);
			if (!obj.isRunning) {
				return me
			}
			clearInterval(obj.interval);
			obj.interval = setInterval(function() {
				var currentLeft = progressbar.css("left").match(/\d*/);
				currentLeft = parseInt(currentLeft);
				if (currentLeft + obj.innerWidth + 1 <= obj.barWidth) {
					progressbar.css("left", currentLeft + 1)
				} else {
					progressbar.css("left", 0)
				}
			}, 10);
			obj.isRunning = true;
			return me
		},
		stop: function(me) {
			var me = me || this,
				obj = me.get(0),
				container = me.closest("div.progressbar-container");
			var progressbarBox = container.find("div.progressbar-content"),
				progressbar = progressbarBox.children("div.progressbar-value"),
				percentageBox = container.find("span.progressbar-percentage");
			if (!obj.isRunning) {
				return me
			}
			clearInterval(obj.interval);
			obj.isRunning = false;
			return me
		},
		hide: function(me) {
			var me = me || this,
				container = me.closest("div.progressbar-container");
			container.css("display", "none");
			return me
		},
		show: function(me) {
			var me = me || this,
				container = me.closest("div.progressbar-container");
			container.fadeIn(150);
			return me
		}
	});
	$.su.Widget("password", {
		defaults: {
			fieldLabel: "",
			tips: "",
			hint: null,
			validateIcon: false,
			showLevel: true,
			allowBlank: true,
			encrypt: $.su.encrypt,
			encryptParam: ["n", "e"],
			_minLength: 1,
			_maxLength: 128,
			vtype: "password",
			invalidText: $.su.CHAR.VTYPETEXT.INVALIDTEXT,
			blankText: $.su.CHAR.VTYPETEXT.BLANKTEXT,
			allowVisible: false
		},
		create: function(defaults, options) {
			var me = this;
			me.each(function(i, obj) {
				var tar = $(obj);
				$.extend(obj, defaults, options);
				var inHTML = '<div class="container widget-container text-container password-container ' + obj.cls + " " + (obj.showLevel ? "level" : "") + '">';
				if (obj.fieldLabel !== null) {
					inHTML += '<div class="widget-fieldlabel-wrap ' + obj.labelCls + '">';
					inHTML += '<label class="widget-fieldlabel text-fieldlabel password-fieldlabel">' + obj.fieldLabel + "</label>";
					if (obj.fieldLabel !== "") {
						inHTML += '<span class="widget-separator">' + obj.separator + "</span>"
					}
					inHTML += "</div>"
				}
				inHTML += '<div class="widget-wrap-outer text-wrap-outer password-wrap-outer">';
				inHTML += '<div class="widget-wrap text-wrap password-wrap ' + (obj.allowVisible ? "allow-visible" : "") + '">';
				inHTML += '<span class="text-wrap password-wrap ">';
				inHTML += '<input type="password" class="text-text password-text password-hidden ' + obj.inputCls + '" maxlength="' + obj._maxLength + '"/>';
				if (obj.allowVisible) {
					obj.passwordVisible = false;
					inHTML += '<input type="text" class="text-text password-text password-visible hidden ' + obj.inputCls + '" maxlength="' + obj._maxLength + '"/>';
					inHTML += '<span class="icon allow-visible-btn"></span>'
				}
				inHTML += "</span>";
				if (obj.hint) {
					inHTML += '<span class="hint text-hint password-hint">';
					inHTML += '<input class="text-hint password-hint ' + obj.inputCls + '" value="' + obj.hint + '" contenteditable="false" readonly="readonly"/>';
					inHTML += "</span>"
				}
				if (obj.showLevel) {
					inHTML += '<div class="password-level ' + obj.inputCls + '">';
					inHTML += '<span class="level low">' + $.su.CHAR.OPERATION.LOW + "</span>";
					inHTML += '<span class="level middle">' + $.su.CHAR.OPERATION.MIDDLE + "</span>";
					inHTML += '<span class="level high">' + $.su.CHAR.OPERATION.HIGH + "</span>";
					inHTML += "</div>"
				}
				inHTML += "</div>";
				if (this.validateIcon) {
					inHTML += '<span class="widget-validate-icon"></span>'
				}
				if (this.tips != null && this.tips != undefined) {
					inHTML += '<div class="widget-tips textbox-tips ' + obj.tipsCls + '">';
					inHTML += '<div class="content tips-content"></div>';
					inHTML += "</div>"
				}
				inHTML += '<div class="widget-error-tips textbox-error-tips ' + obj.errorTipsCls + '">';
				inHTML += '<span class="widget-error-tips-delta"></span>';
				inHTML += '<div class="widget-error-tips-wrap">';
				inHTML += '<div class="content error-tips-content"></div>';
				inHTML += "</div>";
				inHTML += "</div>";
				inHTML += "</div>";
				inHTML += "</div>";
				var container = $(inHTML);
				tar.replaceWith(container);
				container.find("span.password-wrap").append(tar.addClass("hidden"));
				if (this.vtype) {
					var vtype = this.vtype;
					if (this.vtypeText) {
						this.vtype.vtypeText = this.vtypeText
					}
					this.vtype = new $.su.vtype(vtype)
				}
			});
			var container = me.closest("div.password-container"),
				passwordHiddenText = container.find("input.password-hidden"),
				passwordVisibleText = container.find("input.password-visible"),
				passwordHint = container.find("input.password-hint"),
				passwordLevel = container.find("input.password-level");
			container.delegate("input.password-text", "click", function(e) {
				e.stopPropagation()
			}).delegate("span.allow-visible-btn", "click", function(e) {
				e.stopPropagation();
				e.preventDefault();
				var obj = me.get(0);
				var btn = $(this);
				var text = "";
				if (obj.passwordVisible) {
					text = passwordVisibleText.val();
					passwordHiddenText.val(text);
					passwordVisibleText.css("display", "none");
					passwordHiddenText.css("display", "inline-block");
					btn.removeClass("visible");
					obj.passwordVisible = false
				} else {
					text = passwordHiddenText.val();
					passwordVisibleText.val(text);
					passwordHiddenText.css("display", "none");
					passwordVisibleText.css("display", "inline-block");
					btn.addClass("visible");
					obj.passwordVisible = true
				}
			});
			me.on("ev_validatechange", function(e, isvalid, tips) {
				e.stopPropagation();
				if (isvalid) {
					$(this).textbox("setValid")
				} else {
					$(this).textbox("setError", tips)
				}
			});
			passwordHint.on("click focus", function(e) {
				e.preventDefault();
				var obj = me.get(0);
				$(this).fadeOut(50, function() {
					if (obj.passwordVisible) {
						passwordVisibleText.focus()
					} else {
						passwordHiddenText.focus()
					}
				});
				return false
			});
			container.delegate("input.password-text", "click focus", function(e) {
				e.preventDefault();
				passwordHint.fadeOut(50);
				me.password("setFocus")
			});
			container.delegate("input.password-text", "blur", function(e) {
				var obj = me.get(0),
					encrypt = obj.encrypt,
					e = obj.e,
					n = obj.n;
				var value = obj.passwordVisible ? passwordVisibleText.val() : passwordHiddenText.val();
				me.password("removeFocus");
				if (!value) {
					passwordHint.css("display", "inline")
				}
				if (me.password("validate")) {
					me.password("doEncrypt")
				}
				if (obj.passwordVisible) {
					var text = passwordVisibleText.val();
					passwordHiddenText.val(text)
				} else {
					var text = passwordHiddenText.val();
					passwordVisibleText.val(text)
				}
			});
			container.delegate("input.password-text", "keyup", function(e) {
				var value = $(this).val();
				me.password("levelCheck");
				me.trigger("ev_change", [value, e.key, e.keyCode])
			});
			setTimeout(function() {
				if (passwordHiddenText.val() != "") {
					passwordHint.css("display", "none")
				}
			}, 100);
			me.password("setTips", options.tips);
			return me
		},
		levelCheck: function(me) {
			var me = me || this,
				obj = me.get(0),
				container = me.closest("div.password-container"),
				passwordVisible = container.find("input.password-visible"),
				passwordHidden = container.find("input.password-hidden"),
				value = "";
			if (obj.passwordVisible) {
				value = passwordVisible.val()
			} else {
				value = passwordHidden.val()
			}
			var point = 0;
			var charLength = value.length;
			if (0 < charLength && charLength <= 4) {
				point += 5
			} else {
				if (4 < charLength && charLength <= 7) {
					point += 10
				} else {
					if (charLength > 7) {
						point += 25
					}
				}
			}
			var patternLowCase = /[a-z]/g;
			var patternUpCase = /[A-Z]/g;
			var patternNum = /[0-9]/g;
			var patternSign = /[\`\~\!\@\#\$\%\^\&\*\(\)\-\=\_\+\[\]\{\}\;\:\'\"\\\|\/\?\.\,\<\>\x20]/g;
			var flagLow = patternLowCase.test(value);
			var flagUp = patternUpCase.test(value);
			var flagChar = flagLow || flagUp;
			var flagBoth = flagLow && flagUp;
			if (flagBoth) {
				point += 20
			} else {
				if (flagChar) {
					point += 10
				}
			}
			var flagNum = patternNum.test(value);
			var len = value.match(patternNum);
			if (len) {
				len = len.length
			} else {
				len = 0
			} if (len >= 3) {
				point += 20
			} else {
				if (0 < len && len < 3) {
					point += 10
				}
			}
			var flagSign = patternSign.test(value);
			var len = value.match(patternSign);
			if (len) {
				len = len.length
			} else {
				len = 0
			} if (len > 1) {
				point += 20
			} else {
				if (len == 1) {
					point += 10
				}
			} if (flagBoth && flagNum && flagSign) {
				point += 5
			} else {
				if (flagChar && flagNum && flagSign) {
					point += 3
				} else {
					if (flagChar && flagNum) {
						point += 2
					}
				}
			}
			var lv = 0;
			if (point <= 0) {
				lv = 0
			} else {
				if (0 < point && point <= 50) {
					lv = 1
				} else {
					if (50 < point && point < 80) {
						lv = 2
					} else {
						lv = 3
					}
				}
			}
			var passwordLevel = container.find("div.password-level");
			passwordLevel.removeClass("level-0 level-1 level-2 level-3");
			passwordLevel.fadeIn(100).addClass("level-" + lv);
			return me
		},
		validate: function(me, flag) {
			var me = me || this,
				obj = me.get(0),
				container = me.closest("div.password-container"),
				passwordVisible = container.find("input.password-visible"),
				passwordHidden = container.find("input.password-hidden"),
				value = "",
				result = true,
				flag = (flag[1] === false) ? false : true;
			if (obj.passwordVisible) {
				value = passwordVisible.val()
			} else {
				value = passwordHidden.val()
			}
			var returnResult = function(tar, resultText) {
				if (resultText === true) {
					if (flag) {
						$(tar).trigger("ev_validatechange", [true, tar.tips])
					}
					return true
				} else {
					if (!resultText) {
						resultText = tar.tips
					}
					if (flag) {
						$(tar).trigger("ev_validatechange", [false, resultText])
					}
					return false
				}
			};
			if (value === "") {
				if (obj.allowBlank !== true) {
					result = false;
					return returnResult(obj, obj.blankText)
				} else {
					result = true;
					return returnResult(obj, true)
				}
			} else {
				var vtype = obj.vtype;
				if (vtype && vtype.isVtype === true) {
					result = vtype.validate(value);
					if (result !== true) {
						if (result === false) {
							return returnResult(obj, vtype.vtypeText)
						} else {
							return returnResult(obj, result)
						}
					}
				}
				if (obj.validator) {
					result = obj.validator(value);
					if ($.type(result) !== "boolean") {
						return returnResult(obj, result)
					}
					if (result == false) {
						return returnResult(obj, obj.invalidText)
					}
				}
				return returnResult(obj, true)
			}
		},
		setValue: function(me, _value) {
			var me = me || this,
				obj = me.get(0),
				encryptParam = obj.encryptParam,
				value = _value[1];
			if ($.type(obj.encrypt) == "function" && $.isArray(value)) {
				var i = 0;
				for (var index = 0, len = encryptParam.length; index < len; index++) {
					var name = encryptParam[index];
					obj[name] = value[index]
				}
			} else {
				me.val(value);
				me.siblings("input").val(value)
			}
			return me
		},
		getValue: function(me) {
			var me = me || this,
				container = me.closest("div.password-container"),
				password = container.find("input.password-text");
			return password.val()
		},
		doEncrypt: function(me) {
			var obj = me.get(0),
				encrypt = obj.encrypt,
				encryptParam = obj.encryptParam;
			var container = me.closest("div.password-container"),
				passwordHiddenText = container.find("input.password-hidden"),
				passwordVisibleText = container.find("input.password-visible"),
				passwordHint = container.find("input.password-hint");
			var value = obj.passwordVisible ? passwordVisibleText.val() : passwordHiddenText.val();
			me.password("removeFocus");
			if (!value) {
				passwordHint.css("display", "inline")
			}
			var check = true;
			var param = [];
			for (var index = 0, len = encryptParam.length; index < len; index++) {
				var name = encryptParam[index];
				if (obj[name] == null || obj[name] == undefined) {
					check = false;
					break
				} else {
					param[index] = obj[name]
				}
			}
			if ($.type(encrypt) == "function" && check) {
				value = encrypt(value, param)
			}
			me.val(value);
			return me
		},
		disable: function(me) {
			var me = me || this,
				container = me.textbox("getContainer"),
				password = container.find("input.password-text");
			container.addClass("disabled");
			password.prop("disabled", true);
			return me
		},
		enable: function(me) {
			var me = me || this,
				container = me.textbox("getContainer"),
				password = container.find("input.password-text");
			container.removeClass("disabled");
			password.prop("disabled", false);
			return me
		},
		reset: function(me) {
			var me = me || this,
				container = me.textbox("getContainer"),
				password = container.find("input.password-text");
			password.val("");
			return me
		}
	});
	$.su.Widget("status", {
		defaults: {
			proxy: null,
			fieldLabel: null,
			interval: 500,
			loadingText: $.su.CHAR.OPERATION.CONNECTING,
			loadedText: $.su.CHAR.OPERATION.CONNECTED,
			loadedFailedText: $.su.CHAR.OPERATION.CONNECTFAILED,
			unloadingText: $.su.CHAR.OPERATION.DISCONNECTING,
			unloadedText: $.su.CHAR.OPERATION.DISCONNECTED,
			unloadedFailedText: $.su.CHAR.OPERATION.DISCONNECTFAILED,
			showText: true
		},
		create: function(defaults, options) {
			var me = this;
			me.each(function(i, obj) {
				var tar = $(obj);
				$.extend(obj, defaults, options);
				var inHTML = '<div class="container widget-container status-container ' + obj.cls + '">';
				if (obj.fieldLabel !== null) {
					inHTML += '<div class="widget-fieldlabel-wrap ' + obj.labelCls + '">';
					inHTML += '<label class="widget-fieldlabel status-fieldlabel">' + obj.fieldLabel + "</label>";
					if (obj.fieldLabel !== "") {
						inHTML += '<span class="widget-separator">' + obj.separator + "</span>"
					}
					inHTML += "</div>"
				}
				inHTML += '<div class="widget-wrap status-wrap">';
				inHTML += '<span class="icon"></span>';
				var textCls = obj.textCls || "";
				inHTML += '<span class="text ' + textCls + '"></span>';
				inHTML += "</div>";
				inHTML += "</div>";
				var container = $(inHTML);
				tar.replaceWith(container);
				container.append(tar.addClass("hidden"));
				if (!obj.showText) {
					container.find("span.text").css("display", "none")
				}
				var proxy = obj.proxy;
				if (proxy && !proxy.isProxy) {
					obj.proxy = new $.su.Proxy(proxy)
				}
			});
			me.status("setNormal");
			return me
		},
		sync: function(me, param) {
			var me = me || this,
				obj = me.get(0),
				proxy = obj.proxy,
				data = param[1] || {}, callback_success = param[2] || null,
				callback_failed = param[3] || null;
			if (!proxy || !proxy.isProxy) {
				return me
			}
			proxy.write({
				"params": data
			}, function(data, status, xhr) {
				if (callback_success) {
					callback_success.call(me, data, status, xhr)
				}
			}, function(data, errorcode, others) {
				if (callback_failed) {
					callback_failed.call(me, errorcode, others)
				}
			});
			return me
		},
		connect: function(me, param) {
			var me = me || this,
				obj = me.get(0),
				data = param[1] || {}, callback_success = param[2] || null,
				callback_failed = param[3] || null,
				data = $.extend({
					"operation": "connect"
				}, data);
			me.status("setLoading", obj.loadingText);
			me.status("sync", data, function(data, status, xhr) {
				me.status("setSuccess", obj.loadedText);
				if (callback_success) {
					callback_success.call(me, data, status, xhr)
				}
			}, function(errorcode, others) {
				loadedFailedTextArray;
				me.status("setFailed", obj.loadedFailedText);
				if (callback_failed) {
					callback_failed.call(me, errorcode, others)
				}
			});
			return me
		},
		disconnect: function(me, param) {
			var me = me || this,
				obj = me.get(0),
				data = param[1] || {}, callback_success = param[2] || null,
				callback_failed = param[3] || null,
				data = $.extend({
					"operation": "disconnect"
				}, data);
			me.status("setLoading", obj.unloadingText);
			me.status("sync", data, function(data, status, xhr) {
				me.status("setSuccess", obj.unloadedText);
				if (callback_success) {
					callback_success.call(me, data, status, xhr)
				}
			}, function(errorcode, others) {
				me.status("setFailed", obj.unloadedFailedText);
				if (callback_failed) {
					callback_failed.call(me, errorcode, others)
				}
			});
			return me
		},
		refresh: function(me, param) {
			var me = me || this,
				obj = me.get(0),
				data = param[1] || {}, callback_success = param[2] || null,
				callback_failed = param[3] || null;
			data = $.extend({
				"operation": "refresh"
			}, data);
			me.status("sync", data, function(data, status, xhr) {
				if (callback_success) {
					callback_success.call(me, data, status, xhr)
				}
			}, function(errorcode, others) {
				if (callback_failed) {
					callback_failed.call(me, errorcode, others)
				}
			});
			return me
		},
		reset: function(me) {
			var me = me || this,
				container = me.closest("div.status-container"),
				textContainer = container.find("div.status-wrap span.text");
			textContainer.empty();
			container.removeClass("loading failed success normal");
			return me
		},
		setNormal: function(me, text) {
			var me = me || this,
				container = me.closest("div.status-container"),
				text = text[1] || "";
			me.status("reset");
			container.addClass("normal");
			me.status("setText", text);
			return me
		},
		setSuccess: function(me, text) {
			var me = me || this,
				container = me.closest("div.status-container"),
				text = text[1] || "";
			me.status("reset");
			container.addClass("success");
			me.status("setText", text);
			return me
		},
		setFailed: function(me, text) {
			var me = me || this,
				container = me.closest("div.status-container"),
				text = text[1] || "";
			me.status("reset");
			container.addClass("failed");
			me.status("setText", text);
			return me
		},
		setLoading: function(me, text) {
			var me = me || this,
				container = me.closest("div.status-container"),
				text = text[1] || "";
			me.status("reset");
			container.addClass("loading");
			me.status("setText", text);
			return me
		},
		setText: function(me, text) {
			var me = me || this,
				container = me.closest("div.status-container"),
				textContainer = container.find("div.status-wrap span.text"),
				text = text[1] || "";
			textContainer.empty().html(text);
			return me
		}
	});
	$.su.Widget("slider", {
		defaults: {
			showPercentage: true,
			_width: 206,
			increment: 5,
			minValue: 0,
			maxValue: 100,
			range: null,
			unit: "%",
			value: 50
		},
		create: function(defaults, options) {
			var me = this;
			me.each(function(i, obj) {
				var input = $(obj);
				if (options.width) {
					options._width = options.width;
					delete options.width
				}
				if (obj.maxValue <= obj.minValue) {
					return
				}
				$.extend(obj, defaults, options);
				if (!obj.range) {
					obj.range = [obj.minValue, obj.maxValue]
				}
				var _value = options.value || input.val() || defaults.value;
				var inHTML = '<div class="container widget-container slider-container ' + obj.cls + '">';
				if (obj.fieldLabel !== null) {
					inHTML += '<div class="widget-fieldlabel-wrap ' + obj.labelCls + '">';
					inHTML += '<label class="widget-fieldlabel slider-fieldlabel">' + obj.fieldLabel + "</label>";
					if (obj.fieldLabel !== "") {
						inHTML += '<span class="widget-separator">' + obj.separator + "</span>"
					}
					inHTML += "</div>"
				}
				inHTML += '<div class="widget-wrap-outer slider-wrap-outer">';
				inHTML += '<div class="widget-wrap slider-wrap">';
				inHTML += '<div class="widget-wrap slider-content">';
				inHTML += '<div class="widget-value slider-value">';
				inHTML += '<div class="widget-value-inner slider-value-inner">';
				inHTML += "</div>";
				inHTML += "</div>";
				inHTML += "</div>";
				if (obj.showPercentage) {
					inHTML += '<div class="slider-text">';
					inHTML += '<span class="slider-percentage">' + _value + obj.unit + "</span>";
					inHTML += "</div>"
				}
				inHTML += "</div>";
				inHTML += "</div>";
				inHTML += "</div>";
				var container = $(inHTML);
				input.replaceWith(container);
				container.prepend(input.addClass("hidden"));
				container.find("div.slider-content").css({
					"width": obj._width
				})
			});
			var container = me.closest("div.slider-container");
			var mouseupHandler = function(e) {
				$("html").off("mousemove", dragingHandler);
				$("html").off("mouseup", mouseupHandler)
			};
			var dragingHandler = function(e) {
				e.preventDefault();
				var bar = container.find("div.slider-value");
				var obj = me.get(0);
				var maxValue = parseInt(obj.maxValue, 10);
				var minValue = parseInt(obj.minValue, 10);
				var width = parseInt(obj._width, 10);
				var increment = parseInt(obj.increment, 10);
				var posX = e.pageX || e.screenX;
				var w = (posX - bar.offset().left);
				var step = Math.round(w / width * (maxValue));
				var v = Math.round(step / increment) * increment;
				me.slider("setValue", v)
			};
			container.delegate("div.slider-value-inner", "mousedown", function(e) {
				$("html").on("mousemove", dragingHandler);
				$("html").on("mouseup", mouseupHandler)
			}).delegate("div.slider-value-inner", "mouseup", mouseupHandler);
			return me
		},
		getValue: function(me) {
			var me = me || this;
			return me.val()
		},
		setValue: function(me, value) {
			var me = me || this;
			var container = me.closest("div.slider-container");
			var box = container.find("div.slider-value");
			var obj = me.get(0);
			var vOld = me.val();
			var value = value[1];
			var maxValue = parseInt(obj.maxValue, 10);
			var minValue = parseInt(obj.minValue, 10);
			var maxRange = parseInt(obj.range[1], 10);
			var minRange = parseInt(obj.range[0], 10);
			if (value > maxRange) {
				value = maxRange
			} else {
				if (value < minRange) {
					value = minRange
				}
			}
			var width = parseInt(obj._width, 10);
			var w = Math.round(width / (maxValue) * value);
			box.css({
				"width": w
			});
			container.find("span.slider-percentage").html(value + obj.unit);
			me.val(value);
			if (vOld.toString() !== value.toString()) {
				me.trigger("ev_change", [vOld, value])
			}
			return me
		},
		reset: function(me) {
			var me = me || this;
			var obj = me.get(0);
			var minValue = parseInt(obj.minValue, 10);
			var defaultValue = parseInt(obj.defaultValue, 10);
			var v = defaultValue || minValue;
			me.slider("setValue", v);
			return me
		},
		setRange: function(me, range) {
			var me = me || this;
			var obj = me.get(0);
			var range = range[1];
			var maxValue = parseInt(obj.maxValue, 10);
			var minValue = parseInt(obj.minValue, 10);
			if (range[0] < minValue) {
				range[0] = minValue
			}
			if (range[1] > maxValue) {
				range[1] = maxValue
			}
			if (range[0] > range[1]) {
				return
			}
			obj.range = range;
			return me
		}
	});
	$.su.Widget("switchbutton", {
		defaults: {
			handler: null,
			onHandler: null,
			onCallback: null,
			onValue: "on",
			offValue: "off",
			defaultValue: "on",
			onText: $.su.CHAR.OPERATION.ON,
			offText: $.su.CHAR.OPERATION.OFF,
			showText: false,
			offHandler: null,
			offCallback: null,
			cls: "",
			proxy: null,
			field: null,
			autoLoad: true
		},
		create: function(defaults, options) {
			var me = this;
			me.each(function(i, obj) {
				var input = $(obj);
				$.extend(obj, defaults, options);
				if (obj.proxy && !obj.proxy.isProxy) {
					obj.proxy = new $.su.Proxy(obj.proxy)
				}
				var inHTML = '<div class="container widget-container switch-button-container off ' + obj.cls + '">';
				if (obj.fieldLabel !== null) {
					inHTML += '<div class="widget-fieldlabel-wrap ' + obj.labelCls + '">';
					inHTML += '<label class="widget-fieldlabel switch-button-fieldlabel">' + obj.fieldLabel + "</label>";
					if (obj.fieldLabel !== "") {
						inHTML += '<span class="widget-separator">' + obj.separator + "</span>"
					}
					inHTML += "</div>"
				}
				inHTML += '<div class="widget-wrap-outer switch-button-wrap-outer">';
				inHTML += '<a class="switch-button-btn off" href="javascript:void(0);">';
				inHTML += '<span class="switch-button-btn-wrap">';
				inHTML += '<span class="switch-button-text-wrap">';
				if (obj.showText) {
					inHTML += '<span class="switch-button-text on">' + obj.onText + "</span>";
					inHTML += '<span class="switch-button-text off">' + obj.offText + "</span>"
				}
				inHTML += "</span>";
				inHTML += '<span class="switch-button-btn-slider"></span>';
				inHTML += "</span>";
				inHTML += "</a>";
				inHTML += '<div class="loading-wrap">';
				inHTML += '<div class="loading-wrap-outer">';
				inHTML += '<span class="loading"></span>';
				inHTML += "</div>";
				inHTML += "</div>";
				if (this.tips != null && this.tips != undefined) {
					inHTML += '<div class="widget-tips switch-button-tips ' + obj.tipsCls + '">';
					inHTML += '<div class="content tips-content"></div>';
					inHTML += "</div>"
				}
				inHTML += '<div class="widget-error-tips switch-button-error-tips ' + obj.errorTipsCls + '">';
				inHTML += '<span class="widget-error-tips-delta"></span>';
				inHTML += '<div class="widget-error-tips-wrap">';
				inHTML += '<div class="content error-tips-content"></div>';
				inHTML += "</div>";
				inHTML += "</div>";
				inHTML += "</div>";
				inHTML += "</div>";
				var container = $(inHTML);
				input.replaceWith(container);
				container.prepend(input.addClass("hidden"))
			});
			var container = me.closest("div.switch-button-container");
			container.delegate("a.switch-button-btn", "click", function(e) {
				var btn = $(this);
				var obj = me.get(0);
				if (btn.hasClass("disabled")) {
					return
				}
				var value = obj.defaultValue;
				if (btn.hasClass("on")) {
					value = obj.offValue
				} else {
					value = obj.onValue
				}
				me.switchbutton("click", value);
				me.trigger("ev_click", [value])
			});
			return me
		},
		click: function(me, value) {
			var me = me || this;
			var obj = me.get(0);
			var value = value[1] || obj.offValue;
			var onValue = obj.onValue;
			var container = me.closest("div.switch-button-container");
			var btn = container.find("a.switch-button-btn");
			var slider = btn.find("span.switch-button-btn-slider");
			if (onValue == value) {
				slider.animate({
					"left": "36px"
				});
				btn.addClass("on");
				container.addClass("on");
				btn.removeClass("off");
				container.removeClass("off");
				if (obj.handler) {
					obj.handler.call(me, value)
				}
				if (obj.onHandler) {
					obj.onHandler.call(me, value)
				}
			} else {
				slider.animate({
					"left": "2px"
				});
				btn.removeClass("on");
				container.removeClass("on");
				btn.addClass("off");
				container.addClass("off");
				if (obj.handler) {
					obj.handler.call(me, value)
				}
				if (obj.offHandler) {
					obj.offHandler.call(me, value)
				}
			}
			me.val(value);
			me.trigger("ev_setValue", [value]);
			return me
		},
		loadData: function(me, data) {
			var me = me || this;
			var obj = me.get(0);
			var field = obj.field;
			var data = data[1];
			var name = field.name;
			var mapping = field.mapping || name;
			var dd = data[mapping];
			me.switchbutton("setValue", dd);
			var onValue = obj.onValue;
			var onCallback = obj.onCallback;
			var offCallback = obj.offCallback;
			if (onValue == dd) {
				if (onCallback) {
					onCallback.call(me, dd)
				}
			} else {
				if (offCallback) {
					offCallback.call(me, dd)
				}
			}
			me.trigger("ev_loadData", [data, dd]);
			return me
		},
		getValue: function(me) {
			var me = me || this;
			var obj = me.get(0);
			var container = me.closest("div.switch-button-container");
			var btn = container.find("a.switch-button-btn");
			if (btn.hasClass("on")) {
				return obj.onValue
			} else {
				return obj.offValue
			}
		},
		setValue: function(me, value) {
			var me = me || this;
			var obj = me.get(0);
			var value = value[1] || obj.offValue;
			var onValue = obj.onValue;
			var container = me.closest("div.switch-button-container");
			var btn = container.find("a.switch-button-btn");
			var slider = btn.find("span.switch-button-btn-slider");
			if (onValue == value) {
				slider.css({
					"left": "36px"
				});
				btn.addClass("on");
				container.addClass("on");
				btn.removeClass("off");
				container.removeClass("off");
				if (obj.handler) {
					obj.handler.call(me, value)
				}
				if (obj.onHandler) {
					obj.onHandler.call(me, value)
				}
			} else {
				slider.css({
					"left": "2px"
				});
				btn.removeClass("on");
				container.removeClass("on");
				btn.addClass("off");
				container.addClass("off");
				if (obj.handler) {
					obj.handler.call(me, value)
				}
				if (obj.offHandler) {
					obj.offHandler.call(me, value)
				}
			}
			me.val(value);
			me.trigger("ev_setValue", [value]);
			return me
		},
		disable: function(me) {
			var me = me || this;
			var container = me.closest("div.switch-button-container");
			var btn = container.find("a.switch-button-btn");
			container.addClass("disabled");
			btn.addClass("disabled");
			$(container).find("input").prop("disabled", true);
			return me
		},
		disableStyle: function(me) {
			var me = me || this;
			var container = me.closest("div.switch-button-container");
			var btn = container.find("a.switch-button-btn");
			container.addClass("disabled");
			btn.addClass("disabled");
			return me
		},
		enable: function(me) {
			var me = me || this;
			var container = me.closest("div.switch-button-container");
			var btn = container.find("a.switch-button-btn");
			container.removeClass("disabled");
			btn.removeClass("disabled");
			$(container).find("input").prop("disabled", false);
			return me
		},
		enableStyle: function(me) {
			var me = me || this;
			var container = me.closest("div.switch-button-container");
			var btn = container.find("a.switch-button-btn");
			container.removeClass("disabled");
			btn.removeClass("disabled");
			return me
		},
		startWaiting: function(me) {
			var me = me || this;
			var container = me.closest("div.switch-button-container");
			var btn = container.find("a.switch-button-btn");
			btn.addClass("disabled");
			container.find("div.loading-wrap-outer").fadeIn(50);
			return me
		},
		stopWaiting: function(me) {
			var me = me || this;
			var container = me.closest("div.switch-button-container");
			var btn = container.find("a.switch-button-btn");
			container.find("div.loading-wrap-outer").fadeOut(50, function() {
				btn.removeClass("disabled")
			});
			return me
		},
		reset: function(me) {
			var me = me || this,
				obj = me.get(0);
			me.switchbutton("setValue", obj.defaultValue);
			return me
		}
	});
	$.su.Widget("tip", {
		defaults: {
			cls: "",
			icon: "",
			iconCls: "",

			_title: "",
			text: "",

			position: null,
			positionRelative: "mouse",	//或者是body, selector, me
			showEvent: "mouseover",		//或者是click
			showDelay: 1*1000,	//??“??o0??????????¤o
			dismissDelay: 1*1000,	//??“??o0??????????¤±

			//?‰??±??????“?????…??1??o?ˉ1è±???–è€…?…???–????—??€?...
			html: null,
			content: null	//优先级： conent高于html, content传选择器！
		},
		create: function(defaults, options){
			var me = this;
			me.each(function(i, obj){
				this.tip = this.tip || {};
				
				var tip = $.extend(this.tip, defaults, options);
				if (this.tip.global){
					if (!this.tip.id){
						//console.error("You are init a global Tip, so you have to set an id for it!");
						return null;
					};
				};
				this.tip.id = this.tip.id || $.su.randomId("tip");

				var tar = $(this);
				var inHTML = 	"<div class=\"container widget-container tip-container "+this.tip.cls+"\" id=\""+this.tip.id+"\">";

					inHTML +=		"<div class=\"tip-wrap\">";
					inHTML +=			"<span class=\"tip-delta\"></span>";

				if (this.tip._title){
					inHTML +=			"<h4 class=\"tip-title\">"+this.tip._title+"</h4>";
				};

				if (this.tip.showEvent === "click"){
					inHTML +=				"<a href=\"javascript:void(0);\" class=\"tip-close\">x</a>";
				};
					
					inHTML +=			"<div class=\"tip-text\">"+this.tip.text+"</div>";
					inHTML +=		"</div>";
					inHTML +=	"</div>";

				var container = $(inHTML),
					contentContainer = container.find("div.tip-text");
				//内容部分
				if (this.tip.content){
					var content = $(this.tip.content),
						contentObj = content.get(0);
					if (contentObj.isWidget){
						contentContainer.append(content[contentObj.xtype]("getContainer"));
					}else{
						contentContainer.append(content);
					};
				}else if (this.tip.html){
					contentContainer.append($(html));
				};

				tip.hostId= tar.attr("id");
				tip.isTip = true;
				this.tip = $.extend(container.get(0), tip);

				$.su.tipManager.add(this.tip);

				tip.t = 0;
			});

			var tip = me.get(0).tip;
			if (tip.showEvent === "mouseover"){
				me.bind("mouseover", function(e){
					if ($(this.tip).hasClass("disable")){
						return;
					}
					clearTimeout(this.tip.t);
					if (this.tip.showDelay){
						var id = this.tip.id;
						this.tip.t = setTimeout(function(){
							me.tip("show", e, id);
						}, this.tip.showDelay);
					};
				});

				me.bind("mouseout mouseleave", function(e){
					if ($(this.tip).hasClass("disable")){
						return;
					}
					clearTimeout(this.tip.t);
					if (this.tip.dismissDelay){
						var id = this.tip.id;
						this.tip.t = setTimeout(function(){
							me.tip("hide", id);
						}, this.tip.dismissDelay);
					};
				});

			}else if (tip.showEvent === "click"){
				me.bind("click", function(e){
					$(this).tip("show", e);
				});

				$(tip).delegate("a.tip-close", "click", function(e){
					e.preventDefault();
					me.tip("hide");
				});
			};

			return me;
		},
		show: function(me, _e){
			var me = me || this,
				tip = me.get(0).tip;
			
			$.each(me, function(i, obj){
				if (obj.tip.id == _e[2]){
					tip = obj.tip;
					return;
				}
			});
			var	container = $(tip).tip("getContainer"),
				positionRelative = tip.positionRelative,
				ev = tip.position || {
					pageX: 0,
					pageY: 0
				};

			switch (positionRelative){
				case "mouse":
					ev = _e[1];
					break;
				case "body":
					break;
				case "me":
					if (me.is("div")){
						me.append($(tip).detach());
					}else{
						var p = me.parent();
						if (p.css("position") != "absolute"){
							p.css("position", "relative");
						};
						p.append($(tip).detach());
					}
					break;
				default:
					if ($(positionRelative).length > 0){
						$(positionRelative).append($(tip).detach());
					};
					break;
			};
				
			clearTimeout(tip.t);
			container.css({
				"left": ev.pageX,
				"top": ev.pageY
			}).fadeIn(200, function(){
				$(this).css("display", "block");
			});

			me.trigger("ev_show");
			return me;
		},
		hide: function(me, _e){
			var me = me || this,
				tip = me.get(0).tip;
				
			$.each(me, function(i, obj){
				if (obj.tip.id == _e[1]){
					tip = obj.tip;
					return;
				}
			});
			var	container = $(tip).tip("getContainer");

			clearTimeout(tip.t);
			container.fadeOut(200, function(){
				$(this).css("display", "none");
			});

			me.trigger("ev_hide");
			return me;
		},
		setText: function(me, text){
			var me = me || this;
			var obj = me.get(0);
			var text = text[1];

			var tip = $(obj.tip);
			tip.find("div.tip-text").html(text);

			return me;
		}
	});
})(jQuery);